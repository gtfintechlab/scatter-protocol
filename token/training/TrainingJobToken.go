// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package trainingtoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TrainingtokenMetaData contains all meta data concerning the Trainingtoken contract.
var TrainingtokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolDeployer\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"publishTrainingJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280601e81526020017f536361747465722050726f746f636f6c20547261696e696e67204a6f627300008152506040518060400160405280600481526020017f5350544a0000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000453565b508060019081620000a1919062000453565b505050620000c4620000b86200010b60201b60201c565b6200011360201b60201c565b33600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200053a565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025b57607f821691505b60208210810362000271576200027062000213565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200029c565b620002e786836200029c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003346200032e6200032884620002ff565b62000309565b620002ff565b9050919050565b6000819050919050565b620003508362000313565b620003686200035f826200033b565b848454620002a9565b825550505050565b600090565b6200037f62000370565b6200038c81848462000345565b505050565b5b81811015620003b457620003a860008262000375565b60018101905062000392565b5050565b601f8211156200040357620003cd8162000277565b620003d8846200028c565b81016020851015620003e8578190505b62000400620003f7856200028c565b83018262000391565b50505b505050565b600082821c905092915050565b6000620004286000198460080262000408565b1980831691505092915050565b600062000443838362000415565b9150826002028217905092915050565b6200045e82620001d9565b67ffffffffffffffff8111156200047a5762000479620001e4565b5b62000486825462000242565b62000493828285620003b8565b600060209050601f831160018114620004cb5760008415620004b6578287015190505b620004c2858262000435565b86555062000532565b601f198416620004db8662000277565b60005b828110156200050557848901518255600182019150602085019450602081019050620004de565b8683101562000525578489015162000521601f89168262000415565b8355505b6001600288020188555050505b505050505050565b61314d806200054a6000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610342578063b88d4fde1461035e578063c87b56dd1461037a578063e985e9c5146103aa578063f2fde38b146103da5761012b565b80636352211e1461029c57806370a08231146102cc578063715018a6146102fc5780638da5cb5b1461030657806395d89b41146103245761012b565b806323b872dd116100f457806323b872dd146101fa578063330c093c146102165780633bb3a24d1461023457806342842e0e1461026457806355f804b3146102805761012b565b806245bd171461013057806301ffc9a71461016057806306fdde0314610190578063081812fc146101ae578063095ea7b3146101de575b600080fd5b61014a60048036038101906101459190611f73565b6103f6565b6040516101579190611fe8565b60405180910390f35b61017a6004803603810190610175919061205b565b61042e565b60405161018791906120a3565b60405180910390f35b61019861048f565b6040516101a5919061213d565b60405180910390f35b6101c860048036038101906101c3919061218b565b610521565b6040516101d591906121c7565b60405180910390f35b6101f860048036038101906101f391906121e2565b610567565b005b610214600480360381019061020f9190612222565b61067e565b005b61021e6106de565b60405161022b9190612296565b60405180910390f35b61024e6004803603810190610249919061218b565b610704565b60405161025b919061213d565b60405180910390f35b61027e60048036038101906102799190612222565b610716565b005b61029a600480360381019061029591906122b1565b610736565b005b6102b660048036038101906102b1919061218b565b6107d9565b6040516102c391906121c7565b60405180910390f35b6102e660048036038101906102e191906122fa565b61085f565b6040516102f39190611fe8565b60405180910390f35b610304610916565b005b61030e61092a565b60405161031b91906121c7565b60405180910390f35b61032c610954565b604051610339919061213d565b60405180910390f35b61035c60048036038101906103579190612353565b6109e6565b005b61037860048036038101906103739190612434565b6109fc565b005b610394600480360381019061038f919061218b565b610a5e565b6040516103a1919061213d565b60405180910390f35b6103c460048036038101906103bf91906124b7565b610b70565b6040516103d191906120a3565b60405180910390f35b6103f460048036038101906103ef91906122fa565b610c04565b005b6000610402600b610c87565b600061040e600b610c9d565b905061041a8482610cab565b6104248184610ec8565b8091505092915050565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610488575061048782610ed6565b5b9050919050565b60606000805461049e90612526565b80601f01602080910402602001604051908101604052809291908181526020018280546104ca90612526565b80156105175780601f106104ec57610100808354040283529160200191610517565b820191906000526020600020905b8154815290600101906020018083116104fa57829003601f168201915b5050505050905090565b600061052c82610fb8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610572826107d9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d9906125c9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610601611003565b73ffffffffffffffffffffffffffffffffffffffff161480610630575061062f8161062a611003565b610b70565b5b61066f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106669061265b565b60405180910390fd5b610679838361100b565b505050565b61068f610689611003565b826110c4565b6106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c5906126ed565b60405180910390fd5b6106d9838383611159565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061070f82610a5e565b9050919050565b610731838383604051806020016040528060008152506109fc565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bd9061277f565b60405180910390fd5b80600990816107d5919061294b565b5050565b6000806107e583611452565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084d90612a69565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c690612afb565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61091e61148f565b610928600061150d565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461096390612526565b80601f016020809104026020016040519081016040528092919081815260200182805461098f90612526565b80156109dc5780601f106109b1576101008083540402835291602001916109dc565b820191906000526020600020905b8154815290600101906020018083116109bf57829003601f168201915b5050505050905090565b6109f86109f1611003565b83836115d3565b5050565b610a0d610a07611003565b836110c4565b610a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a43906126ed565b60405180910390fd5b610a588484848461173f565b50505050565b6060610a6982610fb8565b6000600660008481526020019081526020016000208054610a8990612526565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590612526565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b505050505090506000610b1361179b565b90506000815103610b28578192505050610b6b565b600082511115610b5d578082604051602001610b45929190612b57565b60405160208183030381529060405292505050610b6b565b610b668461182d565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610c0c61148f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290612bed565b60405180910390fd5b610c848161150d565b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1190612c59565b60405180910390fd5b610d2381611895565b15610d63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5a90612cc5565b60405180910390fd5b610d716000838360016118d6565b610d7a81611895565b15610dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db190612cc5565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610ec46000838360016118dc565b5050565b610ed282826118e2565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610fa157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610fb15750610fb082611986565b5b9050919050565b610fc181611895565b611000576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff790612a69565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661107e836107d9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806110d0836107d9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061111257506111118185610b70565b5b8061115057508373ffffffffffffffffffffffffffffffffffffffff1661113884610521565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611179826107d9565b73ffffffffffffffffffffffffffffffffffffffff16146111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c690612d57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361123e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123590612de9565b60405180910390fd5b61124b83838360016118d6565b8273ffffffffffffffffffffffffffffffffffffffff1661126b826107d9565b73ffffffffffffffffffffffffffffffffffffffff16146112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b890612d57565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461144d83838360016118dc565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611497611003565b73ffffffffffffffffffffffffffffffffffffffff166114b561092a565b73ffffffffffffffffffffffffffffffffffffffff161461150b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150290612e55565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611641576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163890612ec1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161173291906120a3565b60405180910390a3505050565b61174a848484611159565b611756848484846119f0565b611795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178c90612f53565b60405180910390fd5b50505050565b6060600980546117aa90612526565b80601f01602080910402602001604051908101604052809291908181526020018280546117d690612526565b80156118235780601f106117f857610100808354040283529160200191611823565b820191906000526020600020905b81548152906001019060200180831161180657829003601f168201915b5050505050905090565b606061183882610fb8565b600061184261179b565b90506000815111611862576040518060200160405280600081525061188d565b8061186c84611b77565b60405160200161187d929190612b57565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166118b783611452565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6118eb82611895565b61192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192190612fe5565b60405180910390fd5b8060066000848152602001908152602001600020908161194a919061294b565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161197a9190611fe8565b60405180910390a15050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000611a118473ffffffffffffffffffffffffffffffffffffffff16611c45565b15611b6a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a3a611003565b8786866040518563ffffffff1660e01b8152600401611a5c949392919061305a565b6020604051808303816000875af1925050508015611a9857506040513d601f19601f82011682018060405250810190611a9591906130bb565b60015b611b1a573d8060008114611ac8576040519150601f19603f3d011682016040523d82523d6000602084013e611acd565b606091505b506000815103611b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0990612f53565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b6f565b600190505b949350505050565b606060006001611b8684611c68565b01905060008167ffffffffffffffff811115611ba557611ba4611e48565b5b6040519080825280601f01601f191660200182016040528015611bd75781602001600182028036833780820191505090505b509050600082602001820190505b600115611c3a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c2e57611c2d6130e8565b5b04945060008503611be5575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611cc6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611cbc57611cbb6130e8565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611d03576d04ee2d6d415b85acef81000000008381611cf957611cf86130e8565b5b0492506020810190505b662386f26fc100008310611d3257662386f26fc100008381611d2857611d276130e8565b5b0492506010810190505b6305f5e1008310611d5b576305f5e1008381611d5157611d506130e8565b5b0492506008810190505b6127108310611d80576127108381611d7657611d756130e8565b5b0492506004810190505b60648310611da35760648381611d9957611d986130e8565b5b0492506002810190505b600a8310611db2576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dfa82611dcf565b9050919050565b611e0a81611def565b8114611e1557600080fd5b50565b600081359050611e2781611e01565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e8082611e37565b810181811067ffffffffffffffff82111715611e9f57611e9e611e48565b5b80604052505050565b6000611eb2611dbb565b9050611ebe8282611e77565b919050565b600067ffffffffffffffff821115611ede57611edd611e48565b5b611ee782611e37565b9050602081019050919050565b82818337600083830152505050565b6000611f16611f1184611ec3565b611ea8565b905082815260208101848484011115611f3257611f31611e32565b5b611f3d848285611ef4565b509392505050565b600082601f830112611f5a57611f59611e2d565b5b8135611f6a848260208601611f03565b91505092915050565b60008060408385031215611f8a57611f89611dc5565b5b6000611f9885828601611e18565b925050602083013567ffffffffffffffff811115611fb957611fb8611dca565b5b611fc585828601611f45565b9150509250929050565b6000819050919050565b611fe281611fcf565b82525050565b6000602082019050611ffd6000830184611fd9565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61203881612003565b811461204357600080fd5b50565b6000813590506120558161202f565b92915050565b60006020828403121561207157612070611dc5565b5b600061207f84828501612046565b91505092915050565b60008115159050919050565b61209d81612088565b82525050565b60006020820190506120b86000830184612094565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120f85780820151818401526020810190506120dd565b60008484015250505050565b600061210f826120be565b61211981856120c9565b93506121298185602086016120da565b61213281611e37565b840191505092915050565b600060208201905081810360008301526121578184612104565b905092915050565b61216881611fcf565b811461217357600080fd5b50565b6000813590506121858161215f565b92915050565b6000602082840312156121a1576121a0611dc5565b5b60006121af84828501612176565b91505092915050565b6121c181611def565b82525050565b60006020820190506121dc60008301846121b8565b92915050565b600080604083850312156121f9576121f8611dc5565b5b600061220785828601611e18565b925050602061221885828601612176565b9150509250929050565b60008060006060848603121561223b5761223a611dc5565b5b600061224986828701611e18565b935050602061225a86828701611e18565b925050604061226b86828701612176565b9150509250925092565b600061228082611dcf565b9050919050565b61229081612275565b82525050565b60006020820190506122ab6000830184612287565b92915050565b6000602082840312156122c7576122c6611dc5565b5b600082013567ffffffffffffffff8111156122e5576122e4611dca565b5b6122f184828501611f45565b91505092915050565b6000602082840312156123105761230f611dc5565b5b600061231e84828501611e18565b91505092915050565b61233081612088565b811461233b57600080fd5b50565b60008135905061234d81612327565b92915050565b6000806040838503121561236a57612369611dc5565b5b600061237885828601611e18565b92505060206123898582860161233e565b9150509250929050565b600067ffffffffffffffff8211156123ae576123ad611e48565b5b6123b782611e37565b9050602081019050919050565b60006123d76123d284612393565b611ea8565b9050828152602081018484840111156123f3576123f2611e32565b5b6123fe848285611ef4565b509392505050565b600082601f83011261241b5761241a611e2d565b5b813561242b8482602086016123c4565b91505092915050565b6000806000806080858703121561244e5761244d611dc5565b5b600061245c87828801611e18565b945050602061246d87828801611e18565b935050604061247e87828801612176565b925050606085013567ffffffffffffffff81111561249f5761249e611dca565b5b6124ab87828801612406565b91505092959194509250565b600080604083850312156124ce576124cd611dc5565b5b60006124dc85828601611e18565b92505060206124ed85828601611e18565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061253e57607f821691505b602082108103612551576125506124f7565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125b36021836120c9565b91506125be82612557565b604082019050919050565b600060208201905081810360008301526125e2816125a6565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612645603d836120c9565b9150612650826125e9565b604082019050919050565b6000602082019050818103600083015261267481612638565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006126d7602d836120c9565b91506126e28261267b565b604082019050919050565b60006020820190508181036000830152612706816126ca565b9050919050565b7f4f6e6c7920746865206f776e65722063616e206163636573732074686973206d60008201527f6574686f64000000000000000000000000000000000000000000000000000000602082015250565b60006127696025836120c9565b91506127748261270d565b604082019050919050565b600060208201905081810360008301526127988161275c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826127c4565b61280b86836127c4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061284861284361283e84611fcf565b612823565b611fcf565b9050919050565b6000819050919050565b6128628361282d565b61287661286e8261284f565b8484546127d1565b825550505050565b600090565b61288b61287e565b612896818484612859565b505050565b5b818110156128ba576128af600082612883565b60018101905061289c565b5050565b601f8211156128ff576128d08161279f565b6128d9846127b4565b810160208510156128e8578190505b6128fc6128f4856127b4565b83018261289b565b50505b505050565b600082821c905092915050565b600061292260001984600802612904565b1980831691505092915050565b600061293b8383612911565b9150826002028217905092915050565b612954826120be565b67ffffffffffffffff81111561296d5761296c611e48565b5b6129778254612526565b6129828282856128be565b600060209050601f8311600181146129b557600084156129a3578287015190505b6129ad858261292f565b865550612a15565b601f1984166129c38661279f565b60005b828110156129eb578489015182556001820191506020850194506020810190506129c6565b86831015612a085784890151612a04601f891682612911565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612a536018836120c9565b9150612a5e82612a1d565b602082019050919050565b60006020820190508181036000830152612a8281612a46565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612ae56029836120c9565b9150612af082612a89565b604082019050919050565b60006020820190508181036000830152612b1481612ad8565b9050919050565b600081905092915050565b6000612b31826120be565b612b3b8185612b1b565b9350612b4b8185602086016120da565b80840191505092915050565b6000612b638285612b26565b9150612b6f8284612b26565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612bd76026836120c9565b9150612be282612b7b565b604082019050919050565b60006020820190508181036000830152612c0681612bca565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612c436020836120c9565b9150612c4e82612c0d565b602082019050919050565b60006020820190508181036000830152612c7281612c36565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612caf601c836120c9565b9150612cba82612c79565b602082019050919050565b60006020820190508181036000830152612cde81612ca2565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612d416025836120c9565b9150612d4c82612ce5565b604082019050919050565b60006020820190508181036000830152612d7081612d34565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612dd36024836120c9565b9150612dde82612d77565b604082019050919050565b60006020820190508181036000830152612e0281612dc6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e3f6020836120c9565b9150612e4a82612e09565b602082019050919050565b60006020820190508181036000830152612e6e81612e32565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612eab6019836120c9565b9150612eb682612e75565b602082019050919050565b60006020820190508181036000830152612eda81612e9e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612f3d6032836120c9565b9150612f4882612ee1565b604082019050919050565b60006020820190508181036000830152612f6c81612f30565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612fcf602e836120c9565b9150612fda82612f73565b604082019050919050565b60006020820190508181036000830152612ffe81612fc2565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061302c82613005565b6130368185613010565b93506130468185602086016120da565b61304f81611e37565b840191505092915050565b600060808201905061306f60008301876121b8565b61307c60208301866121b8565b6130896040830185611fd9565b818103606083015261309b8184613021565b905095945050505050565b6000815190506130b58161202f565b92915050565b6000602082840312156130d1576130d0611dc5565b5b60006130df848285016130a6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea264697066735822122027c452711dc36c4bd36edd7caa311a0fece64f7378c8592ab3c96d80e3dac66964736f6c63430008110033",
}

// TrainingtokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TrainingtokenMetaData.ABI instead.
var TrainingtokenABI = TrainingtokenMetaData.ABI

// TrainingtokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TrainingtokenMetaData.Bin instead.
var TrainingtokenBin = TrainingtokenMetaData.Bin

// DeployTrainingtoken deploys a new Ethereum contract, binding an instance of Trainingtoken to it.
func DeployTrainingtoken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Trainingtoken, error) {
	parsed, err := TrainingtokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TrainingtokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Trainingtoken{TrainingtokenCaller: TrainingtokenCaller{contract: contract}, TrainingtokenTransactor: TrainingtokenTransactor{contract: contract}, TrainingtokenFilterer: TrainingtokenFilterer{contract: contract}}, nil
}

// Trainingtoken is an auto generated Go binding around an Ethereum contract.
type Trainingtoken struct {
	TrainingtokenCaller     // Read-only binding to the contract
	TrainingtokenTransactor // Write-only binding to the contract
	TrainingtokenFilterer   // Log filterer for contract events
}

// TrainingtokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TrainingtokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TrainingtokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TrainingtokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TrainingtokenSession struct {
	Contract     *Trainingtoken    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TrainingtokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TrainingtokenCallerSession struct {
	Contract *TrainingtokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TrainingtokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TrainingtokenTransactorSession struct {
	Contract     *TrainingtokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TrainingtokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TrainingtokenRaw struct {
	Contract *Trainingtoken // Generic contract binding to access the raw methods on
}

// TrainingtokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TrainingtokenCallerRaw struct {
	Contract *TrainingtokenCaller // Generic read-only contract binding to access the raw methods on
}

// TrainingtokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TrainingtokenTransactorRaw struct {
	Contract *TrainingtokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTrainingtoken creates a new instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtoken(address common.Address, backend bind.ContractBackend) (*Trainingtoken, error) {
	contract, err := bindTrainingtoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Trainingtoken{TrainingtokenCaller: TrainingtokenCaller{contract: contract}, TrainingtokenTransactor: TrainingtokenTransactor{contract: contract}, TrainingtokenFilterer: TrainingtokenFilterer{contract: contract}}, nil
}

// NewTrainingtokenCaller creates a new read-only instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenCaller(address common.Address, caller bind.ContractCaller) (*TrainingtokenCaller, error) {
	contract, err := bindTrainingtoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenCaller{contract: contract}, nil
}

// NewTrainingtokenTransactor creates a new write-only instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TrainingtokenTransactor, error) {
	contract, err := bindTrainingtoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenTransactor{contract: contract}, nil
}

// NewTrainingtokenFilterer creates a new log filterer instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TrainingtokenFilterer, error) {
	contract, err := bindTrainingtoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenFilterer{contract: contract}, nil
}

// bindTrainingtoken binds a generic wrapper to an already deployed contract.
func bindTrainingtoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TrainingtokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainingtoken *TrainingtokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainingtoken.Contract.TrainingtokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainingtoken *TrainingtokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TrainingtokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainingtoken *TrainingtokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TrainingtokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainingtoken *TrainingtokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainingtoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainingtoken *TrainingtokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainingtoken *TrainingtokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainingtoken.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainingtoken.Contract.BalanceOf(&_Trainingtoken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainingtoken.Contract.BalanceOf(&_Trainingtoken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.GetApproved(&_Trainingtoken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.GetApproved(&_Trainingtoken.CallOpts, tokenId)
}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCaller) GetTokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "getTokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenSession) GetTokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.GetTokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) GetTokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.GetTokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainingtoken.Contract.IsApprovedForAll(&_Trainingtoken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainingtoken.Contract.IsApprovedForAll(&_Trainingtoken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenSession) Name() (string, error) {
	return _Trainingtoken.Contract.Name(&_Trainingtoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) Name() (string, error) {
	return _Trainingtoken.Contract.Name(&_Trainingtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenSession) Owner() (common.Address, error) {
	return _Trainingtoken.Contract.Owner(&_Trainingtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) Owner() (common.Address, error) {
	return _Trainingtoken.Contract.Owner(&_Trainingtoken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.OwnerOf(&_Trainingtoken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.OwnerOf(&_Trainingtoken.CallOpts, tokenId)
}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) ProtocolDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "protocolDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenSession) ProtocolDeployer() (common.Address, error) {
	return _Trainingtoken.Contract.ProtocolDeployer(&_Trainingtoken.CallOpts)
}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) ProtocolDeployer() (common.Address, error) {
	return _Trainingtoken.Contract.ProtocolDeployer(&_Trainingtoken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainingtoken.Contract.SupportsInterface(&_Trainingtoken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainingtoken.Contract.SupportsInterface(&_Trainingtoken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenSession) Symbol() (string, error) {
	return _Trainingtoken.Contract.Symbol(&_Trainingtoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) Symbol() (string, error) {
	return _Trainingtoken.Contract.Symbol(&_Trainingtoken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.TokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.TokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.Approve(&_Trainingtoken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.Approve(&_Trainingtoken.TransactOpts, to, tokenId)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0x0045bd17.
//
// Solidity: function publishTrainingJob(address recipient, string tokenURI) returns(uint256)
func (_Trainingtoken *TrainingtokenTransactor) PublishTrainingJob(opts *bind.TransactOpts, recipient common.Address, tokenURI string) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "publishTrainingJob", recipient, tokenURI)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0x0045bd17.
//
// Solidity: function publishTrainingJob(address recipient, string tokenURI) returns(uint256)
func (_Trainingtoken *TrainingtokenSession) PublishTrainingJob(recipient common.Address, tokenURI string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.PublishTrainingJob(&_Trainingtoken.TransactOpts, recipient, tokenURI)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0x0045bd17.
//
// Solidity: function publishTrainingJob(address recipient, string tokenURI) returns(uint256)
func (_Trainingtoken *TrainingtokenTransactorSession) PublishTrainingJob(recipient common.Address, tokenURI string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.PublishTrainingJob(&_Trainingtoken.TransactOpts, recipient, tokenURI)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _Trainingtoken.Contract.RenounceOwnership(&_Trainingtoken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Trainingtoken.Contract.RenounceOwnership(&_Trainingtoken.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom0(&_Trainingtoken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom0(&_Trainingtoken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetApprovalForAll(&_Trainingtoken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetApprovalForAll(&_Trainingtoken.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setBaseURI", baseURI_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenSession) SetBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetBaseURI(&_Trainingtoken.TransactOpts, baseURI_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetBaseURI(&_Trainingtoken.TransactOpts, baseURI_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferOwnership(&_Trainingtoken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferOwnership(&_Trainingtoken.TransactOpts, newOwner)
}

// TrainingtokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Trainingtoken contract.
type TrainingtokenApprovalIterator struct {
	Event *TrainingtokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenApproval represents a Approval event raised by the Trainingtoken contract.
type TrainingtokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TrainingtokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenApprovalIterator{contract: _Trainingtoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TrainingtokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenApproval)
				if err := _Trainingtoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseApproval(log types.Log) (*TrainingtokenApproval, error) {
	event := new(TrainingtokenApproval)
	if err := _Trainingtoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Trainingtoken contract.
type TrainingtokenApprovalForAllIterator struct {
	Event *TrainingtokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenApprovalForAll represents a ApprovalForAll event raised by the Trainingtoken contract.
type TrainingtokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TrainingtokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenApprovalForAllIterator{contract: _Trainingtoken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TrainingtokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenApprovalForAll)
				if err := _Trainingtoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) ParseApprovalForAll(log types.Log) (*TrainingtokenApprovalForAll, error) {
	event := new(TrainingtokenApprovalForAll)
	if err := _Trainingtoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the Trainingtoken contract.
type TrainingtokenBatchMetadataUpdateIterator struct {
	Event *TrainingtokenBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the Trainingtoken contract.
type TrainingtokenBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*TrainingtokenBatchMetadataUpdateIterator, error) {

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TrainingtokenBatchMetadataUpdateIterator{contract: _Trainingtoken.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TrainingtokenBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenBatchMetadataUpdate)
				if err := _Trainingtoken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseBatchMetadataUpdate(log types.Log) (*TrainingtokenBatchMetadataUpdate, error) {
	event := new(TrainingtokenBatchMetadataUpdate)
	if err := _Trainingtoken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the Trainingtoken contract.
type TrainingtokenMetadataUpdateIterator struct {
	Event *TrainingtokenMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenMetadataUpdate represents a MetadataUpdate event raised by the Trainingtoken contract.
type TrainingtokenMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*TrainingtokenMetadataUpdateIterator, error) {

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TrainingtokenMetadataUpdateIterator{contract: _Trainingtoken.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TrainingtokenMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenMetadataUpdate)
				if err := _Trainingtoken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseMetadataUpdate(log types.Log) (*TrainingtokenMetadataUpdate, error) {
	event := new(TrainingtokenMetadataUpdate)
	if err := _Trainingtoken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Trainingtoken contract.
type TrainingtokenOwnershipTransferredIterator struct {
	Event *TrainingtokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenOwnershipTransferred represents a OwnershipTransferred event raised by the Trainingtoken contract.
type TrainingtokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TrainingtokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenOwnershipTransferredIterator{contract: _Trainingtoken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TrainingtokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenOwnershipTransferred)
				if err := _Trainingtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) ParseOwnershipTransferred(log types.Log) (*TrainingtokenOwnershipTransferred, error) {
	event := new(TrainingtokenOwnershipTransferred)
	if err := _Trainingtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Trainingtoken contract.
type TrainingtokenTransferIterator struct {
	Event *TrainingtokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenTransfer represents a Transfer event raised by the Trainingtoken contract.
type TrainingtokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TrainingtokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenTransferIterator{contract: _Trainingtoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TrainingtokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenTransfer)
				if err := _Trainingtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseTransfer(log types.Log) (*TrainingtokenTransfer, error) {
	event := new(TrainingtokenTransfer)
	if err := _Trainingtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
