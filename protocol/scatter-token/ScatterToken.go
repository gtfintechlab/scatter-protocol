// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package scattertoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ScattertokenMetaData contains all meta data concerning the Scattertoken contract.
var ScattertokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredModelValidatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scatterProtocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setScatterProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b506040516200315338038062003153833981810160405281019062000037919062000505565b620000476200020f60201b60201c565b600a620000559190620006c7565b8162000062919062000718565b6040518060400160405280600c81526020017f53636174746572546f6b656e00000000000000000000000000000000000000008152506040518060400160405280600281526020017f53540000000000000000000000000000000000000000000000000000000000008152508160039081620000df9190620009d3565b508060049081620000f19190620009d3565b505050600081116200013a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001319062000b1b565b60405180910390fd5b80608081815250505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fe600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620001bb6200020f60201b60201c565b600a620001c99190620006c7565b6046606485620001da919062000b6c565b620001e6919062000718565b620001f2919062000718565b6200021860201b60201c565b6207a1206005819055505062000cf1565b60006012905090565b62000228620002a960201b60201c565b816200023e620002b360201b620005161760201c565b6200024a919062000ba4565b11156200028e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002859062000c2f565b60405180910390fd5b620002a58282620002bd60201b62000de81760201c565b5050565b6000608051905090565b6000600254905090565b620002cd620002a960201b60201c565b81620002e3620002b360201b620005161760201c565b620002ef919062000ba4565b111562000333576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200032a9062000c2f565b60405180910390fd5b6200034a82826200034e60201b62000e521760201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003b79062000ca1565b60405180910390fd5b620003d460008383620004bb60201b60201c565b8060026000828254620003e8919062000ba4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200049b919062000cd4565b60405180910390a3620004b760008383620004c060201b60201c565b5050565b505050565b505050565b600080fd5b6000819050919050565b620004df81620004ca565b8114620004eb57600080fd5b50565b600081519050620004ff81620004d4565b92915050565b6000602082840312156200051e576200051d620004c5565b5b60006200052e84828501620004ee565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620005c5578086048111156200059d576200059c62000537565b5b6001851615620005ad5780820291505b8081029050620005bd8562000566565b94506200057d565b94509492505050565b600082620005e05760019050620006b3565b81620005f05760009050620006b3565b816001811462000609576002811462000614576200064a565b6001915050620006b3565b60ff84111562000629576200062862000537565b5b8360020a91508482111562000643576200064262000537565b5b50620006b3565b5060208310610133831016604e8410600b8410161715620006845782820a9050838111156200067e576200067d62000537565b5b620006b3565b62000693848484600162000573565b92509050818404811115620006ad57620006ac62000537565b5b81810290505b9392505050565b600060ff82169050919050565b6000620006d482620004ca565b9150620006e183620006ba565b9250620007107fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005ce565b905092915050565b60006200072582620004ca565b91506200073283620004ca565b92508282026200074281620004ca565b915082820484148315176200075c576200075b62000537565b5b5092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007e557607f821691505b602082108103620007fb57620007fa6200079d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620008657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000826565b62000871868362000826565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620008b4620008ae620008a884620004ca565b62000889565b620004ca565b9050919050565b6000819050919050565b620008d08362000893565b620008e8620008df82620008bb565b84845462000833565b825550505050565b600090565b620008ff620008f0565b6200090c818484620008c5565b505050565b5b81811015620009345762000928600082620008f5565b60018101905062000912565b5050565b601f82111562000983576200094d8162000801565b620009588462000816565b8101602085101562000968578190505b62000980620009778562000816565b83018262000911565b50505b505050565b600082821c905092915050565b6000620009a86000198460080262000988565b1980831691505092915050565b6000620009c3838362000995565b9150826002028217905092915050565b620009de8262000763565b67ffffffffffffffff811115620009fa57620009f96200076e565b5b62000a068254620007cc565b62000a1382828562000938565b600060209050601f83116001811462000a4b576000841562000a36578287015190505b62000a428582620009b5565b86555062000ab2565b601f19841662000a5b8662000801565b60005b8281101562000a855784890151825560018201915060208501945060208101905062000a5e565b8683101562000aa5578489015162000aa1601f89168262000995565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332304361707065643a2063617020697320300000000000000000000000600082015250565b600062000b0360158362000aba565b915062000b108262000acb565b602082019050919050565b6000602082019050818103600083015262000b368162000af4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000b7982620004ca565b915062000b8683620004ca565b92508262000b995762000b9862000b3d565b5b828204905092915050565b600062000bb182620004ca565b915062000bbe83620004ca565b925082820190508082111562000bd95762000bd862000537565b5b92915050565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b600062000c1760198362000aba565b915062000c248262000bdf565b602082019050919050565b6000602082019050818103600083015262000c4a8162000c08565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000c89601f8362000aba565b915062000c968262000c51565b602082019050919050565b6000602082019050818103600083015262000cbc8162000c7a565b9050919050565b62000cce81620004ca565b82525050565b600060208201905062000ceb600083018462000cc3565b92915050565b60805161244662000d0d600039600061055c01526124466000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806379cc6790116100b8578063a457c2d71161007c578063a457c2d71461037b578063a9059cbb146103ab578063bea55db9146103db578063dd62ed3e146103f7578063eb4f16b514610427578063fb7ba5821461044357610142565b806379cc6790146102e95780638da5cb5b14610305578063939624ab1461032357806395d89b411461033f578063985fb65d1461035d57610142565b8063355274ea1161010a578063355274ea1461020157806336cb7f801461021f578063395093511461023d57806342966c681461026d5780635e30913f1461028957806370a08231146102b957610142565b806306fdde0314610147578063095ea7b31461016557806318160ddd1461019557806323b872dd146101b3578063313ce567146101e3575b600080fd5b61014f610461565b60405161015c919061174c565b60405180910390f35b61017f600480360381019061017a9190611807565b6104f3565b60405161018c9190611862565b60405180910390f35b61019d610516565b6040516101aa919061188c565b60405180910390f35b6101cd60048036038101906101c891906118a7565b610520565b6040516101da9190611862565b60405180910390f35b6101eb61054f565b6040516101f89190611916565b60405180910390f35b610209610558565b604051610216919061188c565b60405180910390f35b610227610580565b604051610234919061188c565b60405180910390f35b61025760048036038101906102529190611807565b610586565b6040516102649190611862565b60405180910390f35b61028760048036038101906102829190611931565b6105bd565b005b6102a3600480360381019061029e919061195e565b6105d1565b6040516102b0919061188c565b60405180910390f35b6102d360048036038101906102ce919061195e565b61061a565b6040516102e0919061188c565b60405180910390f35b61030360048036038101906102fe9190611807565b610662565b005b61030d610682565b60405161031a91906119ac565b60405180910390f35b61033d60048036038101906103389190611931565b6106a8565b005b6103476109fc565b604051610354919061174c565b60405180910390f35b610365610a8e565b60405161037291906119d6565b60405180910390f35b61039560048036038101906103909190611807565b610ab4565b6040516103a29190611862565b60405180910390f35b6103c560048036038101906103c09190611807565b610b2b565b6040516103d29190611862565b60405180910390f35b6103f560048036038101906103f0919061195e565b610b4e565b005b610411600480360381019061040c91906119f1565b610c22565b60405161041e919061188c565b60405180910390f35b610441600480360381019061043c9190611931565b610ca9565b005b61044b610da1565b604051610458919061188c565b60405180910390f35b60606003805461047090611a60565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90611a60565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050905090565b6000806104fe610fa8565b905061050b818585610fb0565b600191505092915050565b6000600254905090565b60008061052b610fa8565b9050610538858285611179565b610543858585611205565b60019150509392505050565b60006012905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60055481565b600080610591610fa8565b90506105b28185856105a38589610c22565b6105ad9190611ac0565b610fb0565b600191505092915050565b6105ce6105c8610fa8565b8261147b565b50565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106748261066e610fa8565b83611179565b61067e828261147b565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b42600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072190611b66565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a390611bf8565b60405180910390fd5b600081116107ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e690611c64565b60405180910390fd5b6107f93382611648565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108489190611c84565b925050819055506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663153a7b36336040518263ffffffff1660e01b81526004016108ac91906119d6565b602060405180830381865afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed9190611cdd565b905060038081111561090257610901611d0a565b5b81600381111561091557610914611d0a565b5b1480156109625750600554600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b156109f857600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663571c3e603360006040518363ffffffff1660e01b81526004016109c5929190611d81565b600060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b505050505b5050565b606060048054610a0b90611a60565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3790611a60565b8015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b5050505050905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610abf610fa8565b90506000610acd8286610c22565b905083811015610b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0990611e1c565b60405180910390fd5b610b1f8286868403610fb0565b60019250505092915050565b600080610b36610fa8565b9050610b43818585611205565b600191505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd590611eae565b60405180910390fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008111610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce390611c64565b60405180910390fd5b610cf6338261147b565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d459190611ac0565b9250508190555062278d0042610d5b9190611ac0565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b610df0610558565b81610df9610516565b610e039190611ac0565b1115610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b90611f1a565b60405180910390fd5b610e4e8282610e52565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb890611f86565b60405180910390fd5b610ecd600083836116b2565b8060026000828254610edf9190611ac0565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610f90919061188c565b60405180910390a3610fa4600083836116b7565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101690612018565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361108e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611085906120aa565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161116c919061188c565b60405180910390a3505050565b60006111858484610c22565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111ff57818110156111f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e890612116565b60405180910390fd5b6111fe8484848403610fb0565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126b906121a8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112da9061223a565b60405180910390fd5b6112ee8383836116b2565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b906122cc565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611462919061188c565b60405180910390a36114758484846116b7565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e19061235e565b60405180910390fd5b6114f6826000836116b2565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561157c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611573906123f0565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161162f919061188c565b60405180910390a3611643836000846116b7565b505050565b611650610558565b81611659610516565b6116639190611ac0565b11156116a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169b90611f1a565b60405180910390fd5b6116ae8282610de8565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116f65780820151818401526020810190506116db565b60008484015250505050565b6000601f19601f8301169050919050565b600061171e826116bc565b61172881856116c7565b93506117388185602086016116d8565b61174181611702565b840191505092915050565b600060208201905081810360008301526117668184611713565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061179e82611773565b9050919050565b6117ae81611793565b81146117b957600080fd5b50565b6000813590506117cb816117a5565b92915050565b6000819050919050565b6117e4816117d1565b81146117ef57600080fd5b50565b600081359050611801816117db565b92915050565b6000806040838503121561181e5761181d61176e565b5b600061182c858286016117bc565b925050602061183d858286016117f2565b9150509250929050565b60008115159050919050565b61185c81611847565b82525050565b60006020820190506118776000830184611853565b92915050565b611886816117d1565b82525050565b60006020820190506118a1600083018461187d565b92915050565b6000806000606084860312156118c0576118bf61176e565b5b60006118ce868287016117bc565b93505060206118df868287016117bc565b92505060406118f0868287016117f2565b9150509250925092565b600060ff82169050919050565b611910816118fa565b82525050565b600060208201905061192b6000830184611907565b92915050565b6000602082840312156119475761194661176e565b5b6000611955848285016117f2565b91505092915050565b6000602082840312156119745761197361176e565b5b6000611982848285016117bc565b91505092915050565b600061199682611773565b9050919050565b6119a68161198b565b82525050565b60006020820190506119c1600083018461199d565b92915050565b6119d081611793565b82525050565b60006020820190506119eb60008301846119c7565b92915050565b60008060408385031215611a0857611a0761176e565b5b6000611a16858286016117bc565b9250506020611a27858286016117bc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a7857607f821691505b602082108103611a8b57611a8a611a31565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611acb826117d1565b9150611ad6836117d1565b9250828201905080821115611aee57611aed611a91565b5b92915050565b7f596f75206d75737420776169742033302064617973206265666f72652062656960008201527f6e672061626c6520746f20756e7374616b65205363617474657220546f6b656e602082015250565b6000611b506040836116c7565b9150611b5b82611af4565b604082019050919050565b60006020820190508181036000830152611b7f81611b43565b9050919050565b7f416d6f756e74206d757374206265206c657373207468616e207374616b65642060008201527f616d6f756e740000000000000000000000000000000000000000000000000000602082015250565b6000611be26026836116c7565b9150611bed82611b86565b604082019050919050565b60006020820190508181036000830152611c1181611bd5565b9050919050565b7f5374616b6520616d6f756e74206d75737420626520706f736974697665000000600082015250565b6000611c4e601d836116c7565b9150611c5982611c18565b602082019050919050565b60006020820190508181036000830152611c7d81611c41565b9050919050565b6000611c8f826117d1565b9150611c9a836117d1565b9250828203905081811115611cb257611cb1611a91565b5b92915050565b60048110611cc557600080fd5b50565b600081519050611cd781611cb8565b92915050565b600060208284031215611cf357611cf261176e565b5b6000611d0184828501611cc8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611d4a57611d49611d0a565b5b50565b6000819050611d5b82611d39565b919050565b6000611d6b82611d4d565b9050919050565b611d7b81611d60565b82525050565b6000604082019050611d9660008301856119c7565b611da36020830184611d72565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611e066025836116c7565b9150611e1182611daa565b604082019050919050565b60006020820190508181036000830152611e3581611df9565b9050919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000611e986025836116c7565b9150611ea382611e3c565b604082019050919050565b60006020820190508181036000830152611ec781611e8b565b9050919050565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b6000611f046019836116c7565b9150611f0f82611ece565b602082019050919050565b60006020820190508181036000830152611f3381611ef7565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611f70601f836116c7565b9150611f7b82611f3a565b602082019050919050565b60006020820190508181036000830152611f9f81611f63565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006120026024836116c7565b915061200d82611fa6565b604082019050919050565b6000602082019050818103600083015261203181611ff5565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006120946022836116c7565b915061209f82612038565b604082019050919050565b600060208201905081810360008301526120c381612087565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612100601d836116c7565b915061210b826120ca565b602082019050919050565b6000602082019050818103600083015261212f816120f3565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006121926025836116c7565b915061219d82612136565b604082019050919050565b600060208201905081810360008301526121c181612185565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006122246023836116c7565b915061222f826121c8565b604082019050919050565b6000602082019050818103600083015261225381612217565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006122b66026836116c7565b91506122c18261225a565b604082019050919050565b600060208201905081810360008301526122e5816122a9565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006123486021836116c7565b9150612353826122ec565b604082019050919050565b600060208201905081810360008301526123778161233b565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006123da6022836116c7565b91506123e58261237e565b604082019050919050565b60006020820190508181036000830152612409816123cd565b905091905056fea264697066735822122099fb79b288bdce9a8ec986aed578c3cf4fdf3d8d6cc2cdbfceb4d910fb923f9164736f6c63430008110033",
}

// ScattertokenABI is the input ABI used to generate the binding from.
// Deprecated: Use ScattertokenMetaData.ABI instead.
var ScattertokenABI = ScattertokenMetaData.ABI

// ScattertokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScattertokenMetaData.Bin instead.
var ScattertokenBin = ScattertokenMetaData.Bin

// DeployScattertoken deploys a new Ethereum contract, binding an instance of Scattertoken to it.
func DeployScattertoken(auth *bind.TransactOpts, backend bind.ContractBackend, cap *big.Int) (common.Address, *types.Transaction, *Scattertoken, error) {
	parsed, err := ScattertokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScattertokenBin), backend, cap)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Scattertoken{ScattertokenCaller: ScattertokenCaller{contract: contract}, ScattertokenTransactor: ScattertokenTransactor{contract: contract}, ScattertokenFilterer: ScattertokenFilterer{contract: contract}}, nil
}

// Scattertoken is an auto generated Go binding around an Ethereum contract.
type Scattertoken struct {
	ScattertokenCaller     // Read-only binding to the contract
	ScattertokenTransactor // Write-only binding to the contract
	ScattertokenFilterer   // Log filterer for contract events
}

// ScattertokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScattertokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScattertokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScattertokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScattertokenSession struct {
	Contract     *Scattertoken     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScattertokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScattertokenCallerSession struct {
	Contract *ScattertokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ScattertokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScattertokenTransactorSession struct {
	Contract     *ScattertokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ScattertokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScattertokenRaw struct {
	Contract *Scattertoken // Generic contract binding to access the raw methods on
}

// ScattertokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScattertokenCallerRaw struct {
	Contract *ScattertokenCaller // Generic read-only contract binding to access the raw methods on
}

// ScattertokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScattertokenTransactorRaw struct {
	Contract *ScattertokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScattertoken creates a new instance of Scattertoken, bound to a specific deployed contract.
func NewScattertoken(address common.Address, backend bind.ContractBackend) (*Scattertoken, error) {
	contract, err := bindScattertoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Scattertoken{ScattertokenCaller: ScattertokenCaller{contract: contract}, ScattertokenTransactor: ScattertokenTransactor{contract: contract}, ScattertokenFilterer: ScattertokenFilterer{contract: contract}}, nil
}

// NewScattertokenCaller creates a new read-only instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenCaller(address common.Address, caller bind.ContractCaller) (*ScattertokenCaller, error) {
	contract, err := bindScattertoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScattertokenCaller{contract: contract}, nil
}

// NewScattertokenTransactor creates a new write-only instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenTransactor(address common.Address, transactor bind.ContractTransactor) (*ScattertokenTransactor, error) {
	contract, err := bindScattertoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScattertokenTransactor{contract: contract}, nil
}

// NewScattertokenFilterer creates a new log filterer instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenFilterer(address common.Address, filterer bind.ContractFilterer) (*ScattertokenFilterer, error) {
	contract, err := bindScattertoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScattertokenFilterer{contract: contract}, nil
}

// bindScattertoken binds a generic wrapper to an already deployed contract.
func bindScattertoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ScattertokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scattertoken *ScattertokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scattertoken.Contract.ScattertokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scattertoken *ScattertokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scattertoken.Contract.ScattertokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scattertoken *ScattertokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scattertoken.Contract.ScattertokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scattertoken *ScattertokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scattertoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scattertoken *ScattertokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scattertoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scattertoken *ScattertokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scattertoken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.Allowance(&_Scattertoken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.Allowance(&_Scattertoken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.BalanceOf(&_Scattertoken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.BalanceOf(&_Scattertoken.CallOpts, account)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) Cap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "cap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenSession) Cap() (*big.Int, error) {
	return _Scattertoken.Contract.Cap(&_Scattertoken.CallOpts)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) Cap() (*big.Int, error) {
	return _Scattertoken.Contract.Cap(&_Scattertoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenSession) Decimals() (uint8, error) {
	return _Scattertoken.Contract.Decimals(&_Scattertoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenCallerSession) Decimals() (uint8, error) {
	return _Scattertoken.Contract.Decimals(&_Scattertoken.CallOpts)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) GetAccountStake(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "getAccountStake", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.GetAccountStake(&_Scattertoken.CallOpts, account)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.GetAccountStake(&_Scattertoken.CallOpts, account)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) GetOwnStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "getOwnStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenSession) GetOwnStake() (*big.Int, error) {
	return _Scattertoken.Contract.GetOwnStake(&_Scattertoken.CallOpts)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) GetOwnStake() (*big.Int, error) {
	return _Scattertoken.Contract.GetOwnStake(&_Scattertoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenSession) Name() (string, error) {
	return _Scattertoken.Contract.Name(&_Scattertoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenCallerSession) Name() (string, error) {
	return _Scattertoken.Contract.Name(&_Scattertoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenSession) Owner() (common.Address, error) {
	return _Scattertoken.Contract.Owner(&_Scattertoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenCallerSession) Owner() (common.Address, error) {
	return _Scattertoken.Contract.Owner(&_Scattertoken.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) RequiredModelValidatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "requiredModelValidatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scattertoken.Contract.RequiredModelValidatorStake(&_Scattertoken.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scattertoken.Contract.RequiredModelValidatorStake(&_Scattertoken.CallOpts)
}

// ScatterProtocolAddress is a free data retrieval call binding the contract method 0x985fb65d.
//
// Solidity: function scatterProtocolAddress() view returns(address)
func (_Scattertoken *ScattertokenCaller) ScatterProtocolAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "scatterProtocolAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScatterProtocolAddress is a free data retrieval call binding the contract method 0x985fb65d.
//
// Solidity: function scatterProtocolAddress() view returns(address)
func (_Scattertoken *ScattertokenSession) ScatterProtocolAddress() (common.Address, error) {
	return _Scattertoken.Contract.ScatterProtocolAddress(&_Scattertoken.CallOpts)
}

// ScatterProtocolAddress is a free data retrieval call binding the contract method 0x985fb65d.
//
// Solidity: function scatterProtocolAddress() view returns(address)
func (_Scattertoken *ScattertokenCallerSession) ScatterProtocolAddress() (common.Address, error) {
	return _Scattertoken.Contract.ScatterProtocolAddress(&_Scattertoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenSession) Symbol() (string, error) {
	return _Scattertoken.Contract.Symbol(&_Scattertoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenCallerSession) Symbol() (string, error) {
	return _Scattertoken.Contract.Symbol(&_Scattertoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenSession) TotalSupply() (*big.Int, error) {
	return _Scattertoken.Contract.TotalSupply(&_Scattertoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Scattertoken.Contract.TotalSupply(&_Scattertoken.CallOpts)
}

// AddStake is a paid mutator transaction binding the contract method 0xeb4f16b5.
//
// Solidity: function addStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) AddStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "addStake", amount)
}

// AddStake is a paid mutator transaction binding the contract method 0xeb4f16b5.
//
// Solidity: function addStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) AddStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.AddStake(&_Scattertoken.TransactOpts, amount)
}

// AddStake is a paid mutator transaction binding the contract method 0xeb4f16b5.
//
// Solidity: function addStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) AddStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.AddStake(&_Scattertoken.TransactOpts, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Approve(&_Scattertoken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Approve(&_Scattertoken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Burn(&_Scattertoken.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Burn(&_Scattertoken.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.BurnFrom(&_Scattertoken.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.BurnFrom(&_Scattertoken.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.DecreaseAllowance(&_Scattertoken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.DecreaseAllowance(&_Scattertoken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.IncreaseAllowance(&_Scattertoken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.IncreaseAllowance(&_Scattertoken.TransactOpts, spender, addedValue)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) RemoveStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "removeStake", amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RemoveStake(&_Scattertoken.TransactOpts, amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RemoveStake(&_Scattertoken.TransactOpts, amount)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactor) SetScatterProtocolAddress(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "setScatterProtocolAddress", newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenSession) SetScatterProtocolAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetScatterProtocolAddress(&_Scattertoken.TransactOpts, newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactorSession) SetScatterProtocolAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetScatterProtocolAddress(&_Scattertoken.TransactOpts, newAddress)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Transfer(&_Scattertoken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Transfer(&_Scattertoken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TransferFrom(&_Scattertoken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TransferFrom(&_Scattertoken.TransactOpts, from, to, amount)
}

// ScattertokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Scattertoken contract.
type ScattertokenApprovalIterator struct {
	Event *ScattertokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenApproval represents a Approval event raised by the Scattertoken contract.
type ScattertokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ScattertokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ScattertokenApprovalIterator{contract: _Scattertoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScattertokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenApproval)
				if err := _Scattertoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) ParseApproval(log types.Log) (*ScattertokenApproval, error) {
	event := new(ScattertokenApproval)
	if err := _Scattertoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Scattertoken contract.
type ScattertokenTransferIterator struct {
	Event *ScattertokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTransfer represents a Transfer event raised by the Scattertoken contract.
type ScattertokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ScattertokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ScattertokenTransferIterator{contract: _Scattertoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScattertokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTransfer)
				if err := _Scattertoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) ParseTransfer(log types.Log) (*ScattertokenTransfer, error) {
	event := new(ScattertokenTransfer)
	if err := _Scattertoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
