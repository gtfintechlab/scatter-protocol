// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package scattertoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ScattertokenMetaData contains all meta data concerning the Scattertoken contract.
var ScattertokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canBecomeValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"donateToLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"punishRogueTrainers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"punishRogueValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestorLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredModelValidatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"returnTokensToTrainers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"rewardBenevolentTrainers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"rewardBenevolentValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setEvaluationJobTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setReputationManagerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setScatterProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trainerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trainerLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040525f600b556002600c55600a600d556050600e556014600f5534801562000028575f80fd5b5060405162002e0b38038062002e0b8339810160408190526200004b9162000323565b620000596012600a6200044a565b62000065908262000461565b6040518060400160405280600c81526020016b29b1b0ba3a32b92a37b5b2b760a11b8152506040518060400160405280600281526020016114d560f21b8152508160039081620000b6919062000518565b506004620000c5828262000518565b5050505f81116200011d5760405162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a206361702069732030000000000000000000000060448201526064015b60405180910390fd5b608052600680546001600160a01b03191633908117909155620001629062000143601290565b6200015090600a6200044a565b6200015c908462000461565b6200016f565b50612710600555620005fa565b608051816200017d60025490565b620001899190620005e4565b1115620001d95760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640162000114565b620001e58282620001e9565b5050565b60805181620001f760025490565b620002039190620005e4565b1115620002535760405162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015260640162000114565b620001e582826001600160a01b038216620002b15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640162000114565b8060025f828254620002c49190620005e4565b90915550506001600160a01b0382165f81815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3620001e55f83835b505050565b5f6020828403121562000334575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200038f57815f19048211156200037357620003736200033b565b808516156200038157918102915b93841c939080029062000354565b509250929050565b5f82620003a75750600162000444565b81620003b557505f62000444565b8160018114620003ce5760028114620003d957620003f9565b600191505062000444565b60ff841115620003ed57620003ed6200033b565b50506001821b62000444565b5060208310610133831016604e8410600b84101617156200041e575081810a62000444565b6200042a83836200034f565b805f19048211156200044057620004406200033b565b0290505b92915050565b5f6200045a60ff84168362000397565b9392505050565b80820281158282048414176200044457620004446200033b565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680620004a457607f821691505b602082108103620004c357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200031e57805f5260205f20601f840160051c81016020851015620004f05750805b601f840160051c820191505b8181101562000511575f8155600101620004fc565b5050505050565b81516001600160401b038111156200053457620005346200047b565b6200054c816200054584546200048f565b84620004c9565b602080601f83116001811462000582575f84156200056a5750858301515b5f19600386901b1c1916600185901b178555620005dc565b5f85815260208120601f198616915b82811015620005b25788860151825594840194600190910190840162000591565b5085821015620005d057878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b808201808211156200044457620004446200033b565b6080516127ea620006215f395f818161029501528181611c670152611ed601526127ea5ff3fe608060405234801561000f575f80fd5b50600436106101f2575f3560e01c8063824205d111610114578063a457c2d7116100a9578063cda6b84711610079578063cda6b8471461048a578063da0e3f131461049d578063dd62ed3e146104b0578063f9d79c68146104c3578063fb7ba582146104d6575f80fd5b8063a457c2d71461043e578063a9059cbb14610451578063bea55db914610464578063ccd712d514610477575f80fd5b806395d89b41116100e457806395d89b41146103d5578063968c2000146103dd5780639dacf42d146103f0578063a1a33f441461041f575f80fd5b8063824205d1146103715780638a1fea68146103845780638da5cb5b14610397578063939624ab146103c2575f80fd5b806336cb7f801161018a5780635e30913f1161015a5780635e30913f146102fb57806370a082311461032357806371f65bd71461034b57806379cc67901461035e575f80fd5b806336cb7f80146102b957806339509351146102c257806342966c68146102d557806342a0f9bf146102e8575f80fd5b806323b872dd116101c557806323b872dd1461025e5780632ca2386914610271578063313ce56714610284578063355274ea14610293575f80fd5b806306fdde03146101f6578063095ea7b3146102145780630b15127b1461023757806318160ddd1461024c575b5f80fd5b6101fe6104ea565b60405161020b919061208f565b60405180910390f35b6102276102223660046120bc565b61057a565b604051901515815260200161020b565b61024a6102453660046120e6565b610593565b005b6002545b60405190815260200161020b565b61022761026c366004612101565b6105e8565b61024a61027f3660046121f0565b61060b565b6040516012815260200161020b565b7f0000000000000000000000000000000000000000000000000000000000000000610250565b61025060055481565b6102276102d03660046120bc565b6107fb565b61024a6102e336600461223d565b61081c565b61024a6102f6366004612254565b610829565b6102506103093660046120e6565b6001600160a01b03165f9081526007602052604090205490565b6102506103313660046120e6565b6001600160a01b03165f9081526020819052604090205490565b61024a6103593660046120e6565b610920565b61024a61036c3660046120bc565b61096c565b61024a61037f3660046121f0565b610985565b61024a6103923660046121f0565b610a68565b6006546103aa906001600160a01b031681565b6040516001600160a01b03909116815260200161020b565b61024a6103d036600461223d565b610ba7565b6101fe610dc0565b61024a6103eb3660046121f0565b610dcf565b6102276103fe3660046120e6565b6005546001600160a01b039091165f90815260076020526040902054101590565b61025061042d3660046120e6565b60076020525f908152604090205481565b61022761044c3660046120bc565b611269565b61022761045f3660046120bc565b6112e3565b61024a6104723660046120e6565b6112f0565b61024a6104853660046122a9565b61133c565b61024a61049836600461223d565b6114aa565b61024a6104ab3660046121f0565b6115ee565b6102506104be36600461230f565b611763565b61024a6104d13660046121f0565b61178d565b335f90815260076020526040902054610250565b6060600380546104f990612346565b80601f016020809104026020016040519081016040528092919081815260200182805461052590612346565b80156105705780601f1061054757610100808354040283529160200191610570565b820191905f5260205f20905b81548152906001019060200180831161055357829003601f168201915b5050505050905090565b5f3361058781858561192d565b60019150505b92915050565b6006546001600160a01b031633146105c65760405162461bcd60e51b81526004016105bd9061237e565b60405180910390fd5b601180546001600160a01b0319166001600160a01b0392909216919091179055565b5f336105f5858285611a51565b610600858585611ac3565b506001949350505050565b6010546001600160a01b031633146106355760405162461bcd60e51b81526004016105bd906123c3565b6011546040516328882e8160e01b81525f916001600160a01b0316906328882e81906106679086908690600401612420565b5f604051808303815f875af1158015610682573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526106a9919081019061244b565b90505f805b82518110156107095760075f8483815181106106cc576106cc6124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2054826106ff9190612520565b91506001016106ae565b505f6064600f54600a5f886001600160a01b03166001600160a01b031681526020019081526020015f20866040516107419190612533565b90815260200160405180910390205461075a919061254e565b6107649190612579565b90505f5b83518110156107f3575f838360075f888681518110610789576107896124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20546107bb919061254e565b6107c59190612579565b90506107ea8583815181106107dc576107dc6124f8565b602002602001015182611c65565b50600101610768565b505050505050565b5f3361058781858561080d8383611763565b6108179190612520565b61192d565b6108263382611cee565b50565b6010546001600160a01b031633146108535760405162461bcd60e51b81526004016105bd906123c3565b6040516370a0823160e01b81526001600160a01b038416600482015230906370a0823190602401602060405180830381865afa158015610895573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108b99190612598565b8111156108d85760405162461bcd60e51b81526004016105bd906125af565b6108e28382611cee565b6001600160a01b0383165f908152600a602052604090819020905182919061090b908590612533565b90815260405190819003602001902055505050565b6006546001600160a01b0316331461094a5760405162461bcd60e51b81526004016105bd9061237e565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b610977823383611a51565b6109818282611cee565b5050565b6010546001600160a01b031633146109af5760405162461bcd60e51b81526004016105bd906123c3565b6001600160a01b0382165f908152600a602052604080822090516109d4908490612533565b90815260200160405180910390205490505f6064600c54836109f6919061254e565b610a009190612579565b905080600b5f828254610a139190612520565b90915550506001600160a01b0384165f908152600a6020526040908190209051829190610a41908690612533565b90815260200160405180910390205f828254610a5d91906125f3565b909155505050505050565b6010546001600160a01b03163314610a925760405162461bcd60e51b81526004016105bd906123c3565b6011546040516355cb365d60e11b81525f916001600160a01b03169063ab966cba90610ac49086908690600401612420565b5f604051808303815f875af1158015610adf573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b06919081019061244b565b90505f5b8151811015610ba1576001600160a01b0384165f908152600960205260408082209051610b38908690612533565b90815260200160405180910390205f848481518110610b5957610b596124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20549050610b988383815181106107dc576107dc6124f8565b50600101610b0a565b50505050565b335f90815260086020526040902054421115610c2b5760405162461bcd60e51b815260206004820152603860248201527f596f75206d7573742077616974206265666f7265206265696e672061626c652060448201527f746f20756e7374616b65205363617474657220546f6b656e000000000000000060648201526084016105bd565b335f908152600760205260409020548110610c975760405162461bcd60e51b815260206004820152602660248201527f416d6f756e74206d757374206265206c657373207468616e207374616b656420604482015265185b5bdd5b9d60d21b60648201526084016105bd565b610ca13382611c65565b335f9081526007602052604081208054839290610cbf9084906125f3565b9091555050601054604051630a9d3d9b60e11b81523360048201525f916001600160a01b03169063153a7b3690602401602060405180830381865afa158015610d0a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d2e9190612606565b90506003816004811115610d4457610d44612624565b148015610d605750600554335f90815260076020526040902054105b15610981576010546040516302b8e1f360e51b81526001600160a01b039091169063571c3e6090610d979033905f90600401612638565b5f604051808303815f87803b158015610dae575f80fd5b505af11580156107f3573d5f803e3d5ffd5b6060600480546104f990612346565b6010546001600160a01b03163314610df95760405162461bcd60e51b81526004016105bd906123c3565b6011546040516355cb365d60e11b81525f916001600160a01b03169063ab966cba90610e2b9086908690600401612420565b5f604051808303815f875af1158015610e46573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e6d919081019061244b565b90505f6064600e54600a5f876001600160a01b03166001600160a01b031681526020019081526020015f2085604051610ea69190612533565b908152602001604051809103902054610ebf919061254e565b610ec99190612579565b90505f805b8351811015611026575f600260125f9054906101000a90046001600160a01b03166001600160a01b031663d7287ff78989898781518110610f1157610f116124f8565b60200260200101516040518463ffffffff1660e01b8152600401610f3793929190612671565b602060405180830381865afa158015610f52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f769190612598565b610f809190612785565b6001600160a01b0388165f9081526009602052604080822090519293509091610faa908990612533565b90815260200160405180910390205f878581518110610fcb57610fcb6124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205490505f610fff82611e16565b905061100b818461254e565b6110159086612520565b94505060019092019150610ece9050565b505f5b83518110156107f3575f600260125f9054906101000a90046001600160a01b03166001600160a01b031663d7287ff7898989878151811061106c5761106c6124f8565b60200260200101516040518463ffffffff1660e01b815260040161109293929190612671565b602060405180830381865afa1580156110ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110d19190612598565b6110db9190612785565b6001600160a01b0388165f9081526009602052604080822090519293509091611105908990612533565b90815260200160405180910390205f878581518110611126576111266124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205490505f61115a82611e16565b90505f8587611169848761254e565b611173919061254e565b61117d9190612579565b90506111948886815181106107dc576107dc6124f8565b6112596040518060400160405280601181526020017002a3930b4b732b9102130b630b731b29d1607d1b815250306001600160a01b03166370a082318b89815181106111e2576111e26124f8565b60200260200101516040518263ffffffff1660e01b815260040161121591906001600160a01b0391909116815260200190565b602060405180830381865afa158015611230573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112549190612598565b611e8f565b5050600190920191506110299050565b5f33816112768286611763565b9050838110156112d65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016105bd565b610600828686840361192d565b5f33610587818585611ac3565b6006546001600160a01b0316331461131a5760405162461bcd60e51b81526004016105bd9061237e565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6010546001600160a01b031633146113665760405162461bcd60e51b81526004016105bd906123c3565b6040516370a0823160e01b81526001600160a01b038516600482015230906370a0823190602401602060405180830381865afa1580156113a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113cc9190612598565b8111156113eb5760405162461bcd60e51b81526004016105bd906125af565b5f811161143a5760405162461bcd60e51b815260206004820152601f60248201527f4d757374206c6f636b20736f6d6520616d6f756e74206f6620746f6b656e730060448201526064016105bd565b6114448482611cee565b6001600160a01b0383165f9081526009602052604090819020905182919061146d908590612533565b90815260200160405180910390205f866001600160a01b03166001600160a01b031681526020019081526020015f205f828254610a5d9190612520565b6040516370a0823160e01b815233600482015230906370a0823190602401602060405180830381865afa1580156114e3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115079190612598565b8111156115645760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f74207374616b65206d6f726520746f6b656e73207468616e20796f6044820152643a9037bbb760d91b60648201526084016105bd565b61156e3382611cee565b335f908152600760205260408120805483929061158c908490612520565b9091555061159f90504262278d00612520565b335f818152600860209081526040918290209390935580519182529181018390527fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef910160405180910390a150565b6010546001600160a01b031633146116185760405162461bcd60e51b81526004016105bd906123c3565b601154604051630d8e144560e41b81525f916001600160a01b03169063d8e144509061164a9086908690600401612420565b5f604051808303815f875af1158015611665573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261168c919081019061244b565b90505f5b8151811015610ba1575f6064600d5460075f8686815181106116b4576116b46124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f20546116e6919061254e565b6116f09190612579565b905080600b5f8282546117039190612520565b925050819055508060075f858581518110611720576117206124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f205f82825461175591906125f3565b909155505050600101611690565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6010546001600160a01b031633146117b75760405162461bcd60e51b81526004016105bd906123c3565b60115460405163042f845360e51b81525f916001600160a01b0316906385f08a60906117e99086908690600401612420565b5f604051808303815f875af1158015611804573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261182b919081019061244b565b90505f5b8151811015610ba1576001600160a01b0384165f9081526009602052604090819020905161185e908590612533565b90815260200160405180910390205f83838151811061187f5761187f6124f8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020015f2054600b5f8282546118b79190612520565b90915550506001600160a01b0384165f9081526009602052604080822090516118e1908690612533565b90815260200160405180910390205f848481518110611902576119026124f8565b6020908102919091018101516001600160a01b031682528101919091526040015f205560010161182f565b6001600160a01b03831661198f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105bd565b6001600160a01b0382166119f05760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105bd565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b5f611a5c8484611763565b90505f198114610ba15781811015611ab65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105bd565b610ba1848484840361192d565b6001600160a01b038316611b275760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105bd565b6001600160a01b038216611b895760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105bd565b6001600160a01b0383165f9081526020819052604090205481811015611c005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105bd565b6001600160a01b038481165f81815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610ba1565b7f000000000000000000000000000000000000000000000000000000000000000081611c9060025490565b611c9a9190612520565b1115611ce45760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016105bd565b6109818282611ed4565b6001600160a01b038216611d4e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016105bd565b6001600160a01b0382165f9081526020819052604090205481811015611dc15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016105bd565b6001600160a01b0383165f818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611a44565b5f8115611e88575f6002830460010190505f6002828581611e3957611e39612565565b04830181611e4957611e49612565565b0490505b80821115611e81578091506002828581611e6957611e69612565565b04830181611e7957611e79612565565b049050611e4d565b5092915050565b505f919050565b6109818282604051602401611ea5929190612793565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611f5d565b7f000000000000000000000000000000000000000000000000000000000000000081611eff60025490565b611f099190612520565b1115611f535760405162461bcd60e51b8152602060048201526019602482015278115490cc8c10d85c1c19590e8818d85c08195e18d959591959603a1b60448201526064016105bd565b6109818282611f66565b61082681612023565b6001600160a01b038216611fbc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105bd565b8060025f828254611fcd9190612520565b90915550506001600160a01b0382165f81815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b5f6a636f6e736f6c652e6c6f6790505f80835160208501845afa505050565b5f5b8381101561205c578181015183820152602001612044565b50505f910152565b5f815180845261207b816020860160208601612042565b601f01601f19169290920160200192915050565b602081525f6120a16020830184612064565b9392505050565b6001600160a01b0381168114610826575f80fd5b5f80604083850312156120cd575f80fd5b82356120d8816120a8565b946020939093013593505050565b5f602082840312156120f6575f80fd5b81356120a1816120a8565b5f805f60608486031215612113575f80fd5b833561211e816120a8565b9250602084013561212e816120a8565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561217c5761217c61213f565b604052919050565b5f82601f830112612193575f80fd5b813567ffffffffffffffff8111156121ad576121ad61213f565b6121c0601f8201601f1916602001612153565b8181528460208386010111156121d4575f80fd5b816020850160208301375f918101602001919091529392505050565b5f8060408385031215612201575f80fd5b823561220c816120a8565b9150602083013567ffffffffffffffff811115612227575f80fd5b61223385828601612184565b9150509250929050565b5f6020828403121561224d575f80fd5b5035919050565b5f805f60608486031215612266575f80fd5b8335612271816120a8565b9250602084013567ffffffffffffffff81111561228c575f80fd5b61229886828701612184565b925050604084013590509250925092565b5f805f80608085870312156122bc575f80fd5b84356122c7816120a8565b935060208501356122d7816120a8565b9250604085013567ffffffffffffffff8111156122f2575f80fd5b6122fe87828801612184565b949793965093946060013593505050565b5f8060408385031215612320575f80fd5b823561232b816120a8565b9150602083013561233b816120a8565b809150509250929050565b600181811c9082168061235a57607f821691505b60208210810361237857634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526025908201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60408201526431ba34b7b760d91b606082015260800190565b6020808252603f908201527f54686973206d6574686f642063616e206f6e6c792062652063616c6c6564206260408201527f792074686520736361747465722070726f746f636f6c20636f6e747261637400606082015260800190565b6001600160a01b03831681526040602082018190525f9061244390830184612064565b949350505050565b5f602080838503121561245c575f80fd5b825167ffffffffffffffff80821115612473575f80fd5b818501915085601f830112612486575f80fd5b8151818111156124985761249861213f565b8060051b91506124a9848301612153565b81815291830184019184810190888411156124c2575f80fd5b938501935b838510156124ec57845192506124dc836120a8565b82825293850193908501906124c7565b98975050505050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8082018082111561058d5761058d61250c565b5f8251612544818460208701612042565b9190910192915050565b808202811582820484141761058d5761058d61250c565b634e487b7160e01b5f52601260045260245ffd5b5f8261259357634e487b7160e01b5f52601260045260245ffd5b500490565b5f602082840312156125a8575f80fd5b5051919050565b60208082526024908201527f43616e6e6f74206c6f636b206d6f726520746f6b656e73207468616e20796f756040820152631037bbb760e11b606082015260800190565b8181038181111561058d5761058d61250c565b5f60208284031215612616575f80fd5b8151600581106120a1575f80fd5b634e487b7160e01b5f52602160045260245ffd5b6001600160a01b0383168152604081016005831061266457634e487b7160e01b5f52602160045260245ffd5b8260208301529392505050565b5f60018060a01b038086168352606060208401526126926060840186612064565b9150808416604084015250949350505050565b600181815b808511156126df57815f19048211156126c5576126c561250c565b808516156126d257918102915b93841c93908002906126aa565b509250929050565b5f826126f55750600161058d565b8161270157505f61058d565b816001811461271757600281146127215761273d565b600191505061058d565b60ff8411156127325761273261250c565b50506001821b61058d565b5060208310610133831016604e8410600b8410161715612760575081810a61058d565b61276a83836126a5565b805f190482111561277d5761277d61250c565b029392505050565b5f6120a160ff8416836126e7565b604081525f6127a56040830185612064565b9050826020830152939250505056fea26469706673582212205eb569dd49eb27617bd1f83a487492a857c4837031ff689be1783a4862f4a38d64736f6c63430008170033",
}

// ScattertokenABI is the input ABI used to generate the binding from.
// Deprecated: Use ScattertokenMetaData.ABI instead.
var ScattertokenABI = ScattertokenMetaData.ABI

// ScattertokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScattertokenMetaData.Bin instead.
var ScattertokenBin = ScattertokenMetaData.Bin

// DeployScattertoken deploys a new Ethereum contract, binding an instance of Scattertoken to it.
func DeployScattertoken(auth *bind.TransactOpts, backend bind.ContractBackend, cap *big.Int) (common.Address, *types.Transaction, *Scattertoken, error) {
	parsed, err := ScattertokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScattertokenBin), backend, cap)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Scattertoken{ScattertokenCaller: ScattertokenCaller{contract: contract}, ScattertokenTransactor: ScattertokenTransactor{contract: contract}, ScattertokenFilterer: ScattertokenFilterer{contract: contract}}, nil
}

// Scattertoken is an auto generated Go binding around an Ethereum contract.
type Scattertoken struct {
	ScattertokenCaller     // Read-only binding to the contract
	ScattertokenTransactor // Write-only binding to the contract
	ScattertokenFilterer   // Log filterer for contract events
}

// ScattertokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScattertokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScattertokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScattertokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScattertokenSession struct {
	Contract     *Scattertoken     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScattertokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScattertokenCallerSession struct {
	Contract *ScattertokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ScattertokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScattertokenTransactorSession struct {
	Contract     *ScattertokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ScattertokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScattertokenRaw struct {
	Contract *Scattertoken // Generic contract binding to access the raw methods on
}

// ScattertokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScattertokenCallerRaw struct {
	Contract *ScattertokenCaller // Generic read-only contract binding to access the raw methods on
}

// ScattertokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScattertokenTransactorRaw struct {
	Contract *ScattertokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScattertoken creates a new instance of Scattertoken, bound to a specific deployed contract.
func NewScattertoken(address common.Address, backend bind.ContractBackend) (*Scattertoken, error) {
	contract, err := bindScattertoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Scattertoken{ScattertokenCaller: ScattertokenCaller{contract: contract}, ScattertokenTransactor: ScattertokenTransactor{contract: contract}, ScattertokenFilterer: ScattertokenFilterer{contract: contract}}, nil
}

// NewScattertokenCaller creates a new read-only instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenCaller(address common.Address, caller bind.ContractCaller) (*ScattertokenCaller, error) {
	contract, err := bindScattertoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScattertokenCaller{contract: contract}, nil
}

// NewScattertokenTransactor creates a new write-only instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenTransactor(address common.Address, transactor bind.ContractTransactor) (*ScattertokenTransactor, error) {
	contract, err := bindScattertoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScattertokenTransactor{contract: contract}, nil
}

// NewScattertokenFilterer creates a new log filterer instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenFilterer(address common.Address, filterer bind.ContractFilterer) (*ScattertokenFilterer, error) {
	contract, err := bindScattertoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScattertokenFilterer{contract: contract}, nil
}

// bindScattertoken binds a generic wrapper to an already deployed contract.
func bindScattertoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ScattertokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scattertoken *ScattertokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scattertoken.Contract.ScattertokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scattertoken *ScattertokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scattertoken.Contract.ScattertokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scattertoken *ScattertokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scattertoken.Contract.ScattertokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scattertoken *ScattertokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scattertoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scattertoken *ScattertokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scattertoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scattertoken *ScattertokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scattertoken.Contract.contract.Transact(opts, method, params...)
}

// AddressToStake is a free data retrieval call binding the contract method 0xa1a33f44.
//
// Solidity: function addressToStake(address ) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) AddressToStake(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "addressToStake", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToStake is a free data retrieval call binding the contract method 0xa1a33f44.
//
// Solidity: function addressToStake(address ) view returns(uint256)
func (_Scattertoken *ScattertokenSession) AddressToStake(arg0 common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.AddressToStake(&_Scattertoken.CallOpts, arg0)
}

// AddressToStake is a free data retrieval call binding the contract method 0xa1a33f44.
//
// Solidity: function addressToStake(address ) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) AddressToStake(arg0 common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.AddressToStake(&_Scattertoken.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.Allowance(&_Scattertoken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.Allowance(&_Scattertoken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.BalanceOf(&_Scattertoken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.BalanceOf(&_Scattertoken.CallOpts, account)
}

// CanBecomeValidator is a free data retrieval call binding the contract method 0x9dacf42d.
//
// Solidity: function canBecomeValidator(address account) view returns(bool)
func (_Scattertoken *ScattertokenCaller) CanBecomeValidator(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "canBecomeValidator", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanBecomeValidator is a free data retrieval call binding the contract method 0x9dacf42d.
//
// Solidity: function canBecomeValidator(address account) view returns(bool)
func (_Scattertoken *ScattertokenSession) CanBecomeValidator(account common.Address) (bool, error) {
	return _Scattertoken.Contract.CanBecomeValidator(&_Scattertoken.CallOpts, account)
}

// CanBecomeValidator is a free data retrieval call binding the contract method 0x9dacf42d.
//
// Solidity: function canBecomeValidator(address account) view returns(bool)
func (_Scattertoken *ScattertokenCallerSession) CanBecomeValidator(account common.Address) (bool, error) {
	return _Scattertoken.Contract.CanBecomeValidator(&_Scattertoken.CallOpts, account)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) Cap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "cap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenSession) Cap() (*big.Int, error) {
	return _Scattertoken.Contract.Cap(&_Scattertoken.CallOpts)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) Cap() (*big.Int, error) {
	return _Scattertoken.Contract.Cap(&_Scattertoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenSession) Decimals() (uint8, error) {
	return _Scattertoken.Contract.Decimals(&_Scattertoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenCallerSession) Decimals() (uint8, error) {
	return _Scattertoken.Contract.Decimals(&_Scattertoken.CallOpts)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) GetAccountStake(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "getAccountStake", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.GetAccountStake(&_Scattertoken.CallOpts, account)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.GetAccountStake(&_Scattertoken.CallOpts, account)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) GetOwnStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "getOwnStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenSession) GetOwnStake() (*big.Int, error) {
	return _Scattertoken.Contract.GetOwnStake(&_Scattertoken.CallOpts)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) GetOwnStake() (*big.Int, error) {
	return _Scattertoken.Contract.GetOwnStake(&_Scattertoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenSession) Name() (string, error) {
	return _Scattertoken.Contract.Name(&_Scattertoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenCallerSession) Name() (string, error) {
	return _Scattertoken.Contract.Name(&_Scattertoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenSession) Owner() (common.Address, error) {
	return _Scattertoken.Contract.Owner(&_Scattertoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenCallerSession) Owner() (common.Address, error) {
	return _Scattertoken.Contract.Owner(&_Scattertoken.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) RequiredModelValidatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "requiredModelValidatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scattertoken.Contract.RequiredModelValidatorStake(&_Scattertoken.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scattertoken.Contract.RequiredModelValidatorStake(&_Scattertoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenSession) Symbol() (string, error) {
	return _Scattertoken.Contract.Symbol(&_Scattertoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenCallerSession) Symbol() (string, error) {
	return _Scattertoken.Contract.Symbol(&_Scattertoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenSession) TotalSupply() (*big.Int, error) {
	return _Scattertoken.Contract.TotalSupply(&_Scattertoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Scattertoken.Contract.TotalSupply(&_Scattertoken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Approve(&_Scattertoken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Approve(&_Scattertoken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Burn(&_Scattertoken.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Burn(&_Scattertoken.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.BurnFrom(&_Scattertoken.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.BurnFrom(&_Scattertoken.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.DecreaseAllowance(&_Scattertoken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.DecreaseAllowance(&_Scattertoken.TransactOpts, spender, subtractedValue)
}

// DonateToLottery is a paid mutator transaction binding the contract method 0x824205d1.
//
// Solidity: function donateToLottery(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) DonateToLottery(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "donateToLottery", requestorAddress, topicName)
}

// DonateToLottery is a paid mutator transaction binding the contract method 0x824205d1.
//
// Solidity: function donateToLottery(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) DonateToLottery(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.DonateToLottery(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// DonateToLottery is a paid mutator transaction binding the contract method 0x824205d1.
//
// Solidity: function donateToLottery(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) DonateToLottery(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.DonateToLottery(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.IncreaseAllowance(&_Scattertoken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.IncreaseAllowance(&_Scattertoken.TransactOpts, spender, addedValue)
}

// PunishRogueTrainers is a paid mutator transaction binding the contract method 0xf9d79c68.
//
// Solidity: function punishRogueTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) PunishRogueTrainers(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "punishRogueTrainers", requestorAddress, topicName)
}

// PunishRogueTrainers is a paid mutator transaction binding the contract method 0xf9d79c68.
//
// Solidity: function punishRogueTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) PunishRogueTrainers(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// PunishRogueTrainers is a paid mutator transaction binding the contract method 0xf9d79c68.
//
// Solidity: function punishRogueTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) PunishRogueTrainers(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// PunishRogueValidators is a paid mutator transaction binding the contract method 0xda0e3f13.
//
// Solidity: function punishRogueValidators(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) PunishRogueValidators(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "punishRogueValidators", requestorAddress, topicName)
}

// PunishRogueValidators is a paid mutator transaction binding the contract method 0xda0e3f13.
//
// Solidity: function punishRogueValidators(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) PunishRogueValidators(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueValidators(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// PunishRogueValidators is a paid mutator transaction binding the contract method 0xda0e3f13.
//
// Solidity: function punishRogueValidators(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) PunishRogueValidators(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueValidators(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) RemoveStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "removeStake", amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RemoveStake(&_Scattertoken.TransactOpts, amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RemoveStake(&_Scattertoken.TransactOpts, amount)
}

// RequestorLockToken is a paid mutator transaction binding the contract method 0x42a0f9bf.
//
// Solidity: function requestorLockToken(address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) RequestorLockToken(opts *bind.TransactOpts, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "requestorLockToken", requestorAddress, topicName, amount)
}

// RequestorLockToken is a paid mutator transaction binding the contract method 0x42a0f9bf.
//
// Solidity: function requestorLockToken(address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) RequestorLockToken(requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RequestorLockToken(&_Scattertoken.TransactOpts, requestorAddress, topicName, amount)
}

// RequestorLockToken is a paid mutator transaction binding the contract method 0x42a0f9bf.
//
// Solidity: function requestorLockToken(address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) RequestorLockToken(requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RequestorLockToken(&_Scattertoken.TransactOpts, requestorAddress, topicName, amount)
}

// ReturnTokensToTrainers is a paid mutator transaction binding the contract method 0x8a1fea68.
//
// Solidity: function returnTokensToTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) ReturnTokensToTrainers(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "returnTokensToTrainers", requestorAddress, topicName)
}

// ReturnTokensToTrainers is a paid mutator transaction binding the contract method 0x8a1fea68.
//
// Solidity: function returnTokensToTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) ReturnTokensToTrainers(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.ReturnTokensToTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// ReturnTokensToTrainers is a paid mutator transaction binding the contract method 0x8a1fea68.
//
// Solidity: function returnTokensToTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) ReturnTokensToTrainers(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.ReturnTokensToTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// RewardBenevolentTrainers is a paid mutator transaction binding the contract method 0x968c2000.
//
// Solidity: function rewardBenevolentTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) RewardBenevolentTrainers(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "rewardBenevolentTrainers", requestorAddress, topicName)
}

// RewardBenevolentTrainers is a paid mutator transaction binding the contract method 0x968c2000.
//
// Solidity: function rewardBenevolentTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) RewardBenevolentTrainers(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// RewardBenevolentTrainers is a paid mutator transaction binding the contract method 0x968c2000.
//
// Solidity: function rewardBenevolentTrainers(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) RewardBenevolentTrainers(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// RewardBenevolentValidators is a paid mutator transaction binding the contract method 0x2ca23869.
//
// Solidity: function rewardBenevolentValidators(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) RewardBenevolentValidators(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "rewardBenevolentValidators", requestorAddress, topicName)
}

// RewardBenevolentValidators is a paid mutator transaction binding the contract method 0x2ca23869.
//
// Solidity: function rewardBenevolentValidators(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) RewardBenevolentValidators(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentValidators(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// RewardBenevolentValidators is a paid mutator transaction binding the contract method 0x2ca23869.
//
// Solidity: function rewardBenevolentValidators(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) RewardBenevolentValidators(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentValidators(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// SetEvaluationJobTokenContract is a paid mutator transaction binding the contract method 0x71f65bd7.
//
// Solidity: function setEvaluationJobTokenContract(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactor) SetEvaluationJobTokenContract(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "setEvaluationJobTokenContract", newAddress)
}

// SetEvaluationJobTokenContract is a paid mutator transaction binding the contract method 0x71f65bd7.
//
// Solidity: function setEvaluationJobTokenContract(address newAddress) returns()
func (_Scattertoken *ScattertokenSession) SetEvaluationJobTokenContract(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetEvaluationJobTokenContract(&_Scattertoken.TransactOpts, newAddress)
}

// SetEvaluationJobTokenContract is a paid mutator transaction binding the contract method 0x71f65bd7.
//
// Solidity: function setEvaluationJobTokenContract(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactorSession) SetEvaluationJobTokenContract(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetEvaluationJobTokenContract(&_Scattertoken.TransactOpts, newAddress)
}

// SetReputationManagerContract is a paid mutator transaction binding the contract method 0x0b15127b.
//
// Solidity: function setReputationManagerContract(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactor) SetReputationManagerContract(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "setReputationManagerContract", newAddress)
}

// SetReputationManagerContract is a paid mutator transaction binding the contract method 0x0b15127b.
//
// Solidity: function setReputationManagerContract(address newAddress) returns()
func (_Scattertoken *ScattertokenSession) SetReputationManagerContract(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetReputationManagerContract(&_Scattertoken.TransactOpts, newAddress)
}

// SetReputationManagerContract is a paid mutator transaction binding the contract method 0x0b15127b.
//
// Solidity: function setReputationManagerContract(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactorSession) SetReputationManagerContract(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetReputationManagerContract(&_Scattertoken.TransactOpts, newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactor) SetScatterProtocolAddress(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "setScatterProtocolAddress", newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenSession) SetScatterProtocolAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetScatterProtocolAddress(&_Scattertoken.TransactOpts, newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactorSession) SetScatterProtocolAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetScatterProtocolAddress(&_Scattertoken.TransactOpts, newAddress)
}

// StakeToken is a paid mutator transaction binding the contract method 0xcda6b847.
//
// Solidity: function stakeToken(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) StakeToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "stakeToken", amount)
}

// StakeToken is a paid mutator transaction binding the contract method 0xcda6b847.
//
// Solidity: function stakeToken(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) StakeToken(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.StakeToken(&_Scattertoken.TransactOpts, amount)
}

// StakeToken is a paid mutator transaction binding the contract method 0xcda6b847.
//
// Solidity: function stakeToken(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) StakeToken(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.StakeToken(&_Scattertoken.TransactOpts, amount)
}

// TrainerLockToken is a paid mutator transaction binding the contract method 0xccd712d5.
//
// Solidity: function trainerLockToken(address trainerAddress, address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) TrainerLockToken(opts *bind.TransactOpts, trainerAddress common.Address, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "trainerLockToken", trainerAddress, requestorAddress, topicName, amount)
}

// TrainerLockToken is a paid mutator transaction binding the contract method 0xccd712d5.
//
// Solidity: function trainerLockToken(address trainerAddress, address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) TrainerLockToken(trainerAddress common.Address, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TrainerLockToken(&_Scattertoken.TransactOpts, trainerAddress, requestorAddress, topicName, amount)
}

// TrainerLockToken is a paid mutator transaction binding the contract method 0xccd712d5.
//
// Solidity: function trainerLockToken(address trainerAddress, address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) TrainerLockToken(trainerAddress common.Address, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TrainerLockToken(&_Scattertoken.TransactOpts, trainerAddress, requestorAddress, topicName, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Transfer(&_Scattertoken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Transfer(&_Scattertoken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TransferFrom(&_Scattertoken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TransferFrom(&_Scattertoken.TransactOpts, from, to, amount)
}

// ScattertokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Scattertoken contract.
type ScattertokenApprovalIterator struct {
	Event *ScattertokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenApproval represents a Approval event raised by the Scattertoken contract.
type ScattertokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ScattertokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ScattertokenApprovalIterator{contract: _Scattertoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScattertokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenApproval)
				if err := _Scattertoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) ParseApproval(log types.Log) (*ScattertokenApproval, error) {
	event := new(ScattertokenApproval)
	if err := _Scattertoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTokensStakedIterator is returned from FilterTokensStaked and is used to iterate over the raw logs and unpacked data for TokensStaked events raised by the Scattertoken contract.
type ScattertokenTokensStakedIterator struct {
	Event *ScattertokenTokensStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTokensStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTokensStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTokensStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTokensStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTokensStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTokensStaked represents a TokensStaked event raised by the Scattertoken contract.
type ScattertokenTokensStaked struct {
	From   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTokensStaked is a free log retrieval operation binding the contract event 0xb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef.
//
// Solidity: event TokensStaked(address from, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) FilterTokensStaked(opts *bind.FilterOpts) (*ScattertokenTokensStakedIterator, error) {

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "TokensStaked")
	if err != nil {
		return nil, err
	}
	return &ScattertokenTokensStakedIterator{contract: _Scattertoken.contract, event: "TokensStaked", logs: logs, sub: sub}, nil
}

// WatchTokensStaked is a free log subscription operation binding the contract event 0xb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef.
//
// Solidity: event TokensStaked(address from, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) WatchTokensStaked(opts *bind.WatchOpts, sink chan<- *ScattertokenTokensStaked) (event.Subscription, error) {

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "TokensStaked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTokensStaked)
				if err := _Scattertoken.contract.UnpackLog(event, "TokensStaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensStaked is a log parse operation binding the contract event 0xb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef.
//
// Solidity: event TokensStaked(address from, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) ParseTokensStaked(log types.Log) (*ScattertokenTokensStaked, error) {
	event := new(ScattertokenTokensStaked)
	if err := _Scattertoken.contract.UnpackLog(event, "TokensStaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTokensUnstakedIterator is returned from FilterTokensUnstaked and is used to iterate over the raw logs and unpacked data for TokensUnstaked events raised by the Scattertoken contract.
type ScattertokenTokensUnstakedIterator struct {
	Event *ScattertokenTokensUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTokensUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTokensUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTokensUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTokensUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTokensUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTokensUnstaked represents a TokensUnstaked event raised by the Scattertoken contract.
type ScattertokenTokensUnstaked struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTokensUnstaked is a free log retrieval operation binding the contract event 0x9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679.
//
// Solidity: event TokensUnstaked(address to, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) FilterTokensUnstaked(opts *bind.FilterOpts) (*ScattertokenTokensUnstakedIterator, error) {

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "TokensUnstaked")
	if err != nil {
		return nil, err
	}
	return &ScattertokenTokensUnstakedIterator{contract: _Scattertoken.contract, event: "TokensUnstaked", logs: logs, sub: sub}, nil
}

// WatchTokensUnstaked is a free log subscription operation binding the contract event 0x9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679.
//
// Solidity: event TokensUnstaked(address to, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) WatchTokensUnstaked(opts *bind.WatchOpts, sink chan<- *ScattertokenTokensUnstaked) (event.Subscription, error) {

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "TokensUnstaked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTokensUnstaked)
				if err := _Scattertoken.contract.UnpackLog(event, "TokensUnstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensUnstaked is a log parse operation binding the contract event 0x9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679.
//
// Solidity: event TokensUnstaked(address to, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) ParseTokensUnstaked(log types.Log) (*ScattertokenTokensUnstaked, error) {
	event := new(ScattertokenTokensUnstaked)
	if err := _Scattertoken.contract.UnpackLog(event, "TokensUnstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Scattertoken contract.
type ScattertokenTransferIterator struct {
	Event *ScattertokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTransfer represents a Transfer event raised by the Scattertoken contract.
type ScattertokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ScattertokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ScattertokenTransferIterator{contract: _Scattertoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScattertokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTransfer)
				if err := _Scattertoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) ParseTransfer(log types.Log) (*ScattertokenTransfer, error) {
	event := new(ScattertokenTransfer)
	if err := _Scattertoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
