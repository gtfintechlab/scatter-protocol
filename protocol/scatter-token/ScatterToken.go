// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package scattertoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ScattertokenMetaData contains all meta data concerning the Scattertoken contract.
var ScattertokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canBecomeValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"}],\"name\":\"donateToLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"trainers\",\"type\":\"address[]\"}],\"name\":\"punishRogueTrainers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"punishRogueValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestorLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredModelValidatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"trainers\",\"type\":\"address[]\"}],\"name\":\"rewardBenevolentTrainers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"rewardBenevolentValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scatterProtocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setScatterProtocolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trainerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trainerLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040526000600b556002600c556064600d556032600e556032600f553480156200002a57600080fd5b50604051620046e1380380620046e183398181016040528101906200005091906200051c565b620000606200022660201b60201c565b600a6200006e9190620006de565b816200007b91906200072f565b6040518060400160405280600c81526020017f53636174746572546f6b656e00000000000000000000000000000000000000008152506040518060400160405280600281526020017f53540000000000000000000000000000000000000000000000000000000000008152508160039081620000f89190620009ea565b5080600490816200010a9190620009ea565b5050506000811162000153576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014a9062000b32565b60405180910390fd5b80608081815250505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620001d46200022660201b60201c565b600a620001e29190620006de565b83620001ef91906200072f565b6200022f60201b60201c565b6127106005819055506000601060146101000a81548160ff0219169083151502179055505062000ca1565b60006012905090565b6200023f620002c060201b60201c565b8162000255620002ca60201b620006dd1760201c565b62000261919062000b54565b1115620002a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029c9062000bdf565b60405180910390fd5b620002bc8282620002d460201b62001c0b1760201c565b5050565b6000608051905090565b6000600254905090565b620002e4620002c060201b60201c565b81620002fa620002ca60201b620006dd1760201c565b62000306919062000b54565b11156200034a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003419062000bdf565b60405180910390fd5b6200036182826200036560201b62001c751760201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003d7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ce9062000c51565b60405180910390fd5b620003eb60008383620004d260201b60201c565b8060026000828254620003ff919062000b54565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620004b2919062000c84565b60405180910390a3620004ce60008383620004d760201b60201c565b5050565b505050565b505050565b600080fd5b6000819050919050565b620004f681620004e1565b81146200050257600080fd5b50565b6000815190506200051681620004eb565b92915050565b600060208284031215620005355762000534620004dc565b5b6000620005458482850162000505565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620005dc57808604811115620005b457620005b36200054e565b5b6001851615620005c45780820291505b8081029050620005d4856200057d565b945062000594565b94509492505050565b600082620005f75760019050620006ca565b81620006075760009050620006ca565b81600181146200062057600281146200062b5762000661565b6001915050620006ca565b60ff84111562000640576200063f6200054e565b5b8360020a9150848211156200065a57620006596200054e565b5b50620006ca565b5060208310610133831016604e8410600b84101617156200069b5782820a9050838111156200069557620006946200054e565b5b620006ca565b620006aa84848460016200058a565b92509050818404811115620006c457620006c36200054e565b5b81810290505b9392505050565b600060ff82169050919050565b6000620006eb82620004e1565b9150620006f883620006d1565b9250620007277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005e5565b905092915050565b60006200073c82620004e1565b91506200074983620004e1565b92508282026200075981620004e1565b915082820484148315176200077357620007726200054e565b5b5092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007fc57607f821691505b602082108103620008125762000811620007b4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200087c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200083d565b6200088886836200083d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620008cb620008c5620008bf84620004e1565b620008a0565b620004e1565b9050919050565b6000819050919050565b620008e783620008aa565b620008ff620008f682620008d2565b8484546200084a565b825550505050565b600090565b6200091662000907565b62000923818484620008dc565b505050565b5b818110156200094b576200093f6000826200090c565b60018101905062000929565b5050565b601f8211156200099a57620009648162000818565b6200096f846200082d565b810160208510156200097f578190505b620009976200098e856200082d565b83018262000928565b50505b505050565b600082821c905092915050565b6000620009bf600019846008026200099f565b1980831691505092915050565b6000620009da8383620009ac565b9150826002028217905092915050565b620009f5826200077a565b67ffffffffffffffff81111562000a115762000a1062000785565b5b62000a1d8254620007e3565b62000a2a8282856200094f565b600060209050601f83116001811462000a62576000841562000a4d578287015190505b62000a598582620009cc565b86555062000ac9565b601f19841662000a728662000818565b60005b8281101562000a9c5784890151825560018201915060208501945060208101905062000a75565b8683101562000abc578489015162000ab8601f891682620009ac565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332304361707065643a2063617020697320300000000000000000000000600082015250565b600062000b1a60158362000ad1565b915062000b278262000ae2565b602082019050919050565b6000602082019050818103600083015262000b4d8162000b0b565b9050919050565b600062000b6182620004e1565b915062000b6e83620004e1565b925082820190508082111562000b895762000b886200054e565b5b92915050565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b600062000bc760198362000ad1565b915062000bd48262000b8f565b602082019050919050565b6000602082019050818103600083015262000bfa8162000bb8565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000c39601f8362000ad1565b915062000c468262000c01565b602082019050919050565b6000602082019050818103600083015262000c6c8162000c2a565b9050919050565b62000c7e81620004e1565b82525050565b600060208201905062000c9b600083018462000c73565b92915050565b608051613a2462000cbd60003960006107230152613a246000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806370a082311161010f578063a1a33f44116100a2578063ccd712d511610071578063ccd712d5146105a2578063cda6b847146105be578063dd62ed3e146105da578063fb7ba5821461060a576101e5565b8063a1a33f44146104f6578063a457c2d714610526578063a9059cbb14610556578063bea55db914610586576101e5565b8063939624ab116100de578063939624ab1461046e57806395d89b411461048a578063985fb65d146104a85780639dacf42d146104c6576101e5565b806370a08231146103e857806379cc679014610418578063824205d1146104345780638da5cb5b14610450576101e5565b8063395093511161018757806343f893511161015657806343f8935114610364578063454cbd3e1461038057806347dc19c71461039c5780635e30913f146103b8576101e5565b806339509351146102e0578063408111f51461031057806342966c681461032c57806342a0f9bf14610348576101e5565b806323b872dd116101c357806323b872dd14610256578063313ce56714610286578063355274ea146102a457806336cb7f80146102c2576101e5565b806306fdde03146101ea578063095ea7b31461020857806318160ddd14610238575b600080fd5b6101f2610628565b6040516101ff919061256f565b60405180910390f35b610222600480360381019061021d9190612639565b6106ba565b60405161022f9190612694565b60405180910390f35b6102406106dd565b60405161024d91906126be565b60405180910390f35b610270600480360381019061026b91906126d9565b6106e7565b60405161027d9190612694565b60405180910390f35b61028e610716565b60405161029b9190612748565b60405180910390f35b6102ac61071f565b6040516102b991906126be565b60405180910390f35b6102ca610747565b6040516102d791906126be565b60405180910390f35b6102fa60048036038101906102f59190612639565b61074d565b6040516103079190612694565b60405180910390f35b61032a60048036038101906103259190612960565b610784565b005b610346600480360381019061034191906129eb565b6109bc565b005b610362600480360381019061035d9190612a18565b6109d0565b005b61037e60048036038101906103799190612a87565b610b8b565b005b61039a60048036038101906103959190612960565b610d3f565b005b6103b660048036038101906103b19190612960565b610dd4565b005b6103d260048036038101906103cd9190612ad0565b610e69565b6040516103df91906126be565b60405180910390f35b61040260048036038101906103fd9190612ad0565b610eb2565b60405161040f91906126be565b60405180910390f35b610432600480360381019061042d9190612639565b610efa565b005b61044e60048036038101906104499190612afd565b610f1a565b005b6104586110b9565b6040516104659190612b7a565b60405180910390f35b610488600480360381019061048391906129eb565b6110df565b005b610492611476565b60405161049f919061256f565b60405180910390f35b6104b0611508565b6040516104bd9190612ba4565b60405180910390f35b6104e060048036038101906104db9190612ad0565b61152e565b6040516104ed9190612694565b60405180910390f35b610510600480360381019061050b9190612ad0565b61157c565b60405161051d91906126be565b60405180910390f35b610540600480360381019061053b9190612639565b611594565b60405161054d9190612694565b60405180910390f35b610570600480360381019061056b9190612639565b61160b565b60405161057d9190612694565b60405180910390f35b6105a0600480360381019061059b9190612ad0565b61162e565b005b6105bc60048036038101906105b79190612bbf565b611702565b005b6105d860048036038101906105d391906129eb565b61190d565b005b6105f460048036038101906105ef9190612c42565b611b3d565b60405161060191906126be565b60405180910390f35b610612611bc4565b60405161061f91906126be565b60405180910390f35b60606003805461063790612cb1565b80601f016020809104026020016040519081016040528092919081815260200182805461066390612cb1565b80156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b5050505050905090565b6000806106c5611dcb565b90506106d2818585611dd3565b600191505092915050565b6000600254905090565b6000806106f2611dcb565b90506106ff858285611f9c565b61070a858585612028565b60019150509392505050565b60006012905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60055481565b600080610758611dcb565b905061077981858561076a8589611b3d565b6107749190612d11565b611dd3565b600191505092915050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b90612db7565b60405180910390fd5b60005b81518110156109b657600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208360405161086d9190612e13565b908152602001604051809103902060008383815181106108905761088f612e2a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b60008282546108e49190612d11565b925050819055506000600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460405161093a9190612e13565b9081526020016040518091039020600084848151811061095d5761095c612e2a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806109ae90612e59565b915050610817565b50505050565b6109cd6109c7611dcb565b8261229e565b50565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5790612db7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610a999190612ba4565b602060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190612eb6565b811115610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390612f55565b60405180910390fd5b610b26838261229e565b80600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083604051610b749190612e13565b908152602001604051809103902081905550505050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290612db7565b60405180910390fd5b60005b8151811015610d3b5760006064600d5460076000868681518110610c4557610c44612e2a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c929190612f75565b610c9c9190612fe6565b905080600b6000828254610cb09190612d11565b925050819055508060076000858581518110610ccf57610cce612e2a565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d209190613017565b92505081905550508080610d3390612e59565b915050610c1e565b5050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc690612db7565b60405180910390fd5b505050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5b90612db7565b60405180910390fd5b505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f0c82610f06611dcb565b83611f9c565b610f16828261229e565b5050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610faa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa190612db7565b60405180910390fd5b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082604051610ff99190612e13565b908152602001604051809103902054905060006064600c548361101c9190612f75565b6110269190612fe6565b905080600b600082825461103a9190612d11565b9250508190555080600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460405161108f9190612e13565b908152602001604051809103902060008282546110ac9190613017565b9250508190555050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060149054906101000a900460ff161561112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112690613097565b60405180910390fd5b6001601060146101000a81548160ff02191690831515021790555042600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c390613129565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811061124d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611244906131bb565b60405180910390fd5b611257338261246b565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a69190613017565b925050819055506000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663153a7b36336040518263ffffffff1660e01b815260040161130a9190612ba4565b602060405180830381865afa158015611327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190613200565b9050600360048111156113615761136061322d565b5b8160048111156113745761137361322d565b5b1480156113c15750600554600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561145757601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663571c3e603360006040518363ffffffff1660e01b81526004016114249291906132a4565b600060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050505b506000601060146101000a81548160ff02191690831515021790555050565b60606004805461148590612cb1565b80601f01602080910402602001604051908101604052809291908181526020018280546114b190612cb1565b80156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b5050505050905090565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410159050919050565b60076020528060005260406000206000915090505481565b60008061159f611dcb565b905060006115ad8286611b3d565b9050838110156115f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e99061333f565b60405180910390fd5b6115ff8286868403611dd3565b60019250505092915050565b600080611616611dcb565b9050611623818585612028565b600191505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b5906133d1565b60405180910390fd5b80601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178990612db7565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016117cb9190612ba4565b602060405180830381865afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180c9190612eb6565b81111561184e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184590612f55565b60405180910390fd5b611858848261229e565b80600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836040516118a69190612e13565b908152602001604051809103902060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119009190612d11565b9250508190555050505050565b601060149054906101000a900460ff161561195d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195490613097565b60405180910390fd5b6001601060146101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016119b19190612ba4565b602060405180830381865afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190612eb6565b811115611a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2b90613463565b60405180910390fd5b611a3e338261229e565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a8d9190612d11565b9250508190555062278d0042611aa39190612d11565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef3382604051611b17929190613483565b60405180910390a16000601060146101000a81548160ff02191690831515021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b611c1361071f565b81611c1c6106dd565b611c269190612d11565b1115611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e906134f8565b60405180910390fd5b611c718282611c75565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdb90613564565b60405180910390fd5b611cf0600083836124d5565b8060026000828254611d029190612d11565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611db391906126be565b60405180910390a3611dc7600083836124da565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e39906135f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611eb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea890613688565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611f8f91906126be565b60405180910390a3505050565b6000611fa88484611b3d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146120225781811015612014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200b906136f4565b60405180910390fd5b6120218484848403611dd3565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208e90613786565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fd90613818565b60405180910390fd5b6121118383836124d5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218e906138aa565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161228591906126be565b60405180910390a36122988484846124da565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361230d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123049061393c565b60405180910390fd5b612319826000836124d5565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561239f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612396906139ce565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161245291906126be565b60405180910390a3612466836000846124da565b505050565b61247361071f565b8161247c6106dd565b6124869190612d11565b11156124c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124be906134f8565b60405180910390fd5b6124d18282611c0b565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125195780820151818401526020810190506124fe565b60008484015250505050565b6000601f19601f8301169050919050565b6000612541826124df565b61254b81856124ea565b935061255b8185602086016124fb565b61256481612525565b840191505092915050565b600060208201905081810360008301526125898184612536565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125d0826125a5565b9050919050565b6125e0816125c5565b81146125eb57600080fd5b50565b6000813590506125fd816125d7565b92915050565b6000819050919050565b61261681612603565b811461262157600080fd5b50565b6000813590506126338161260d565b92915050565b600080604083850312156126505761264f61259b565b5b600061265e858286016125ee565b925050602061266f85828601612624565b9150509250929050565b60008115159050919050565b61268e81612679565b82525050565b60006020820190506126a96000830184612685565b92915050565b6126b881612603565b82525050565b60006020820190506126d360008301846126af565b92915050565b6000806000606084860312156126f2576126f161259b565b5b6000612700868287016125ee565b9350506020612711868287016125ee565b925050604061272286828701612624565b9150509250925092565b600060ff82169050919050565b6127428161272c565b82525050565b600060208201905061275d6000830184612739565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127a582612525565b810181811067ffffffffffffffff821117156127c4576127c361276d565b5b80604052505050565b60006127d7612591565b90506127e3828261279c565b919050565b600067ffffffffffffffff8211156128035761280261276d565b5b61280c82612525565b9050602081019050919050565b82818337600083830152505050565b600061283b612836846127e8565b6127cd565b90508281526020810184848401111561285757612856612768565b5b612862848285612819565b509392505050565b600082601f83011261287f5761287e612763565b5b813561288f848260208601612828565b91505092915050565b600067ffffffffffffffff8211156128b3576128b261276d565b5b602082029050602081019050919050565b600080fd5b60006128dc6128d784612898565b6127cd565b905080838252602082019050602084028301858111156128ff576128fe6128c4565b5b835b81811015612928578061291488826125ee565b845260208401935050602081019050612901565b5050509392505050565b600082601f83011261294757612946612763565b5b81356129578482602086016128c9565b91505092915050565b6000806000606084860312156129795761297861259b565b5b6000612987868287016125ee565b935050602084013567ffffffffffffffff8111156129a8576129a76125a0565b5b6129b48682870161286a565b925050604084013567ffffffffffffffff8111156129d5576129d46125a0565b5b6129e186828701612932565b9150509250925092565b600060208284031215612a0157612a0061259b565b5b6000612a0f84828501612624565b91505092915050565b600080600060608486031215612a3157612a3061259b565b5b6000612a3f868287016125ee565b935050602084013567ffffffffffffffff811115612a6057612a5f6125a0565b5b612a6c8682870161286a565b9250506040612a7d86828701612624565b9150509250925092565b600060208284031215612a9d57612a9c61259b565b5b600082013567ffffffffffffffff811115612abb57612aba6125a0565b5b612ac784828501612932565b91505092915050565b600060208284031215612ae657612ae561259b565b5b6000612af4848285016125ee565b91505092915050565b60008060408385031215612b1457612b1361259b565b5b6000612b22858286016125ee565b925050602083013567ffffffffffffffff811115612b4357612b426125a0565b5b612b4f8582860161286a565b9150509250929050565b6000612b64826125a5565b9050919050565b612b7481612b59565b82525050565b6000602082019050612b8f6000830184612b6b565b92915050565b612b9e816125c5565b82525050565b6000602082019050612bb96000830184612b95565b92915050565b60008060008060808587031215612bd957612bd861259b565b5b6000612be7878288016125ee565b9450506020612bf8878288016125ee565b935050604085013567ffffffffffffffff811115612c1957612c186125a0565b5b612c258782880161286a565b9250506060612c3687828801612624565b91505092959194509250565b60008060408385031215612c5957612c5861259b565b5b6000612c67858286016125ee565b9250506020612c78858286016125ee565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612cc957607f821691505b602082108103612cdc57612cdb612c82565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d1c82612603565b9150612d2783612603565b9250828201905080821115612d3f57612d3e612ce2565b5b92915050565b7f54686973206d6574686f642063616e206f6e6c792062652063616c6c6564206260008201527f792074686520736361747465722070726f746f636f6c20636f6e747261637400602082015250565b6000612da1603f836124ea565b9150612dac82612d45565b604082019050919050565b60006020820190508181036000830152612dd081612d94565b9050919050565b600081905092915050565b6000612ded826124df565b612df78185612dd7565b9350612e078185602086016124fb565b80840191505092915050565b6000612e1f8284612de2565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612e6482612603565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e9657612e95612ce2565b5b600182019050919050565b600081519050612eb08161260d565b92915050565b600060208284031215612ecc57612ecb61259b565b5b6000612eda84828501612ea1565b91505092915050565b7f43616e6e6f74206c6f636b206d6f726520746f6b656e73207468616e20796f7560008201527f206f776e00000000000000000000000000000000000000000000000000000000602082015250565b6000612f3f6024836124ea565b9150612f4a82612ee3565b604082019050919050565b60006020820190508181036000830152612f6e81612f32565b9050919050565b6000612f8082612603565b9150612f8b83612603565b9250828202612f9981612603565b91508282048414831517612fb057612faf612ce2565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ff182612603565b9150612ffc83612603565b92508261300c5761300b612fb7565b5b828204905092915050565b600061302282612603565b915061302d83612603565b925082820390508181111561304557613044612ce2565b5b92915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000613081600e836124ea565b915061308c8261304b565b602082019050919050565b600060208201905081810360008301526130b081613074565b9050919050565b7f596f75206d7573742077616974206265666f7265206265696e672061626c652060008201527f746f20756e7374616b65205363617474657220546f6b656e0000000000000000602082015250565b60006131136038836124ea565b915061311e826130b7565b604082019050919050565b6000602082019050818103600083015261314281613106565b9050919050565b7f416d6f756e74206d757374206265206c657373207468616e207374616b65642060008201527f616d6f756e740000000000000000000000000000000000000000000000000000602082015250565b60006131a56026836124ea565b91506131b082613149565b604082019050919050565b600060208201905081810360008301526131d481613198565b9050919050565b600581106131e857600080fd5b50565b6000815190506131fa816131db565b92915050565b6000602082840312156132165761321561259b565b5b6000613224848285016131eb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061326d5761326c61322d565b5b50565b600081905061327e8261325c565b919050565b600061328e82613270565b9050919050565b61329e81613283565b82525050565b60006040820190506132b96000830185612b95565b6132c66020830184613295565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006133296025836124ea565b9150613334826132cd565b604082019050919050565b600060208201905081810360008301526133588161331c565b9050919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b60006133bb6025836124ea565b91506133c68261335f565b604082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b7f43616e6e6f74207374616b65206d6f726520746f6b656e73207468616e20796f60008201527f75206f776e000000000000000000000000000000000000000000000000000000602082015250565b600061344d6025836124ea565b9150613458826133f1565b604082019050919050565b6000602082019050818103600083015261347c81613440565b9050919050565b60006040820190506134986000830185612b95565b6134a560208301846126af565b9392505050565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b60006134e26019836124ea565b91506134ed826134ac565b602082019050919050565b60006020820190508181036000830152613511816134d5565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061354e601f836124ea565b915061355982613518565b602082019050919050565b6000602082019050818103600083015261357d81613541565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006135e06024836124ea565b91506135eb82613584565b604082019050919050565b6000602082019050818103600083015261360f816135d3565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006136726022836124ea565b915061367d82613616565b604082019050919050565b600060208201905081810360008301526136a181613665565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006136de601d836124ea565b91506136e9826136a8565b602082019050919050565b6000602082019050818103600083015261370d816136d1565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006137706025836124ea565b915061377b82613714565b604082019050919050565b6000602082019050818103600083015261379f81613763565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006138026023836124ea565b915061380d826137a6565b604082019050919050565b60006020820190508181036000830152613831816137f5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006138946026836124ea565b915061389f82613838565b604082019050919050565b600060208201905081810360008301526138c381613887565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006139266021836124ea565b9150613931826138ca565b604082019050919050565b6000602082019050818103600083015261395581613919565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006139b86022836124ea565b91506139c38261395c565b604082019050919050565b600060208201905081810360008301526139e7816139ab565b905091905056fea26469706673582212207dfc4bc45d0df0369e168a689386b9cf61f1517c77a5df8d55d30c5c4721a0d064736f6c63430008110033",
}

// ScattertokenABI is the input ABI used to generate the binding from.
// Deprecated: Use ScattertokenMetaData.ABI instead.
var ScattertokenABI = ScattertokenMetaData.ABI

// ScattertokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScattertokenMetaData.Bin instead.
var ScattertokenBin = ScattertokenMetaData.Bin

// DeployScattertoken deploys a new Ethereum contract, binding an instance of Scattertoken to it.
func DeployScattertoken(auth *bind.TransactOpts, backend bind.ContractBackend, cap *big.Int) (common.Address, *types.Transaction, *Scattertoken, error) {
	parsed, err := ScattertokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScattertokenBin), backend, cap)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Scattertoken{ScattertokenCaller: ScattertokenCaller{contract: contract}, ScattertokenTransactor: ScattertokenTransactor{contract: contract}, ScattertokenFilterer: ScattertokenFilterer{contract: contract}}, nil
}

// Scattertoken is an auto generated Go binding around an Ethereum contract.
type Scattertoken struct {
	ScattertokenCaller     // Read-only binding to the contract
	ScattertokenTransactor // Write-only binding to the contract
	ScattertokenFilterer   // Log filterer for contract events
}

// ScattertokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScattertokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScattertokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScattertokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScattertokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScattertokenSession struct {
	Contract     *Scattertoken     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScattertokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScattertokenCallerSession struct {
	Contract *ScattertokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ScattertokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScattertokenTransactorSession struct {
	Contract     *ScattertokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ScattertokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScattertokenRaw struct {
	Contract *Scattertoken // Generic contract binding to access the raw methods on
}

// ScattertokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScattertokenCallerRaw struct {
	Contract *ScattertokenCaller // Generic read-only contract binding to access the raw methods on
}

// ScattertokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScattertokenTransactorRaw struct {
	Contract *ScattertokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScattertoken creates a new instance of Scattertoken, bound to a specific deployed contract.
func NewScattertoken(address common.Address, backend bind.ContractBackend) (*Scattertoken, error) {
	contract, err := bindScattertoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Scattertoken{ScattertokenCaller: ScattertokenCaller{contract: contract}, ScattertokenTransactor: ScattertokenTransactor{contract: contract}, ScattertokenFilterer: ScattertokenFilterer{contract: contract}}, nil
}

// NewScattertokenCaller creates a new read-only instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenCaller(address common.Address, caller bind.ContractCaller) (*ScattertokenCaller, error) {
	contract, err := bindScattertoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScattertokenCaller{contract: contract}, nil
}

// NewScattertokenTransactor creates a new write-only instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenTransactor(address common.Address, transactor bind.ContractTransactor) (*ScattertokenTransactor, error) {
	contract, err := bindScattertoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScattertokenTransactor{contract: contract}, nil
}

// NewScattertokenFilterer creates a new log filterer instance of Scattertoken, bound to a specific deployed contract.
func NewScattertokenFilterer(address common.Address, filterer bind.ContractFilterer) (*ScattertokenFilterer, error) {
	contract, err := bindScattertoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScattertokenFilterer{contract: contract}, nil
}

// bindScattertoken binds a generic wrapper to an already deployed contract.
func bindScattertoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ScattertokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scattertoken *ScattertokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scattertoken.Contract.ScattertokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scattertoken *ScattertokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scattertoken.Contract.ScattertokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scattertoken *ScattertokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scattertoken.Contract.ScattertokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scattertoken *ScattertokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scattertoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scattertoken *ScattertokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scattertoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scattertoken *ScattertokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scattertoken.Contract.contract.Transact(opts, method, params...)
}

// AddressToStake is a free data retrieval call binding the contract method 0xa1a33f44.
//
// Solidity: function addressToStake(address ) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) AddressToStake(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "addressToStake", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressToStake is a free data retrieval call binding the contract method 0xa1a33f44.
//
// Solidity: function addressToStake(address ) view returns(uint256)
func (_Scattertoken *ScattertokenSession) AddressToStake(arg0 common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.AddressToStake(&_Scattertoken.CallOpts, arg0)
}

// AddressToStake is a free data retrieval call binding the contract method 0xa1a33f44.
//
// Solidity: function addressToStake(address ) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) AddressToStake(arg0 common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.AddressToStake(&_Scattertoken.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.Allowance(&_Scattertoken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.Allowance(&_Scattertoken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.BalanceOf(&_Scattertoken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.BalanceOf(&_Scattertoken.CallOpts, account)
}

// CanBecomeValidator is a free data retrieval call binding the contract method 0x9dacf42d.
//
// Solidity: function canBecomeValidator(address account) view returns(bool)
func (_Scattertoken *ScattertokenCaller) CanBecomeValidator(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "canBecomeValidator", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanBecomeValidator is a free data retrieval call binding the contract method 0x9dacf42d.
//
// Solidity: function canBecomeValidator(address account) view returns(bool)
func (_Scattertoken *ScattertokenSession) CanBecomeValidator(account common.Address) (bool, error) {
	return _Scattertoken.Contract.CanBecomeValidator(&_Scattertoken.CallOpts, account)
}

// CanBecomeValidator is a free data retrieval call binding the contract method 0x9dacf42d.
//
// Solidity: function canBecomeValidator(address account) view returns(bool)
func (_Scattertoken *ScattertokenCallerSession) CanBecomeValidator(account common.Address) (bool, error) {
	return _Scattertoken.Contract.CanBecomeValidator(&_Scattertoken.CallOpts, account)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) Cap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "cap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenSession) Cap() (*big.Int, error) {
	return _Scattertoken.Contract.Cap(&_Scattertoken.CallOpts)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) Cap() (*big.Int, error) {
	return _Scattertoken.Contract.Cap(&_Scattertoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenSession) Decimals() (uint8, error) {
	return _Scattertoken.Contract.Decimals(&_Scattertoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scattertoken *ScattertokenCallerSession) Decimals() (uint8, error) {
	return _Scattertoken.Contract.Decimals(&_Scattertoken.CallOpts)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCaller) GetAccountStake(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "getAccountStake", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.GetAccountStake(&_Scattertoken.CallOpts, account)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scattertoken.Contract.GetAccountStake(&_Scattertoken.CallOpts, account)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) GetOwnStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "getOwnStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenSession) GetOwnStake() (*big.Int, error) {
	return _Scattertoken.Contract.GetOwnStake(&_Scattertoken.CallOpts)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) GetOwnStake() (*big.Int, error) {
	return _Scattertoken.Contract.GetOwnStake(&_Scattertoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenSession) Name() (string, error) {
	return _Scattertoken.Contract.Name(&_Scattertoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scattertoken *ScattertokenCallerSession) Name() (string, error) {
	return _Scattertoken.Contract.Name(&_Scattertoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenSession) Owner() (common.Address, error) {
	return _Scattertoken.Contract.Owner(&_Scattertoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scattertoken *ScattertokenCallerSession) Owner() (common.Address, error) {
	return _Scattertoken.Contract.Owner(&_Scattertoken.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) RequiredModelValidatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "requiredModelValidatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scattertoken.Contract.RequiredModelValidatorStake(&_Scattertoken.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scattertoken.Contract.RequiredModelValidatorStake(&_Scattertoken.CallOpts)
}

// ScatterProtocolAddress is a free data retrieval call binding the contract method 0x985fb65d.
//
// Solidity: function scatterProtocolAddress() view returns(address)
func (_Scattertoken *ScattertokenCaller) ScatterProtocolAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "scatterProtocolAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScatterProtocolAddress is a free data retrieval call binding the contract method 0x985fb65d.
//
// Solidity: function scatterProtocolAddress() view returns(address)
func (_Scattertoken *ScattertokenSession) ScatterProtocolAddress() (common.Address, error) {
	return _Scattertoken.Contract.ScatterProtocolAddress(&_Scattertoken.CallOpts)
}

// ScatterProtocolAddress is a free data retrieval call binding the contract method 0x985fb65d.
//
// Solidity: function scatterProtocolAddress() view returns(address)
func (_Scattertoken *ScattertokenCallerSession) ScatterProtocolAddress() (common.Address, error) {
	return _Scattertoken.Contract.ScatterProtocolAddress(&_Scattertoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenSession) Symbol() (string, error) {
	return _Scattertoken.Contract.Symbol(&_Scattertoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scattertoken *ScattertokenCallerSession) Symbol() (string, error) {
	return _Scattertoken.Contract.Symbol(&_Scattertoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scattertoken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenSession) TotalSupply() (*big.Int, error) {
	return _Scattertoken.Contract.TotalSupply(&_Scattertoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scattertoken *ScattertokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Scattertoken.Contract.TotalSupply(&_Scattertoken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Approve(&_Scattertoken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Approve(&_Scattertoken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Burn(&_Scattertoken.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Burn(&_Scattertoken.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.BurnFrom(&_Scattertoken.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.BurnFrom(&_Scattertoken.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.DecreaseAllowance(&_Scattertoken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.DecreaseAllowance(&_Scattertoken.TransactOpts, spender, subtractedValue)
}

// DonateToLottery is a paid mutator transaction binding the contract method 0x824205d1.
//
// Solidity: function donateToLottery(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactor) DonateToLottery(opts *bind.TransactOpts, requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "donateToLottery", requestorAddress, topicName)
}

// DonateToLottery is a paid mutator transaction binding the contract method 0x824205d1.
//
// Solidity: function donateToLottery(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenSession) DonateToLottery(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.DonateToLottery(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// DonateToLottery is a paid mutator transaction binding the contract method 0x824205d1.
//
// Solidity: function donateToLottery(address requestorAddress, string topicName) returns()
func (_Scattertoken *ScattertokenTransactorSession) DonateToLottery(requestorAddress common.Address, topicName string) (*types.Transaction, error) {
	return _Scattertoken.Contract.DonateToLottery(&_Scattertoken.TransactOpts, requestorAddress, topicName)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.IncreaseAllowance(&_Scattertoken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.IncreaseAllowance(&_Scattertoken.TransactOpts, spender, addedValue)
}

// PunishRogueTrainers is a paid mutator transaction binding the contract method 0x408111f5.
//
// Solidity: function punishRogueTrainers(address requestorAddress, string topicName, address[] trainers) returns()
func (_Scattertoken *ScattertokenTransactor) PunishRogueTrainers(opts *bind.TransactOpts, requestorAddress common.Address, topicName string, trainers []common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "punishRogueTrainers", requestorAddress, topicName, trainers)
}

// PunishRogueTrainers is a paid mutator transaction binding the contract method 0x408111f5.
//
// Solidity: function punishRogueTrainers(address requestorAddress, string topicName, address[] trainers) returns()
func (_Scattertoken *ScattertokenSession) PunishRogueTrainers(requestorAddress common.Address, topicName string, trainers []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName, trainers)
}

// PunishRogueTrainers is a paid mutator transaction binding the contract method 0x408111f5.
//
// Solidity: function punishRogueTrainers(address requestorAddress, string topicName, address[] trainers) returns()
func (_Scattertoken *ScattertokenTransactorSession) PunishRogueTrainers(requestorAddress common.Address, topicName string, trainers []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName, trainers)
}

// PunishRogueValidators is a paid mutator transaction binding the contract method 0x43f89351.
//
// Solidity: function punishRogueValidators(address[] validators) returns()
func (_Scattertoken *ScattertokenTransactor) PunishRogueValidators(opts *bind.TransactOpts, validators []common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "punishRogueValidators", validators)
}

// PunishRogueValidators is a paid mutator transaction binding the contract method 0x43f89351.
//
// Solidity: function punishRogueValidators(address[] validators) returns()
func (_Scattertoken *ScattertokenSession) PunishRogueValidators(validators []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueValidators(&_Scattertoken.TransactOpts, validators)
}

// PunishRogueValidators is a paid mutator transaction binding the contract method 0x43f89351.
//
// Solidity: function punishRogueValidators(address[] validators) returns()
func (_Scattertoken *ScattertokenTransactorSession) PunishRogueValidators(validators []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.PunishRogueValidators(&_Scattertoken.TransactOpts, validators)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) RemoveStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "removeStake", amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RemoveStake(&_Scattertoken.TransactOpts, amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RemoveStake(&_Scattertoken.TransactOpts, amount)
}

// RequestorLockToken is a paid mutator transaction binding the contract method 0x42a0f9bf.
//
// Solidity: function requestorLockToken(address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) RequestorLockToken(opts *bind.TransactOpts, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "requestorLockToken", requestorAddress, topicName, amount)
}

// RequestorLockToken is a paid mutator transaction binding the contract method 0x42a0f9bf.
//
// Solidity: function requestorLockToken(address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) RequestorLockToken(requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RequestorLockToken(&_Scattertoken.TransactOpts, requestorAddress, topicName, amount)
}

// RequestorLockToken is a paid mutator transaction binding the contract method 0x42a0f9bf.
//
// Solidity: function requestorLockToken(address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) RequestorLockToken(requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.RequestorLockToken(&_Scattertoken.TransactOpts, requestorAddress, topicName, amount)
}

// RewardBenevolentTrainers is a paid mutator transaction binding the contract method 0x47dc19c7.
//
// Solidity: function rewardBenevolentTrainers(address requestorAddress, string topicName, address[] trainers) returns()
func (_Scattertoken *ScattertokenTransactor) RewardBenevolentTrainers(opts *bind.TransactOpts, requestorAddress common.Address, topicName string, trainers []common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "rewardBenevolentTrainers", requestorAddress, topicName, trainers)
}

// RewardBenevolentTrainers is a paid mutator transaction binding the contract method 0x47dc19c7.
//
// Solidity: function rewardBenevolentTrainers(address requestorAddress, string topicName, address[] trainers) returns()
func (_Scattertoken *ScattertokenSession) RewardBenevolentTrainers(requestorAddress common.Address, topicName string, trainers []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName, trainers)
}

// RewardBenevolentTrainers is a paid mutator transaction binding the contract method 0x47dc19c7.
//
// Solidity: function rewardBenevolentTrainers(address requestorAddress, string topicName, address[] trainers) returns()
func (_Scattertoken *ScattertokenTransactorSession) RewardBenevolentTrainers(requestorAddress common.Address, topicName string, trainers []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentTrainers(&_Scattertoken.TransactOpts, requestorAddress, topicName, trainers)
}

// RewardBenevolentValidators is a paid mutator transaction binding the contract method 0x454cbd3e.
//
// Solidity: function rewardBenevolentValidators(address requestorAddress, string topicName, address[] validators) returns()
func (_Scattertoken *ScattertokenTransactor) RewardBenevolentValidators(opts *bind.TransactOpts, requestorAddress common.Address, topicName string, validators []common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "rewardBenevolentValidators", requestorAddress, topicName, validators)
}

// RewardBenevolentValidators is a paid mutator transaction binding the contract method 0x454cbd3e.
//
// Solidity: function rewardBenevolentValidators(address requestorAddress, string topicName, address[] validators) returns()
func (_Scattertoken *ScattertokenSession) RewardBenevolentValidators(requestorAddress common.Address, topicName string, validators []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentValidators(&_Scattertoken.TransactOpts, requestorAddress, topicName, validators)
}

// RewardBenevolentValidators is a paid mutator transaction binding the contract method 0x454cbd3e.
//
// Solidity: function rewardBenevolentValidators(address requestorAddress, string topicName, address[] validators) returns()
func (_Scattertoken *ScattertokenTransactorSession) RewardBenevolentValidators(requestorAddress common.Address, topicName string, validators []common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.RewardBenevolentValidators(&_Scattertoken.TransactOpts, requestorAddress, topicName, validators)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactor) SetScatterProtocolAddress(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "setScatterProtocolAddress", newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenSession) SetScatterProtocolAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetScatterProtocolAddress(&_Scattertoken.TransactOpts, newAddress)
}

// SetScatterProtocolAddress is a paid mutator transaction binding the contract method 0xbea55db9.
//
// Solidity: function setScatterProtocolAddress(address newAddress) returns()
func (_Scattertoken *ScattertokenTransactorSession) SetScatterProtocolAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scattertoken.Contract.SetScatterProtocolAddress(&_Scattertoken.TransactOpts, newAddress)
}

// StakeToken is a paid mutator transaction binding the contract method 0xcda6b847.
//
// Solidity: function stakeToken(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) StakeToken(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "stakeToken", amount)
}

// StakeToken is a paid mutator transaction binding the contract method 0xcda6b847.
//
// Solidity: function stakeToken(uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) StakeToken(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.StakeToken(&_Scattertoken.TransactOpts, amount)
}

// StakeToken is a paid mutator transaction binding the contract method 0xcda6b847.
//
// Solidity: function stakeToken(uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) StakeToken(amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.StakeToken(&_Scattertoken.TransactOpts, amount)
}

// TrainerLockToken is a paid mutator transaction binding the contract method 0xccd712d5.
//
// Solidity: function trainerLockToken(address trainerAddress, address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactor) TrainerLockToken(opts *bind.TransactOpts, trainerAddress common.Address, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "trainerLockToken", trainerAddress, requestorAddress, topicName, amount)
}

// TrainerLockToken is a paid mutator transaction binding the contract method 0xccd712d5.
//
// Solidity: function trainerLockToken(address trainerAddress, address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenSession) TrainerLockToken(trainerAddress common.Address, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TrainerLockToken(&_Scattertoken.TransactOpts, trainerAddress, requestorAddress, topicName, amount)
}

// TrainerLockToken is a paid mutator transaction binding the contract method 0xccd712d5.
//
// Solidity: function trainerLockToken(address trainerAddress, address requestorAddress, string topicName, uint256 amount) returns()
func (_Scattertoken *ScattertokenTransactorSession) TrainerLockToken(trainerAddress common.Address, requestorAddress common.Address, topicName string, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TrainerLockToken(&_Scattertoken.TransactOpts, trainerAddress, requestorAddress, topicName, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Transfer(&_Scattertoken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.Transfer(&_Scattertoken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TransferFrom(&_Scattertoken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scattertoken *ScattertokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scattertoken.Contract.TransferFrom(&_Scattertoken.TransactOpts, from, to, amount)
}

// ScattertokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Scattertoken contract.
type ScattertokenApprovalIterator struct {
	Event *ScattertokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenApproval represents a Approval event raised by the Scattertoken contract.
type ScattertokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ScattertokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ScattertokenApprovalIterator{contract: _Scattertoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScattertokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenApproval)
				if err := _Scattertoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scattertoken *ScattertokenFilterer) ParseApproval(log types.Log) (*ScattertokenApproval, error) {
	event := new(ScattertokenApproval)
	if err := _Scattertoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTokensStakedIterator is returned from FilterTokensStaked and is used to iterate over the raw logs and unpacked data for TokensStaked events raised by the Scattertoken contract.
type ScattertokenTokensStakedIterator struct {
	Event *ScattertokenTokensStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTokensStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTokensStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTokensStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTokensStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTokensStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTokensStaked represents a TokensStaked event raised by the Scattertoken contract.
type ScattertokenTokensStaked struct {
	From   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTokensStaked is a free log retrieval operation binding the contract event 0xb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef.
//
// Solidity: event TokensStaked(address from, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) FilterTokensStaked(opts *bind.FilterOpts) (*ScattertokenTokensStakedIterator, error) {

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "TokensStaked")
	if err != nil {
		return nil, err
	}
	return &ScattertokenTokensStakedIterator{contract: _Scattertoken.contract, event: "TokensStaked", logs: logs, sub: sub}, nil
}

// WatchTokensStaked is a free log subscription operation binding the contract event 0xb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef.
//
// Solidity: event TokensStaked(address from, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) WatchTokensStaked(opts *bind.WatchOpts, sink chan<- *ScattertokenTokensStaked) (event.Subscription, error) {

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "TokensStaked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTokensStaked)
				if err := _Scattertoken.contract.UnpackLog(event, "TokensStaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensStaked is a log parse operation binding the contract event 0xb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef.
//
// Solidity: event TokensStaked(address from, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) ParseTokensStaked(log types.Log) (*ScattertokenTokensStaked, error) {
	event := new(ScattertokenTokensStaked)
	if err := _Scattertoken.contract.UnpackLog(event, "TokensStaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTokensUnstakedIterator is returned from FilterTokensUnstaked and is used to iterate over the raw logs and unpacked data for TokensUnstaked events raised by the Scattertoken contract.
type ScattertokenTokensUnstakedIterator struct {
	Event *ScattertokenTokensUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTokensUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTokensUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTokensUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTokensUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTokensUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTokensUnstaked represents a TokensUnstaked event raised by the Scattertoken contract.
type ScattertokenTokensUnstaked struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTokensUnstaked is a free log retrieval operation binding the contract event 0x9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679.
//
// Solidity: event TokensUnstaked(address to, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) FilterTokensUnstaked(opts *bind.FilterOpts) (*ScattertokenTokensUnstakedIterator, error) {

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "TokensUnstaked")
	if err != nil {
		return nil, err
	}
	return &ScattertokenTokensUnstakedIterator{contract: _Scattertoken.contract, event: "TokensUnstaked", logs: logs, sub: sub}, nil
}

// WatchTokensUnstaked is a free log subscription operation binding the contract event 0x9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679.
//
// Solidity: event TokensUnstaked(address to, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) WatchTokensUnstaked(opts *bind.WatchOpts, sink chan<- *ScattertokenTokensUnstaked) (event.Subscription, error) {

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "TokensUnstaked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTokensUnstaked)
				if err := _Scattertoken.contract.UnpackLog(event, "TokensUnstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensUnstaked is a log parse operation binding the contract event 0x9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679.
//
// Solidity: event TokensUnstaked(address to, uint256 amount)
func (_Scattertoken *ScattertokenFilterer) ParseTokensUnstaked(log types.Log) (*ScattertokenTokensUnstaked, error) {
	event := new(ScattertokenTokensUnstaked)
	if err := _Scattertoken.contract.UnpackLog(event, "TokensUnstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScattertokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Scattertoken contract.
type ScattertokenTransferIterator struct {
	Event *ScattertokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScattertokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScattertokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScattertokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScattertokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScattertokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScattertokenTransfer represents a Transfer event raised by the Scattertoken contract.
type ScattertokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ScattertokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scattertoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ScattertokenTransferIterator{contract: _Scattertoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScattertokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scattertoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScattertokenTransfer)
				if err := _Scattertoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scattertoken *ScattertokenFilterer) ParseTransfer(log types.Log) (*ScattertokenTransfer, error) {
	event := new(ScattertokenTransfer)
	if err := _Scattertoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
