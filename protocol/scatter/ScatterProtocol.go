// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package scatterprotocol

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ScatterprotocolMetaData contains all meta data concerning the Scatterprotocol contract.
var ScatterprotocolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trainingTokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"evaluationTokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jobCid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"requestorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTrainerCount\",\"type\":\"uint256\"}],\"name\":\"addTopicForRequestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"addressToTrainingJobInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"trainingJobCid\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elevateToCosmosValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elevateToModelValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCelestialNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPeerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredCosmosValidatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredModelValidatorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setEvaluationJobContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTrainingJobContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b506040516200469f3803806200469f833981810160405281019062000037919062000718565b62000047620002cf60201b60201c565b600a6200005591906200091a565b846200006291906200096b565b6040518060400160405280600c81526020017f53636174746572546f6b656e00000000000000000000000000000000000000008152506040518060400160405280600281526020017f53540000000000000000000000000000000000000000000000000000000000008152508160039081620000df919062000c26565b508060049081620000f1919062000c26565b505050600081116200013a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001319062000d6e565b60405180910390fd5b80608081815250505033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001fe600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620001bb620002cf60201b60201c565b600a620001c991906200091a565b6046606488620001da919062000dbf565b620001e691906200096b565b620001f291906200096b565b620002d860201b60201c565b6200020e620002cf60201b60201c565b600a6200021c91906200091a565b836200022991906200096b565b6008819055506207a120600981905550620186a0600a8190555081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000f44565b60006012905090565b620002e86200036960201b60201c565b81620002fe6200037360201b620007e21760201c565b6200030a919062000df7565b11156200034e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003459062000e82565b60405180910390fd5b6200036582826200037d60201b620017611760201c565b5050565b6000608051905090565b6000600254905090565b6200038d6200036960201b60201c565b81620003a36200037360201b620007e21760201c565b620003af919062000df7565b1115620003f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ea9062000e82565b60405180910390fd5b6200040a82826200040e60201b620017cb1760201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004779062000ef4565b60405180910390fd5b62000494600083836200057b60201b60201c565b8060026000828254620004a8919062000df7565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200055b919062000f27565b60405180910390a362000577600083836200065360201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015620005e557504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156200061f5750600073ffffffffffffffffffffffffffffffffffffffff164173ffffffffffffffffffffffffffffffffffffffff1614155b156200063657620006356200065860201b60201c565b5b6200064e8383836200066e60201b620019211760201c565b505050565b505050565b6200066c41600854620002d860201b60201c565b565b505050565b600080fd5b6000819050919050565b6200068d8162000678565b81146200069957600080fd5b50565b600081519050620006ad8162000682565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006e082620006b3565b9050919050565b620006f281620006d3565b8114620006fe57600080fd5b50565b6000815190506200071281620006e7565b92915050565b6000806000806080858703121562000735576200073462000673565b5b600062000745878288016200069c565b945050602062000758878288016200069c565b93505060406200076b8782880162000701565b92505060606200077e8782880162000701565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200081857808604811115620007f057620007ef6200078a565b5b6001851615620008005780820291505b80810290506200081085620007b9565b9450620007d0565b94509492505050565b60008262000833576001905062000906565b8162000843576000905062000906565b81600181146200085c576002811462000867576200089d565b600191505062000906565b60ff8411156200087c576200087b6200078a565b5b8360020a9150848211156200089657620008956200078a565b5b5062000906565b5060208310610133831016604e8410600b8410161715620008d75782820a905083811115620008d157620008d06200078a565b5b62000906565b620008e68484846001620007c6565b925090508184048111156200090057620008ff6200078a565b5b81810290505b9392505050565b600060ff82169050919050565b6000620009278262000678565b915062000934836200090d565b9250620009637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000821565b905092915050565b6000620009788262000678565b9150620009858362000678565b9250828202620009958162000678565b91508282048414831517620009af57620009ae6200078a565b5b5092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000a3857607f821691505b60208210810362000a4e5762000a4d620009f0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000ab87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000a79565b62000ac4868362000a79565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000b0762000b0162000afb8462000678565b62000adc565b62000678565b9050919050565b6000819050919050565b62000b238362000ae6565b62000b3b62000b328262000b0e565b84845462000a86565b825550505050565b600090565b62000b5262000b43565b62000b5f81848462000b18565b505050565b5b8181101562000b875762000b7b60008262000b48565b60018101905062000b65565b5050565b601f82111562000bd65762000ba08162000a54565b62000bab8462000a69565b8101602085101562000bbb578190505b62000bd362000bca8562000a69565b83018262000b64565b50505b505050565b600082821c905092915050565b600062000bfb6000198460080262000bdb565b1980831691505092915050565b600062000c16838362000be8565b9150826002028217905092915050565b62000c3182620009b6565b67ffffffffffffffff81111562000c4d5762000c4c620009c1565b5b62000c59825462000a1f565b62000c6682828562000b8b565b600060209050601f83116001811462000c9e576000841562000c89578287015190505b62000c95858262000c08565b86555062000d05565b601f19841662000cae8662000a54565b60005b8281101562000cd85784890151825560018201915060208501945060208101905062000cb1565b8683101562000cf8578489015162000cf4601f89168262000be8565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332304361707065643a2063617020697320300000000000000000000000600082015250565b600062000d5660158362000d0d565b915062000d638262000d1e565b602082019050919050565b6000602082019050818103600083015262000d898162000d47565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000dcc8262000678565b915062000dd98362000678565b92508262000dec5762000deb62000d90565b5b828204905092915050565b600062000e048262000678565b915062000e118362000678565b925082820190508082111562000e2c5762000e2b6200078a565b5b92915050565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b600062000e6a60198362000d0d565b915062000e778262000e32565b602082019050919050565b6000602082019050818103600083015262000e9d8162000e5b565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000edc601f8362000d0d565b915062000ee98262000ea4565b602082019050919050565b6000602082019050818103600083015262000f0f8162000ecd565b9050919050565b62000f218162000678565b82525050565b600060208201905062000f3e600083018462000f16565b92915050565b60805161373f62000f60600039600061094a015261373f6000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80635e30913f1161010f578063a457c2d7116100a2578063dd62ed3e11610071578063dd62ed3e1461055d578063eb4f16b51461058d578063f56521a8146105a9578063fb7ba582146105c5576101f0565b8063a457c2d7146104c3578063a9059cbb146104f3578063bdb6685514610523578063c0d241ed1461052d576101f0565b80638da5cb5b116100de5780638da5cb5b14610461578063939624ab1461047f57806395d89b411461049b578063a06e692b146104b9576101f0565b80635e30913f146103db57806370a082311461040b57806379cc67901461043b57806383197ef014610457576101f0565b80631fc56f041161018757806336cb7f801161015657806336cb7f8014610355578063395093511461037357806342966c68146103a35780635aff6e77146103bf576101f0565b80631fc56f04146102df57806323b872dd146102e9578063313ce56714610319578063355274ea14610337576101f0565b8063095ea7b3116101c3578063095ea7b3146102575780630ac168a11461028757806318160ddd146102a55780631a18e707146102c3576101f0565b8063039e09b1146101f557806306fdde031461021157806308b44b011461022f57806309079d0f1461024d575b600080fd5b61020f600480360381019061020a919061221c565b6105e3565b005b6102196106b7565b60405161022691906122d9565b60405180910390f35b610237610749565b6040516102449190612314565b60405180910390f35b61025561074f565b005b610271600480360381019061026c919061235b565b6107b9565b60405161027e91906123b6565b60405180910390f35b61028f6107dc565b60405161029c9190612314565b60405180910390f35b6102ad6107e2565b6040516102ba9190612314565b60405180910390f35b6102dd60048036038101906102d891906123d1565b6107ec565b005b6102e76108a4565b005b61030360048036038101906102fe91906123fe565b61090e565b60405161031091906123b6565b60405180910390f35b61032161093d565b60405161032e919061246d565b60405180910390f35b61033f610946565b60405161034c9190612314565b60405180910390f35b61035d61096e565b60405161036a9190612314565b60405180910390f35b61038d6004803603810190610388919061235b565b610974565b60405161039a91906123b6565b60405180910390f35b6103bd60048036038101906103b891906123d1565b6109ab565b005b6103d960048036038101906103d4919061221c565b6109bf565b005b6103f560048036038101906103f0919061221c565b610a93565b6040516104029190612314565b60405180910390f35b6104256004803603810190610420919061221c565b610adc565b6040516104329190612314565b60405180910390f35b6104556004803603810190610450919061235b565b610b24565b005b61045f610b44565b005b610469610c0f565b60405161047691906124a9565b60405180910390f35b610499600480360381019061049491906123d1565b610c35565b005b6104a361103a565b6040516104b091906122d9565b60405180910390f35b6104c16110cc565b005b6104dd60048036038101906104d8919061235b565b6111ba565b6040516104ea91906123b6565b60405180910390f35b61050d6004803603810190610508919061235b565b611231565b60405161051a91906123b6565b60405180910390f35b61052b611254565b005b610547600480360381019061054291906125f9565b611342565b60405161055491906122d9565b60405180910390f35b61057760048036038101906105729190612655565b61140b565b6040516105849190612314565b60405180910390f35b6105a760048036038101906105a291906123d1565b611492565b005b6105c360048036038101906105be9190612695565b61158a565b005b6105cd61171a565b6040516105da9190612314565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a906127a6565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600380546106c6906127f5565b80601f01602080910402602001604051908101604052809291908181526020018280546106f2906127f5565b801561073f5780601f106107145761010080835404028352916020019161073f565b820191906000526020600020905b81548152906001019060200180831161072257829003601f168201915b5050505050905090565b600a5481565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360038111156107b2576107b1612826565b5b0217905550565b6000806107c4611926565b90506107d181858561192e565b600191505092915050565b60085481565b6000600254905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610873906127a6565b60405180910390fd5b61088461093d565b600a61089091906129b7565b8161089b9190612a02565b60088190555050565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600381111561090757610906612826565b5b0217905550565b600080610919611926565b9050610926858285611af7565b610931858585611b83565b60019150509392505050565b60006012905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60095481565b60008061097f611926565b90506109a0818585610991858961140b565b61099b9190612a44565b61192e565b600191505092915050565b6109bc6109b6611926565b82611df9565b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a46906127a6565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b3682610b30611926565b83611af7565b610b408282611df9565b5050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb906127a6565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b42600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae90612aea565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090612b7c565b60405180910390fd5b60008111610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7390612be8565b60405180910390fd5b610d863382611fc6565b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dd59190612c08565b9250508190555060026003811115610df057610def612826565b5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166003811115610e4f57610e4e612826565b5b148015610e9c5750600954600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15610f0a576000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836003811115610f0457610f03612826565b5b02179055505b600380811115610f1d57610f1c612826565b5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166003811115610f7c57610f7b612826565b5b148015610fc95750600a54600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15611037576000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600381111561103157611030612826565b5b02179055505b50565b606060048054611049906127f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611075906127f5565b80156110c25780601f10611097576101008083540402835291602001916110c2565b820191906000526020600020905b8154815290600101906020018083116110a557829003601f168201915b5050505050905090565b600954600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114790612cd4565b60405180910390fd5b6002600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360038111156111b3576111b2612826565b5b0217905550565b6000806111c5611926565b905060006111d3828661140b565b905083811015611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f90612d66565b60405180910390fd5b611225828686840361192e565b60019250505092915050565b60008061123c611926565b9050611249818585611b83565b600191505092915050565b600a54600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cf90612e1e565b60405180910390fd5b6003600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600381111561133b5761133a612826565b5b0217905550565b600e6020528160005260406000208180516020810182018051848252602083016020850120818352809550505050505060009150915050806000018054611388906127f5565b80601f01602080910402602001604051908101604052809291908181526020018280546113b4906127f5565b80156114015780601f106113d657610100808354040283529160200191611401565b820191906000526020600020905b8154815290600101906020018083116113e457829003601f168201915b5050505050905081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081116114d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cc90612be8565b60405180910390fd5b6114df3382611df9565b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461152e9190612a44565b9250508190555062278d00426115449190612a44565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461161a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161190612ed6565b60405180910390fd5b60008167ffffffffffffffff811115611636576116356124ce565b5b6040519080825280602002602001820160405280156116645781602001602082028036833780820191505090505b5090506000604051806040016040528086815260200183815250905080600e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020876040516116ce9190612f32565b908152602001604051809103902060008201518160000190816116f191906130f5565b50602082015181600101908051906020019061170e929190612103565b50905050505050505050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b611769610946565b816117726107e2565b61177c9190612a44565b11156117bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b490613213565b60405180910390fd5b6117c782826117cb565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361183a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118319061327f565b60405180910390fd5b61184660008383612030565b80600260008282546118589190612a44565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516119099190612314565b60405180910390a361191d600083836120f0565b5050565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361199d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199490613311565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a03906133a3565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611aea9190612314565b60405180910390a3505050565b6000611b03848461140b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611b7d5781811015611b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b669061340f565b60405180910390fd5b611b7c848484840361192e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be9906134a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5890613533565b60405180910390fd5b611c6c838383612030565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce9906135c5565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611de09190612314565b60405180910390a3611df38484846120f0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5f90613657565b60405180910390fd5b611e7482600083612030565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef1906136e9565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611fad9190612314565b60405180910390a3611fc1836000846120f0565b505050565b611fce610946565b81611fd76107e2565b611fe19190612a44565b1115612022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201990613213565b60405180910390fd5b61202c8282611761565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561209957504173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b80156120d25750600073ffffffffffffffffffffffffffffffffffffffff164173ffffffffffffffffffffffffffffffffffffffff1614155b156120e0576120df6120f5565b5b6120eb838383611921565b505050565b505050565b61210141600854611fc6565b565b82805482825590600052602060002090810192821561217c579160200282015b8281111561217b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612123565b5b509050612189919061218d565b5090565b5b808211156121a657600081600090555060010161218e565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121e9826121be565b9050919050565b6121f9816121de565b811461220457600080fd5b50565b600081359050612216816121f0565b92915050565b600060208284031215612232576122316121b4565b5b600061224084828501612207565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612283578082015181840152602081019050612268565b60008484015250505050565b6000601f19601f8301169050919050565b60006122ab82612249565b6122b58185612254565b93506122c5818560208601612265565b6122ce8161228f565b840191505092915050565b600060208201905081810360008301526122f381846122a0565b905092915050565b6000819050919050565b61230e816122fb565b82525050565b60006020820190506123296000830184612305565b92915050565b612338816122fb565b811461234357600080fd5b50565b6000813590506123558161232f565b92915050565b60008060408385031215612372576123716121b4565b5b600061238085828601612207565b925050602061239185828601612346565b9150509250929050565b60008115159050919050565b6123b08161239b565b82525050565b60006020820190506123cb60008301846123a7565b92915050565b6000602082840312156123e7576123e66121b4565b5b60006123f584828501612346565b91505092915050565b600080600060608486031215612417576124166121b4565b5b600061242586828701612207565b935050602061243686828701612207565b925050604061244786828701612346565b9150509250925092565b600060ff82169050919050565b61246781612451565b82525050565b6000602082019050612482600083018461245e565b92915050565b6000612493826121be565b9050919050565b6124a381612488565b82525050565b60006020820190506124be600083018461249a565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125068261228f565b810181811067ffffffffffffffff82111715612525576125246124ce565b5b80604052505050565b60006125386121aa565b905061254482826124fd565b919050565b600067ffffffffffffffff821115612564576125636124ce565b5b61256d8261228f565b9050602081019050919050565b82818337600083830152505050565b600061259c61259784612549565b61252e565b9050828152602081018484840111156125b8576125b76124c9565b5b6125c384828561257a565b509392505050565b600082601f8301126125e0576125df6124c4565b5b81356125f0848260208601612589565b91505092915050565b600080604083850312156126105761260f6121b4565b5b600061261e85828601612207565b925050602083013567ffffffffffffffff81111561263f5761263e6121b9565b5b61264b858286016125cb565b9150509250929050565b6000806040838503121561266c5761266b6121b4565b5b600061267a85828601612207565b925050602061268b85828601612207565b9150509250929050565b600080600080608085870312156126af576126ae6121b4565b5b600085013567ffffffffffffffff8111156126cd576126cc6121b9565b5b6126d9878288016125cb565b945050602085013567ffffffffffffffff8111156126fa576126f96121b9565b5b612706878288016125cb565b935050604061271787828801612207565b925050606061272887828801612346565b91505092959194509250565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000612790602583612254565b915061279b82612734565b604082019050919050565b600060208201905081810360008301526127bf81612783565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061280d57607f821691505b6020821081036128205761281f6127c6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156128db578086048111156128b7576128b6612855565b5b60018516156128c65780820291505b80810290506128d485612884565b945061289b565b94509492505050565b6000826128f457600190506129b0565b8161290257600090506129b0565b8160018114612918576002811461292257612951565b60019150506129b0565b60ff84111561293457612933612855565b5b8360020a91508482111561294b5761294a612855565b5b506129b0565b5060208310610133831016604e8410600b84101617156129865782820a90508381111561298157612980612855565b5b6129b0565b6129938484846001612891565b925090508184048111156129aa576129a9612855565b5b81810290505b9392505050565b60006129c2826122fb565b91506129cd83612451565b92506129fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846128e4565b905092915050565b6000612a0d826122fb565b9150612a18836122fb565b9250828202612a26816122fb565b91508282048414831517612a3d57612a3c612855565b5b5092915050565b6000612a4f826122fb565b9150612a5a836122fb565b9250828201905080821115612a7257612a71612855565b5b92915050565b7f596f75206d75737420776169742033302064617973206265666f72652062656960008201527f6e672061626c6520746f20756e7374616b65205363617474657220546f6b656e602082015250565b6000612ad4604083612254565b9150612adf82612a78565b604082019050919050565b60006020820190508181036000830152612b0381612ac7565b9050919050565b7f416d6f756e74206d757374206265206c657373207468616e207374616b65642060008201527f616d6f756e740000000000000000000000000000000000000000000000000000602082015250565b6000612b66602683612254565b9150612b7182612b0a565b604082019050919050565b60006020820190508181036000830152612b9581612b59565b9050919050565b7f5374616b6520616d6f756e74206d75737420626520706f736974697665000000600082015250565b6000612bd2601d83612254565b9150612bdd82612b9c565b602082019050919050565b60006020820190508181036000830152612c0181612bc5565b9050919050565b6000612c13826122fb565b9150612c1e836122fb565b9250828203905081811115612c3657612c35612855565b5b92915050565b7f546f206265636f6d652061206d6f64656c2076616c696461746f722c20796f7560008201527f206d7573742068617665203530302c303030205363617474657220546f6b656e60208201527f207374616b656400000000000000000000000000000000000000000000000000604082015250565b6000612cbe604783612254565b9150612cc982612c3c565b606082019050919050565b60006020820190508181036000830152612ced81612cb1565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612d50602583612254565b9150612d5b82612cf4565b604082019050919050565b60006020820190508181036000830152612d7f81612d43565b9050919050565b7f546f206265636f6d65206120636f736d6f732076616c696461746f722c20796f60008201527f75206d7573742068617665203130302c303030205363617474657220546f6b6560208201527f6e207374616b6564000000000000000000000000000000000000000000000000604082015250565b6000612e08604883612254565b9150612e1382612d86565b606082019050919050565b60006020820190508181036000830152612e3781612dfb565b9050919050565b7f54686973206d6574686f642063616e206f6e6c792062652063616c6c6564206260008201527f792074686520747261696e696e67206a6f6220746f6b656e20636f6e7472616360208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b6000612ec0604183612254565b9150612ecb82612e3e565b606082019050919050565b60006020820190508181036000830152612eef81612eb3565b9050919050565b600081905092915050565b6000612f0c82612249565b612f168185612ef6565b9350612f26818560208601612265565b80840191505092915050565b6000612f3e8284612f01565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612fab7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f6e565b612fb58683612f6e565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ff2612fed612fe8846122fb565b612fcd565b6122fb565b9050919050565b6000819050919050565b61300c83612fd7565b61302061301882612ff9565b848454612f7b565b825550505050565b600090565b613035613028565b613040818484613003565b505050565b5b818110156130645761305960008261302d565b600181019050613046565b5050565b601f8211156130a95761307a81612f49565b61308384612f5e565b81016020851015613092578190505b6130a661309e85612f5e565b830182613045565b50505b505050565b600082821c905092915050565b60006130cc600019846008026130ae565b1980831691505092915050565b60006130e583836130bb565b9150826002028217905092915050565b6130fe82612249565b67ffffffffffffffff811115613117576131166124ce565b5b61312182546127f5565b61312c828285613068565b600060209050601f83116001811461315f576000841561314d578287015190505b61315785826130d9565b8655506131bf565b601f19841661316d86612f49565b60005b8281101561319557848901518255600182019150602085019450602081019050613170565b868310156131b257848901516131ae601f8916826130bb565b8355505b6001600288020188555050505b505050505050565b7f45524332304361707065643a2063617020657863656564656400000000000000600082015250565b60006131fd601983612254565b9150613208826131c7565b602082019050919050565b6000602082019050818103600083015261322c816131f0565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613269601f83612254565b915061327482613233565b602082019050919050565b600060208201905081810360008301526132988161325c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006132fb602483612254565b91506133068261329f565b604082019050919050565b6000602082019050818103600083015261332a816132ee565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061338d602283612254565b915061339882613331565b604082019050919050565b600060208201905081810360008301526133bc81613380565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006133f9601d83612254565b9150613404826133c3565b602082019050919050565b60006020820190508181036000830152613428816133ec565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061348b602583612254565b91506134968261342f565b604082019050919050565b600060208201905081810360008301526134ba8161347e565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061351d602383612254565b9150613528826134c1565b604082019050919050565b6000602082019050818103600083015261354c81613510565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006135af602683612254565b91506135ba82613553565b604082019050919050565b600060208201905081810360008301526135de816135a2565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613641602183612254565b915061364c826135e5565b604082019050919050565b6000602082019050818103600083015261367081613634565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006136d3602283612254565b91506136de82613677565b604082019050919050565b60006020820190508181036000830152613702816136c6565b905091905056fea2646970667358221220a77c029c764c2dbfc27bdd20a2b70919809f67914c818597db379b04fd5d152264736f6c63430008110033",
}

// ScatterprotocolABI is the input ABI used to generate the binding from.
// Deprecated: Use ScatterprotocolMetaData.ABI instead.
var ScatterprotocolABI = ScatterprotocolMetaData.ABI

// ScatterprotocolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScatterprotocolMetaData.Bin instead.
var ScatterprotocolBin = ScatterprotocolMetaData.Bin

// DeployScatterprotocol deploys a new Ethereum contract, binding an instance of Scatterprotocol to it.
func DeployScatterprotocol(auth *bind.TransactOpts, backend bind.ContractBackend, cap *big.Int, reward *big.Int, trainingTokenContractAddress common.Address, evaluationTokenContractAddress common.Address) (common.Address, *types.Transaction, *Scatterprotocol, error) {
	parsed, err := ScatterprotocolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScatterprotocolBin), backend, cap, reward, trainingTokenContractAddress, evaluationTokenContractAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Scatterprotocol{ScatterprotocolCaller: ScatterprotocolCaller{contract: contract}, ScatterprotocolTransactor: ScatterprotocolTransactor{contract: contract}, ScatterprotocolFilterer: ScatterprotocolFilterer{contract: contract}}, nil
}

// Scatterprotocol is an auto generated Go binding around an Ethereum contract.
type Scatterprotocol struct {
	ScatterprotocolCaller     // Read-only binding to the contract
	ScatterprotocolTransactor // Write-only binding to the contract
	ScatterprotocolFilterer   // Log filterer for contract events
}

// ScatterprotocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScatterprotocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScatterprotocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScatterprotocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScatterprotocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScatterprotocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScatterprotocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScatterprotocolSession struct {
	Contract     *Scatterprotocol  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScatterprotocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScatterprotocolCallerSession struct {
	Contract *ScatterprotocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ScatterprotocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScatterprotocolTransactorSession struct {
	Contract     *ScatterprotocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ScatterprotocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScatterprotocolRaw struct {
	Contract *Scatterprotocol // Generic contract binding to access the raw methods on
}

// ScatterprotocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScatterprotocolCallerRaw struct {
	Contract *ScatterprotocolCaller // Generic read-only contract binding to access the raw methods on
}

// ScatterprotocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScatterprotocolTransactorRaw struct {
	Contract *ScatterprotocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScatterprotocol creates a new instance of Scatterprotocol, bound to a specific deployed contract.
func NewScatterprotocol(address common.Address, backend bind.ContractBackend) (*Scatterprotocol, error) {
	contract, err := bindScatterprotocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Scatterprotocol{ScatterprotocolCaller: ScatterprotocolCaller{contract: contract}, ScatterprotocolTransactor: ScatterprotocolTransactor{contract: contract}, ScatterprotocolFilterer: ScatterprotocolFilterer{contract: contract}}, nil
}

// NewScatterprotocolCaller creates a new read-only instance of Scatterprotocol, bound to a specific deployed contract.
func NewScatterprotocolCaller(address common.Address, caller bind.ContractCaller) (*ScatterprotocolCaller, error) {
	contract, err := bindScatterprotocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScatterprotocolCaller{contract: contract}, nil
}

// NewScatterprotocolTransactor creates a new write-only instance of Scatterprotocol, bound to a specific deployed contract.
func NewScatterprotocolTransactor(address common.Address, transactor bind.ContractTransactor) (*ScatterprotocolTransactor, error) {
	contract, err := bindScatterprotocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScatterprotocolTransactor{contract: contract}, nil
}

// NewScatterprotocolFilterer creates a new log filterer instance of Scatterprotocol, bound to a specific deployed contract.
func NewScatterprotocolFilterer(address common.Address, filterer bind.ContractFilterer) (*ScatterprotocolFilterer, error) {
	contract, err := bindScatterprotocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScatterprotocolFilterer{contract: contract}, nil
}

// bindScatterprotocol binds a generic wrapper to an already deployed contract.
func bindScatterprotocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ScatterprotocolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scatterprotocol *ScatterprotocolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scatterprotocol.Contract.ScatterprotocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scatterprotocol *ScatterprotocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.ScatterprotocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scatterprotocol *ScatterprotocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.ScatterprotocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scatterprotocol *ScatterprotocolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scatterprotocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scatterprotocol *ScatterprotocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scatterprotocol *ScatterprotocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.contract.Transact(opts, method, params...)
}

// AddressToTrainingJobInfo is a free data retrieval call binding the contract method 0xc0d241ed.
//
// Solidity: function addressToTrainingJobInfo(address , string ) view returns(string trainingJobCid)
func (_Scatterprotocol *ScatterprotocolCaller) AddressToTrainingJobInfo(opts *bind.CallOpts, arg0 common.Address, arg1 string) (string, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "addressToTrainingJobInfo", arg0, arg1)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToTrainingJobInfo is a free data retrieval call binding the contract method 0xc0d241ed.
//
// Solidity: function addressToTrainingJobInfo(address , string ) view returns(string trainingJobCid)
func (_Scatterprotocol *ScatterprotocolSession) AddressToTrainingJobInfo(arg0 common.Address, arg1 string) (string, error) {
	return _Scatterprotocol.Contract.AddressToTrainingJobInfo(&_Scatterprotocol.CallOpts, arg0, arg1)
}

// AddressToTrainingJobInfo is a free data retrieval call binding the contract method 0xc0d241ed.
//
// Solidity: function addressToTrainingJobInfo(address , string ) view returns(string trainingJobCid)
func (_Scatterprotocol *ScatterprotocolCallerSession) AddressToTrainingJobInfo(arg0 common.Address, arg1 string) (string, error) {
	return _Scatterprotocol.Contract.AddressToTrainingJobInfo(&_Scatterprotocol.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scatterprotocol.Contract.Allowance(&_Scatterprotocol.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Scatterprotocol.Contract.Allowance(&_Scatterprotocol.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scatterprotocol.Contract.BalanceOf(&_Scatterprotocol.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Scatterprotocol.Contract.BalanceOf(&_Scatterprotocol.CallOpts, account)
}

// BlockReward is a free data retrieval call binding the contract method 0x0ac168a1.
//
// Solidity: function blockReward() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) BlockReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "blockReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlockReward is a free data retrieval call binding the contract method 0x0ac168a1.
//
// Solidity: function blockReward() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) BlockReward() (*big.Int, error) {
	return _Scatterprotocol.Contract.BlockReward(&_Scatterprotocol.CallOpts)
}

// BlockReward is a free data retrieval call binding the contract method 0x0ac168a1.
//
// Solidity: function blockReward() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) BlockReward() (*big.Int, error) {
	return _Scatterprotocol.Contract.BlockReward(&_Scatterprotocol.CallOpts)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) Cap(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "cap")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) Cap() (*big.Int, error) {
	return _Scatterprotocol.Contract.Cap(&_Scatterprotocol.CallOpts)
}

// Cap is a free data retrieval call binding the contract method 0x355274ea.
//
// Solidity: function cap() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) Cap() (*big.Int, error) {
	return _Scatterprotocol.Contract.Cap(&_Scatterprotocol.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scatterprotocol *ScatterprotocolCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scatterprotocol *ScatterprotocolSession) Decimals() (uint8, error) {
	return _Scatterprotocol.Contract.Decimals(&_Scatterprotocol.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Scatterprotocol *ScatterprotocolCallerSession) Decimals() (uint8, error) {
	return _Scatterprotocol.Contract.Decimals(&_Scatterprotocol.CallOpts)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) GetAccountStake(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "getAccountStake", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scatterprotocol.Contract.GetAccountStake(&_Scatterprotocol.CallOpts, account)
}

// GetAccountStake is a free data retrieval call binding the contract method 0x5e30913f.
//
// Solidity: function getAccountStake(address account) view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) GetAccountStake(account common.Address) (*big.Int, error) {
	return _Scatterprotocol.Contract.GetAccountStake(&_Scatterprotocol.CallOpts, account)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) GetOwnStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "getOwnStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) GetOwnStake() (*big.Int, error) {
	return _Scatterprotocol.Contract.GetOwnStake(&_Scatterprotocol.CallOpts)
}

// GetOwnStake is a free data retrieval call binding the contract method 0xfb7ba582.
//
// Solidity: function getOwnStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) GetOwnStake() (*big.Int, error) {
	return _Scatterprotocol.Contract.GetOwnStake(&_Scatterprotocol.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scatterprotocol *ScatterprotocolCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scatterprotocol *ScatterprotocolSession) Name() (string, error) {
	return _Scatterprotocol.Contract.Name(&_Scatterprotocol.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Scatterprotocol *ScatterprotocolCallerSession) Name() (string, error) {
	return _Scatterprotocol.Contract.Name(&_Scatterprotocol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scatterprotocol *ScatterprotocolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scatterprotocol *ScatterprotocolSession) Owner() (common.Address, error) {
	return _Scatterprotocol.Contract.Owner(&_Scatterprotocol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Scatterprotocol *ScatterprotocolCallerSession) Owner() (common.Address, error) {
	return _Scatterprotocol.Contract.Owner(&_Scatterprotocol.CallOpts)
}

// RequiredCosmosValidatorStake is a free data retrieval call binding the contract method 0x08b44b01.
//
// Solidity: function requiredCosmosValidatorStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) RequiredCosmosValidatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "requiredCosmosValidatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredCosmosValidatorStake is a free data retrieval call binding the contract method 0x08b44b01.
//
// Solidity: function requiredCosmosValidatorStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) RequiredCosmosValidatorStake() (*big.Int, error) {
	return _Scatterprotocol.Contract.RequiredCosmosValidatorStake(&_Scatterprotocol.CallOpts)
}

// RequiredCosmosValidatorStake is a free data retrieval call binding the contract method 0x08b44b01.
//
// Solidity: function requiredCosmosValidatorStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) RequiredCosmosValidatorStake() (*big.Int, error) {
	return _Scatterprotocol.Contract.RequiredCosmosValidatorStake(&_Scatterprotocol.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) RequiredModelValidatorStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "requiredModelValidatorStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scatterprotocol.Contract.RequiredModelValidatorStake(&_Scatterprotocol.CallOpts)
}

// RequiredModelValidatorStake is a free data retrieval call binding the contract method 0x36cb7f80.
//
// Solidity: function requiredModelValidatorStake() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) RequiredModelValidatorStake() (*big.Int, error) {
	return _Scatterprotocol.Contract.RequiredModelValidatorStake(&_Scatterprotocol.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scatterprotocol *ScatterprotocolCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scatterprotocol *ScatterprotocolSession) Symbol() (string, error) {
	return _Scatterprotocol.Contract.Symbol(&_Scatterprotocol.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Scatterprotocol *ScatterprotocolCallerSession) Symbol() (string, error) {
	return _Scatterprotocol.Contract.Symbol(&_Scatterprotocol.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scatterprotocol.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolSession) TotalSupply() (*big.Int, error) {
	return _Scatterprotocol.Contract.TotalSupply(&_Scatterprotocol.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Scatterprotocol *ScatterprotocolCallerSession) TotalSupply() (*big.Int, error) {
	return _Scatterprotocol.Contract.TotalSupply(&_Scatterprotocol.CallOpts)
}

// AddStake is a paid mutator transaction binding the contract method 0xeb4f16b5.
//
// Solidity: function addStake(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) AddStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "addStake", amount)
}

// AddStake is a paid mutator transaction binding the contract method 0xeb4f16b5.
//
// Solidity: function addStake(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolSession) AddStake(amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.AddStake(&_Scatterprotocol.TransactOpts, amount)
}

// AddStake is a paid mutator transaction binding the contract method 0xeb4f16b5.
//
// Solidity: function addStake(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) AddStake(amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.AddStake(&_Scatterprotocol.TransactOpts, amount)
}

// AddTopicForRequestor is a paid mutator transaction binding the contract method 0xf56521a8.
//
// Solidity: function addTopicForRequestor(string topicName, string jobCid, address requestorAddress, uint256 maxTrainerCount) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) AddTopicForRequestor(opts *bind.TransactOpts, topicName string, jobCid string, requestorAddress common.Address, maxTrainerCount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "addTopicForRequestor", topicName, jobCid, requestorAddress, maxTrainerCount)
}

// AddTopicForRequestor is a paid mutator transaction binding the contract method 0xf56521a8.
//
// Solidity: function addTopicForRequestor(string topicName, string jobCid, address requestorAddress, uint256 maxTrainerCount) returns()
func (_Scatterprotocol *ScatterprotocolSession) AddTopicForRequestor(topicName string, jobCid string, requestorAddress common.Address, maxTrainerCount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.AddTopicForRequestor(&_Scatterprotocol.TransactOpts, topicName, jobCid, requestorAddress, maxTrainerCount)
}

// AddTopicForRequestor is a paid mutator transaction binding the contract method 0xf56521a8.
//
// Solidity: function addTopicForRequestor(string topicName, string jobCid, address requestorAddress, uint256 maxTrainerCount) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) AddTopicForRequestor(topicName string, jobCid string, requestorAddress common.Address, maxTrainerCount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.AddTopicForRequestor(&_Scatterprotocol.TransactOpts, topicName, jobCid, requestorAddress, maxTrainerCount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Approve(&_Scatterprotocol.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Approve(&_Scatterprotocol.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Burn(&_Scatterprotocol.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Burn(&_Scatterprotocol.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.BurnFrom(&_Scatterprotocol.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.BurnFrom(&_Scatterprotocol.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scatterprotocol *ScatterprotocolSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.DecreaseAllowance(&_Scatterprotocol.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.DecreaseAllowance(&_Scatterprotocol.TransactOpts, spender, subtractedValue)
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_Scatterprotocol *ScatterprotocolTransactor) Destroy(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "destroy")
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_Scatterprotocol *ScatterprotocolSession) Destroy() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Destroy(&_Scatterprotocol.TransactOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x83197ef0.
//
// Solidity: function destroy() returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) Destroy() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Destroy(&_Scatterprotocol.TransactOpts)
}

// ElevateToCosmosValidator is a paid mutator transaction binding the contract method 0xbdb66855.
//
// Solidity: function elevateToCosmosValidator() returns()
func (_Scatterprotocol *ScatterprotocolTransactor) ElevateToCosmosValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "elevateToCosmosValidator")
}

// ElevateToCosmosValidator is a paid mutator transaction binding the contract method 0xbdb66855.
//
// Solidity: function elevateToCosmosValidator() returns()
func (_Scatterprotocol *ScatterprotocolSession) ElevateToCosmosValidator() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.ElevateToCosmosValidator(&_Scatterprotocol.TransactOpts)
}

// ElevateToCosmosValidator is a paid mutator transaction binding the contract method 0xbdb66855.
//
// Solidity: function elevateToCosmosValidator() returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) ElevateToCosmosValidator() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.ElevateToCosmosValidator(&_Scatterprotocol.TransactOpts)
}

// ElevateToModelValidator is a paid mutator transaction binding the contract method 0xa06e692b.
//
// Solidity: function elevateToModelValidator() returns()
func (_Scatterprotocol *ScatterprotocolTransactor) ElevateToModelValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "elevateToModelValidator")
}

// ElevateToModelValidator is a paid mutator transaction binding the contract method 0xa06e692b.
//
// Solidity: function elevateToModelValidator() returns()
func (_Scatterprotocol *ScatterprotocolSession) ElevateToModelValidator() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.ElevateToModelValidator(&_Scatterprotocol.TransactOpts)
}

// ElevateToModelValidator is a paid mutator transaction binding the contract method 0xa06e692b.
//
// Solidity: function elevateToModelValidator() returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) ElevateToModelValidator() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.ElevateToModelValidator(&_Scatterprotocol.TransactOpts)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scatterprotocol *ScatterprotocolSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.IncreaseAllowance(&_Scatterprotocol.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.IncreaseAllowance(&_Scatterprotocol.TransactOpts, spender, addedValue)
}

// InitCelestialNode is a paid mutator transaction binding the contract method 0x09079d0f.
//
// Solidity: function initCelestialNode() returns()
func (_Scatterprotocol *ScatterprotocolTransactor) InitCelestialNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "initCelestialNode")
}

// InitCelestialNode is a paid mutator transaction binding the contract method 0x09079d0f.
//
// Solidity: function initCelestialNode() returns()
func (_Scatterprotocol *ScatterprotocolSession) InitCelestialNode() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.InitCelestialNode(&_Scatterprotocol.TransactOpts)
}

// InitCelestialNode is a paid mutator transaction binding the contract method 0x09079d0f.
//
// Solidity: function initCelestialNode() returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) InitCelestialNode() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.InitCelestialNode(&_Scatterprotocol.TransactOpts)
}

// InitPeerNode is a paid mutator transaction binding the contract method 0x1fc56f04.
//
// Solidity: function initPeerNode() returns()
func (_Scatterprotocol *ScatterprotocolTransactor) InitPeerNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "initPeerNode")
}

// InitPeerNode is a paid mutator transaction binding the contract method 0x1fc56f04.
//
// Solidity: function initPeerNode() returns()
func (_Scatterprotocol *ScatterprotocolSession) InitPeerNode() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.InitPeerNode(&_Scatterprotocol.TransactOpts)
}

// InitPeerNode is a paid mutator transaction binding the contract method 0x1fc56f04.
//
// Solidity: function initPeerNode() returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) InitPeerNode() (*types.Transaction, error) {
	return _Scatterprotocol.Contract.InitPeerNode(&_Scatterprotocol.TransactOpts)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) RemoveStake(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "removeStake", amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.RemoveStake(&_Scatterprotocol.TransactOpts, amount)
}

// RemoveStake is a paid mutator transaction binding the contract method 0x939624ab.
//
// Solidity: function removeStake(uint256 amount) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) RemoveStake(amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.RemoveStake(&_Scatterprotocol.TransactOpts, amount)
}

// SetBlockReward is a paid mutator transaction binding the contract method 0x1a18e707.
//
// Solidity: function setBlockReward(uint256 reward) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) SetBlockReward(opts *bind.TransactOpts, reward *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "setBlockReward", reward)
}

// SetBlockReward is a paid mutator transaction binding the contract method 0x1a18e707.
//
// Solidity: function setBlockReward(uint256 reward) returns()
func (_Scatterprotocol *ScatterprotocolSession) SetBlockReward(reward *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.SetBlockReward(&_Scatterprotocol.TransactOpts, reward)
}

// SetBlockReward is a paid mutator transaction binding the contract method 0x1a18e707.
//
// Solidity: function setBlockReward(uint256 reward) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) SetBlockReward(reward *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.SetBlockReward(&_Scatterprotocol.TransactOpts, reward)
}

// SetEvaluationJobContractAddress is a paid mutator transaction binding the contract method 0x039e09b1.
//
// Solidity: function setEvaluationJobContractAddress(address newAddress) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) SetEvaluationJobContractAddress(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "setEvaluationJobContractAddress", newAddress)
}

// SetEvaluationJobContractAddress is a paid mutator transaction binding the contract method 0x039e09b1.
//
// Solidity: function setEvaluationJobContractAddress(address newAddress) returns()
func (_Scatterprotocol *ScatterprotocolSession) SetEvaluationJobContractAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.SetEvaluationJobContractAddress(&_Scatterprotocol.TransactOpts, newAddress)
}

// SetEvaluationJobContractAddress is a paid mutator transaction binding the contract method 0x039e09b1.
//
// Solidity: function setEvaluationJobContractAddress(address newAddress) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) SetEvaluationJobContractAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.SetEvaluationJobContractAddress(&_Scatterprotocol.TransactOpts, newAddress)
}

// SetTrainingJobContractAddress is a paid mutator transaction binding the contract method 0x5aff6e77.
//
// Solidity: function setTrainingJobContractAddress(address newAddress) returns()
func (_Scatterprotocol *ScatterprotocolTransactor) SetTrainingJobContractAddress(opts *bind.TransactOpts, newAddress common.Address) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "setTrainingJobContractAddress", newAddress)
}

// SetTrainingJobContractAddress is a paid mutator transaction binding the contract method 0x5aff6e77.
//
// Solidity: function setTrainingJobContractAddress(address newAddress) returns()
func (_Scatterprotocol *ScatterprotocolSession) SetTrainingJobContractAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.SetTrainingJobContractAddress(&_Scatterprotocol.TransactOpts, newAddress)
}

// SetTrainingJobContractAddress is a paid mutator transaction binding the contract method 0x5aff6e77.
//
// Solidity: function setTrainingJobContractAddress(address newAddress) returns()
func (_Scatterprotocol *ScatterprotocolTransactorSession) SetTrainingJobContractAddress(newAddress common.Address) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.SetTrainingJobContractAddress(&_Scatterprotocol.TransactOpts, newAddress)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Transfer(&_Scatterprotocol.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.Transfer(&_Scatterprotocol.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.TransferFrom(&_Scatterprotocol.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Scatterprotocol *ScatterprotocolTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Scatterprotocol.Contract.TransferFrom(&_Scatterprotocol.TransactOpts, from, to, amount)
}

// ScatterprotocolApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Scatterprotocol contract.
type ScatterprotocolApprovalIterator struct {
	Event *ScatterprotocolApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScatterprotocolApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScatterprotocolApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScatterprotocolApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScatterprotocolApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScatterprotocolApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScatterprotocolApproval represents a Approval event raised by the Scatterprotocol contract.
type ScatterprotocolApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scatterprotocol *ScatterprotocolFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ScatterprotocolApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scatterprotocol.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ScatterprotocolApprovalIterator{contract: _Scatterprotocol.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scatterprotocol *ScatterprotocolFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScatterprotocolApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Scatterprotocol.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScatterprotocolApproval)
				if err := _Scatterprotocol.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Scatterprotocol *ScatterprotocolFilterer) ParseApproval(log types.Log) (*ScatterprotocolApproval, error) {
	event := new(ScatterprotocolApproval)
	if err := _Scatterprotocol.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScatterprotocolTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Scatterprotocol contract.
type ScatterprotocolTransferIterator struct {
	Event *ScatterprotocolTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScatterprotocolTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScatterprotocolTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScatterprotocolTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScatterprotocolTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScatterprotocolTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScatterprotocolTransfer represents a Transfer event raised by the Scatterprotocol contract.
type ScatterprotocolTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scatterprotocol *ScatterprotocolFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ScatterprotocolTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scatterprotocol.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ScatterprotocolTransferIterator{contract: _Scatterprotocol.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scatterprotocol *ScatterprotocolFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScatterprotocolTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Scatterprotocol.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScatterprotocolTransfer)
				if err := _Scatterprotocol.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Scatterprotocol *ScatterprotocolFilterer) ParseTransfer(log types.Log) (*ScatterprotocolTransfer, error) {
	event := new(ScatterprotocolTransfer)
	if err := _Scatterprotocol.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
