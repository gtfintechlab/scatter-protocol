// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package trainingtoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TrainingtokenMetaData contains all meta data concerning the Trainingtoken contract.
var TrainingtokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolDeployer\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"topicName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pooledReward\",\"type\":\"uint256\"}],\"name\":\"publishTrainingJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scatterContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setScatterContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280601e81526020017f536361747465722050726f746f636f6c20547261696e696e67204a6f627300008152506040518060400160405280600481526020017f5350544a0000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000453565b508060019081620000a1919062000453565b505050620000c4620000b86200010b60201b60201c565b6200011360201b60201c565b33600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200053a565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025b57607f821691505b60208210810362000271576200027062000213565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200029c565b620002e786836200029c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003346200032e6200032884620002ff565b62000309565b620002ff565b9050919050565b6000819050919050565b620003508362000313565b620003686200035f826200033b565b848454620002a9565b825550505050565b600090565b6200037f62000370565b6200038c81848462000345565b505050565b5b81811015620003b457620003a860008262000375565b60018101905062000392565b5050565b601f8211156200040357620003cd8162000277565b620003d8846200028c565b81016020851015620003e8578190505b62000400620003f7856200028c565b83018262000391565b50505b505050565b600082821c905092915050565b6000620004286000198460080262000408565b1980831691505092915050565b600062000443838362000415565b9150826002028217905092915050565b6200045e82620001d9565b67ffffffffffffffff8111156200047a5762000479620001e4565b5b62000486825462000242565b62000493828285620003b8565b600060209050601f831160018114620004cb5760008415620004b6578287015190505b620004c2858262000435565b86555062000532565b601f198416620004db8662000277565b60005b828110156200050557848901518255600182019150602085019450602081019050620004de565b8683101562000525578489015162000521601f89168262000415565b8355505b6001600288020188555050505b505050505050565b6133bc806200054a6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063a22cb4651161007c578063a22cb46514610363578063b88d4fde1461037f578063c34e62ad1461039b578063c87b56dd146103cb578063e985e9c5146103fb578063f2fde38b1461042b57610142565b806370a08231146102cf578063715018a6146102ff5780638672c212146103095780638da5cb5b1461032757806395d89b411461034557610142565b806323b872dd1161010a57806323b872dd146101fd578063330c093c146102195780633bb3a24d1461023757806342842e0e1461026757806355f804b3146102835780636352211e1461029f57610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c5578063126d5b6a146101e1575b600080fd5b610161600480360381019061015c9190612000565b610447565b60405161016e9190612048565b60405180910390f35b61017f6104a8565b60405161018c91906120f3565b60405180910390f35b6101af60048036038101906101aa919061214b565b61053a565b6040516101bc91906121b9565b60405180910390f35b6101df60048036038101906101da9190612200565b610580565b005b6101fb60048036038101906101f69190612240565b610697565b005b6102176004803603810190610212919061226d565b6106e3565b005b610221610743565b60405161022e91906122e1565b60405180910390f35b610251600480360381019061024c919061214b565b610769565b60405161025e91906120f3565b60405180910390f35b610281600480360381019061027c919061226d565b61077b565b005b61029d60048036038101906102989190612431565b61079b565b005b6102b960048036038101906102b4919061214b565b6107b6565b6040516102c691906121b9565b60405180910390f35b6102e960048036038101906102e49190612240565b61083c565b6040516102f69190612489565b60405180910390f35b6103076108f3565b005b610311610907565b60405161031e91906121b9565b60405180910390f35b61032f61092d565b60405161033c91906121b9565b60405180910390f35b61034d610957565b60405161035a91906120f3565b60405180910390f35b61037d600480360381019061037891906124d0565b6109e9565b005b610399600480360381019061039491906125b1565b6109ff565b005b6103b560048036038101906103b09190612634565b610a61565b6040516103c29190612489565b60405180910390f35b6103e560048036038101906103e0919061214b565b610bbe565b6040516103f291906120f3565b60405180910390f35b610415600480360381019061041091906126d3565b610cd0565b6040516104229190612048565b60405180910390f35b61044560048036038101906104409190612240565b610d64565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a157506104a082610de7565b5b9050919050565b6060600080546104b790612742565b80601f01602080910402602001604051908101604052809291908181526020018280546104e390612742565b80156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b5050505050905090565b600061054582610ec9565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061058b826107b6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f2906127e5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661061a610f14565b73ffffffffffffffffffffffffffffffffffffffff161480610649575061064881610643610f14565b610cd0565b5b610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90612877565b60405180910390fd5b6106928383610f1c565b505050565b61069f610fd5565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106f46106ee610f14565b82611053565b610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072a90612909565b60405180910390fd5b61073e8383836110e8565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061077482610bbe565b9050919050565b610796838383604051806020016040528060008152506109ff565b505050565b6107a3610fd5565b80600990816107b29190612ad5565b5050565b6000806107c2836113e1565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90612bf3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390612c85565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108fb610fd5565b610905600061141e565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461096690612742565b80601f016020809104026020016040519081016040528092919081815260200182805461099290612742565b80156109df5780601f106109b4576101008083540402835291602001916109df565b820191906000526020600020905b8154815290600101906020018083116109c257829003601f168201915b5050505050905090565b6109fb6109f4610f14565b83836114e4565b5050565b610a10610a0a610f14565b83611053565b610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4690612909565b60405180910390fd5b610a5b84848484611650565b50505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90612d17565b60405180910390fd5b610afd600c6116ac565b6000610b09600c6116c2565b9050610b1584826116d0565b610b1f81876116ee565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad6d9ff5868887876040518563ffffffff1660e01b8152600401610b809493929190612d37565b600060405180830381600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b5050505080915050949350505050565b6060610bc982610ec9565b6000600660008481526020019081526020016000208054610be990612742565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1590612742565b8015610c625780601f10610c3757610100808354040283529160200191610c62565b820191906000526020600020905b815481529060010190602001808311610c4557829003601f168201915b505050505090506000610c736116fc565b90506000815103610c88578192505050610ccb565b600082511115610cbd578082604051602001610ca5929190612dc6565b60405160208183030381529060405292505050610ccb565b610cc68461178e565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d6c610fd5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd290612e5c565b60405180910390fd5b610de48161141e565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610eb257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610ec25750610ec1826117f6565b5b9050919050565b610ed281611860565b610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0890612bf3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f8f836107b6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610fdd610f14565b73ffffffffffffffffffffffffffffffffffffffff16610ffb61092d565b73ffffffffffffffffffffffffffffffffffffffff1614611051576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104890612ec8565b60405180910390fd5b565b60008061105f836107b6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806110a157506110a08185610cd0565b5b806110df57508373ffffffffffffffffffffffffffffffffffffffff166110c78461053a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611108826107b6565b73ffffffffffffffffffffffffffffffffffffffff161461115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115590612f5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c490612fec565b60405180910390fd5b6111da83838360016118a1565b8273ffffffffffffffffffffffffffffffffffffffff166111fa826107b6565b73ffffffffffffffffffffffffffffffffffffffff1614611250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124790612f5a565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46113dc83838360016118a7565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154990613058565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116439190612048565b60405180910390a3505050565b61165b8484846110e8565b611667848484846118ad565b6116a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169d906130ea565b60405180910390fd5b50505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6116ea828260405180602001604052806000815250611a34565b5050565b6116f88282611a8f565b5050565b60606009805461170b90612742565b80601f016020809104026020016040519081016040528092919081815260200182805461173790612742565b80156117845780601f1061175957610100808354040283529160200191611784565b820191906000526020600020905b81548152906001019060200180831161176757829003601f168201915b5050505050905090565b606061179982610ec9565b60006117a36116fc565b905060008151116117c357604051806020016040528060008152506117ee565b806117cd84611b33565b6040516020016117de929190612dc6565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611882836113e1565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006118ce8473ffffffffffffffffffffffffffffffffffffffff16611c01565b15611a27578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118f7610f14565b8786866040518563ffffffff1660e01b8152600401611919949392919061315f565b6020604051808303816000875af192505050801561195557506040513d601f19601f8201168201806040525081019061195291906131c0565b60015b6119d7573d8060008114611985576040519150601f19603f3d011682016040523d82523d6000602084013e61198a565b606091505b5060008151036119cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c6906130ea565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611a2c565b600190505b949350505050565b611a3e8383611c24565b611a4b60008484846118ad565b611a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a81906130ea565b60405180910390fd5b505050565b611a9882611860565b611ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ace9061325f565b60405180910390fd5b80600660008481526020019081526020016000209081611af79190612ad5565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611b279190612489565b60405180910390a15050565b606060006001611b4284611e41565b01905060008167ffffffffffffffff811115611b6157611b60612306565b5b6040519080825280601f01601f191660200182016040528015611b935781602001600182028036833780820191505090505b509050600082602001820190505b600115611bf6578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611bea57611be961327f565b5b04945060008503611ba1575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8a906132fa565b60405180910390fd5b611c9c81611860565b15611cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd390613366565b60405180910390fd5b611cea6000838360016118a1565b611cf381611860565b15611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a90613366565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e3d6000838360016118a7565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e9f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e9557611e9461327f565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611edc576d04ee2d6d415b85acef81000000008381611ed257611ed161327f565b5b0492506020810190505b662386f26fc100008310611f0b57662386f26fc100008381611f0157611f0061327f565b5b0492506010810190505b6305f5e1008310611f34576305f5e1008381611f2a57611f2961327f565b5b0492506008810190505b6127108310611f59576127108381611f4f57611f4e61327f565b5b0492506004810190505b60648310611f7c5760648381611f7257611f7161327f565b5b0492506002810190505b600a8310611f8b576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fdd81611fa8565b8114611fe857600080fd5b50565b600081359050611ffa81611fd4565b92915050565b60006020828403121561201657612015611f9e565b5b600061202484828501611feb565b91505092915050565b60008115159050919050565b6120428161202d565b82525050565b600060208201905061205d6000830184612039565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561209d578082015181840152602081019050612082565b60008484015250505050565b6000601f19601f8301169050919050565b60006120c582612063565b6120cf818561206e565b93506120df81856020860161207f565b6120e8816120a9565b840191505092915050565b6000602082019050818103600083015261210d81846120ba565b905092915050565b6000819050919050565b61212881612115565b811461213357600080fd5b50565b6000813590506121458161211f565b92915050565b60006020828403121561216157612160611f9e565b5b600061216f84828501612136565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121a382612178565b9050919050565b6121b381612198565b82525050565b60006020820190506121ce60008301846121aa565b92915050565b6121dd81612198565b81146121e857600080fd5b50565b6000813590506121fa816121d4565b92915050565b6000806040838503121561221757612216611f9e565b5b6000612225858286016121eb565b925050602061223685828601612136565b9150509250929050565b60006020828403121561225657612255611f9e565b5b6000612264848285016121eb565b91505092915050565b60008060006060848603121561228657612285611f9e565b5b6000612294868287016121eb565b93505060206122a5868287016121eb565b92505060406122b686828701612136565b9150509250925092565b60006122cb82612178565b9050919050565b6122db816122c0565b82525050565b60006020820190506122f660008301846122d2565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61233e826120a9565b810181811067ffffffffffffffff8211171561235d5761235c612306565b5b80604052505050565b6000612370611f94565b905061237c8282612335565b919050565b600067ffffffffffffffff82111561239c5761239b612306565b5b6123a5826120a9565b9050602081019050919050565b82818337600083830152505050565b60006123d46123cf84612381565b612366565b9050828152602081018484840111156123f0576123ef612301565b5b6123fb8482856123b2565b509392505050565b600082601f830112612418576124176122fc565b5b81356124288482602086016123c1565b91505092915050565b60006020828403121561244757612446611f9e565b5b600082013567ffffffffffffffff81111561246557612464611fa3565b5b61247184828501612403565b91505092915050565b61248381612115565b82525050565b600060208201905061249e600083018461247a565b92915050565b6124ad8161202d565b81146124b857600080fd5b50565b6000813590506124ca816124a4565b92915050565b600080604083850312156124e7576124e6611f9e565b5b60006124f5858286016121eb565b9250506020612506858286016124bb565b9150509250929050565b600067ffffffffffffffff82111561252b5761252a612306565b5b612534826120a9565b9050602081019050919050565b600061255461254f84612510565b612366565b9050828152602081018484840111156125705761256f612301565b5b61257b8482856123b2565b509392505050565b600082601f830112612598576125976122fc565b5b81356125a8848260208601612541565b91505092915050565b600080600080608085870312156125cb576125ca611f9e565b5b60006125d9878288016121eb565b94505060206125ea878288016121eb565b93505060406125fb87828801612136565b925050606085013567ffffffffffffffff81111561261c5761261b611fa3565b5b61262887828801612583565b91505092959194509250565b6000806000806080858703121561264e5761264d611f9e565b5b600085013567ffffffffffffffff81111561266c5761266b611fa3565b5b61267887828801612403565b945050602085013567ffffffffffffffff81111561269957612698611fa3565b5b6126a587828801612403565b93505060406126b6878288016121eb565b92505060606126c787828801612136565b91505092959194509250565b600080604083850312156126ea576126e9611f9e565b5b60006126f8858286016121eb565b9250506020612709858286016121eb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061275a57607f821691505b60208210810361276d5761276c612713565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006127cf60218361206e565b91506127da82612773565b604082019050919050565b600060208201905081810360008301526127fe816127c2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612861603d8361206e565b915061286c82612805565b604082019050919050565b6000602082019050818103600083015261289081612854565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006128f3602d8361206e565b91506128fe82612897565b604082019050919050565b60006020820190508181036000830152612922816128e6565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261298b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261294e565b612995868361294e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006129d26129cd6129c884612115565b6129ad565b612115565b9050919050565b6000819050919050565b6129ec836129b7565b612a006129f8826129d9565b84845461295b565b825550505050565b600090565b612a15612a08565b612a208184846129e3565b505050565b5b81811015612a4457612a39600082612a0d565b600181019050612a26565b5050565b601f821115612a8957612a5a81612929565b612a638461293e565b81016020851015612a72578190505b612a86612a7e8561293e565b830182612a25565b50505b505050565b600082821c905092915050565b6000612aac60001984600802612a8e565b1980831691505092915050565b6000612ac58383612a9b565b9150826002028217905092915050565b612ade82612063565b67ffffffffffffffff811115612af757612af6612306565b5b612b018254612742565b612b0c828285612a48565b600060209050601f831160018114612b3f5760008415612b2d578287015190505b612b378582612ab9565b865550612b9f565b601f198416612b4d86612929565b60005b82811015612b7557848901518255600182019150602085019450602081019050612b50565b86831015612b925784890151612b8e601f891682612a9b565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612bdd60188361206e565b9150612be882612ba7565b602082019050919050565b60006020820190508181036000830152612c0c81612bd0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c6f60298361206e565b9150612c7a82612c13565b604082019050919050565b60006020820190508181036000830152612c9e81612c62565b9050919050565b7f54686973206d6574686f642063616e206f6e6c792062652063616c6c6564206260008201527f792074686520736361747465722070726f746f636f6c20636f6e747261637400602082015250565b6000612d01603f8361206e565b9150612d0c82612ca5565b604082019050919050565b60006020820190508181036000830152612d3081612cf4565b9050919050565b60006080820190508181036000830152612d5181876120ba565b90508181036020830152612d6581866120ba565b9050612d7460408301856121aa565b612d81606083018461247a565b95945050505050565b600081905092915050565b6000612da082612063565b612daa8185612d8a565b9350612dba81856020860161207f565b80840191505092915050565b6000612dd28285612d95565b9150612dde8284612d95565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612e4660268361206e565b9150612e5182612dea565b604082019050919050565b60006020820190508181036000830152612e7581612e39565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612eb260208361206e565b9150612ebd82612e7c565b602082019050919050565b60006020820190508181036000830152612ee181612ea5565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612f4460258361206e565b9150612f4f82612ee8565b604082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612fd660248361206e565b9150612fe182612f7a565b604082019050919050565b6000602082019050818103600083015261300581612fc9565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061304260198361206e565b915061304d8261300c565b602082019050919050565b6000602082019050818103600083015261307181613035565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006130d460328361206e565b91506130df82613078565b604082019050919050565b60006020820190508181036000830152613103816130c7565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006131318261310a565b61313b8185613115565b935061314b81856020860161207f565b613154816120a9565b840191505092915050565b600060808201905061317460008301876121aa565b61318160208301866121aa565b61318e604083018561247a565b81810360608301526131a08184613126565b905095945050505050565b6000815190506131ba81611fd4565b92915050565b6000602082840312156131d6576131d5611f9e565b5b60006131e4848285016131ab565b91505092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613249602e8361206e565b9150613254826131ed565b604082019050919050565b600060208201905081810360008301526132788161323c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006132e460208361206e565b91506132ef826132ae565b602082019050919050565b60006020820190508181036000830152613313816132d7565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613350601c8361206e565b915061335b8261331a565b602082019050919050565b6000602082019050818103600083015261337f81613343565b905091905056fea2646970667358221220e8293d73bdf3b8755d1d947e5ff856830ffd833ba6e9800e8147bf4cf655c53564736f6c63430008110033",
}

// TrainingtokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TrainingtokenMetaData.ABI instead.
var TrainingtokenABI = TrainingtokenMetaData.ABI

// TrainingtokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TrainingtokenMetaData.Bin instead.
var TrainingtokenBin = TrainingtokenMetaData.Bin

// DeployTrainingtoken deploys a new Ethereum contract, binding an instance of Trainingtoken to it.
func DeployTrainingtoken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Trainingtoken, error) {
	parsed, err := TrainingtokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TrainingtokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Trainingtoken{TrainingtokenCaller: TrainingtokenCaller{contract: contract}, TrainingtokenTransactor: TrainingtokenTransactor{contract: contract}, TrainingtokenFilterer: TrainingtokenFilterer{contract: contract}}, nil
}

// Trainingtoken is an auto generated Go binding around an Ethereum contract.
type Trainingtoken struct {
	TrainingtokenCaller     // Read-only binding to the contract
	TrainingtokenTransactor // Write-only binding to the contract
	TrainingtokenFilterer   // Log filterer for contract events
}

// TrainingtokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TrainingtokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TrainingtokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TrainingtokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TrainingtokenSession struct {
	Contract     *Trainingtoken    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TrainingtokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TrainingtokenCallerSession struct {
	Contract *TrainingtokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TrainingtokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TrainingtokenTransactorSession struct {
	Contract     *TrainingtokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TrainingtokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TrainingtokenRaw struct {
	Contract *Trainingtoken // Generic contract binding to access the raw methods on
}

// TrainingtokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TrainingtokenCallerRaw struct {
	Contract *TrainingtokenCaller // Generic read-only contract binding to access the raw methods on
}

// TrainingtokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TrainingtokenTransactorRaw struct {
	Contract *TrainingtokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTrainingtoken creates a new instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtoken(address common.Address, backend bind.ContractBackend) (*Trainingtoken, error) {
	contract, err := bindTrainingtoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Trainingtoken{TrainingtokenCaller: TrainingtokenCaller{contract: contract}, TrainingtokenTransactor: TrainingtokenTransactor{contract: contract}, TrainingtokenFilterer: TrainingtokenFilterer{contract: contract}}, nil
}

// NewTrainingtokenCaller creates a new read-only instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenCaller(address common.Address, caller bind.ContractCaller) (*TrainingtokenCaller, error) {
	contract, err := bindTrainingtoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenCaller{contract: contract}, nil
}

// NewTrainingtokenTransactor creates a new write-only instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TrainingtokenTransactor, error) {
	contract, err := bindTrainingtoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenTransactor{contract: contract}, nil
}

// NewTrainingtokenFilterer creates a new log filterer instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TrainingtokenFilterer, error) {
	contract, err := bindTrainingtoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenFilterer{contract: contract}, nil
}

// bindTrainingtoken binds a generic wrapper to an already deployed contract.
func bindTrainingtoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TrainingtokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainingtoken *TrainingtokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainingtoken.Contract.TrainingtokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainingtoken *TrainingtokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TrainingtokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainingtoken *TrainingtokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TrainingtokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainingtoken *TrainingtokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainingtoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainingtoken *TrainingtokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainingtoken *TrainingtokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainingtoken.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainingtoken.Contract.BalanceOf(&_Trainingtoken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainingtoken.Contract.BalanceOf(&_Trainingtoken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.GetApproved(&_Trainingtoken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.GetApproved(&_Trainingtoken.CallOpts, tokenId)
}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCaller) GetTokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "getTokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenSession) GetTokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.GetTokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) GetTokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.GetTokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainingtoken.Contract.IsApprovedForAll(&_Trainingtoken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainingtoken.Contract.IsApprovedForAll(&_Trainingtoken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenSession) Name() (string, error) {
	return _Trainingtoken.Contract.Name(&_Trainingtoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) Name() (string, error) {
	return _Trainingtoken.Contract.Name(&_Trainingtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenSession) Owner() (common.Address, error) {
	return _Trainingtoken.Contract.Owner(&_Trainingtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) Owner() (common.Address, error) {
	return _Trainingtoken.Contract.Owner(&_Trainingtoken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.OwnerOf(&_Trainingtoken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.OwnerOf(&_Trainingtoken.CallOpts, tokenId)
}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) ProtocolDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "protocolDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenSession) ProtocolDeployer() (common.Address, error) {
	return _Trainingtoken.Contract.ProtocolDeployer(&_Trainingtoken.CallOpts)
}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) ProtocolDeployer() (common.Address, error) {
	return _Trainingtoken.Contract.ProtocolDeployer(&_Trainingtoken.CallOpts)
}

// ScatterContractAddress is a free data retrieval call binding the contract method 0x8672c212.
//
// Solidity: function scatterContractAddress() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) ScatterContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "scatterContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScatterContractAddress is a free data retrieval call binding the contract method 0x8672c212.
//
// Solidity: function scatterContractAddress() view returns(address)
func (_Trainingtoken *TrainingtokenSession) ScatterContractAddress() (common.Address, error) {
	return _Trainingtoken.Contract.ScatterContractAddress(&_Trainingtoken.CallOpts)
}

// ScatterContractAddress is a free data retrieval call binding the contract method 0x8672c212.
//
// Solidity: function scatterContractAddress() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) ScatterContractAddress() (common.Address, error) {
	return _Trainingtoken.Contract.ScatterContractAddress(&_Trainingtoken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainingtoken.Contract.SupportsInterface(&_Trainingtoken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainingtoken.Contract.SupportsInterface(&_Trainingtoken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenSession) Symbol() (string, error) {
	return _Trainingtoken.Contract.Symbol(&_Trainingtoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) Symbol() (string, error) {
	return _Trainingtoken.Contract.Symbol(&_Trainingtoken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.TokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.TokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.Approve(&_Trainingtoken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.Approve(&_Trainingtoken.TransactOpts, to, tokenId)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0xc34e62ad.
//
// Solidity: function publishTrainingJob(string tokenURI, string topicName, address recipient, uint256 pooledReward) returns(uint256)
func (_Trainingtoken *TrainingtokenTransactor) PublishTrainingJob(opts *bind.TransactOpts, tokenURI string, topicName string, recipient common.Address, pooledReward *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "publishTrainingJob", tokenURI, topicName, recipient, pooledReward)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0xc34e62ad.
//
// Solidity: function publishTrainingJob(string tokenURI, string topicName, address recipient, uint256 pooledReward) returns(uint256)
func (_Trainingtoken *TrainingtokenSession) PublishTrainingJob(tokenURI string, topicName string, recipient common.Address, pooledReward *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.PublishTrainingJob(&_Trainingtoken.TransactOpts, tokenURI, topicName, recipient, pooledReward)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0xc34e62ad.
//
// Solidity: function publishTrainingJob(string tokenURI, string topicName, address recipient, uint256 pooledReward) returns(uint256)
func (_Trainingtoken *TrainingtokenTransactorSession) PublishTrainingJob(tokenURI string, topicName string, recipient common.Address, pooledReward *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.PublishTrainingJob(&_Trainingtoken.TransactOpts, tokenURI, topicName, recipient, pooledReward)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _Trainingtoken.Contract.RenounceOwnership(&_Trainingtoken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Trainingtoken.Contract.RenounceOwnership(&_Trainingtoken.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom0(&_Trainingtoken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom0(&_Trainingtoken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetApprovalForAll(&_Trainingtoken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetApprovalForAll(&_Trainingtoken.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setBaseURI", baseURI_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenSession) SetBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetBaseURI(&_Trainingtoken.TransactOpts, baseURI_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetBaseURI(&_Trainingtoken.TransactOpts, baseURI_)
}

// SetScatterContractAddress is a paid mutator transaction binding the contract method 0x126d5b6a.
//
// Solidity: function setScatterContractAddress(address contractAddress) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetScatterContractAddress(opts *bind.TransactOpts, contractAddress common.Address) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setScatterContractAddress", contractAddress)
}

// SetScatterContractAddress is a paid mutator transaction binding the contract method 0x126d5b6a.
//
// Solidity: function setScatterContractAddress(address contractAddress) returns()
func (_Trainingtoken *TrainingtokenSession) SetScatterContractAddress(contractAddress common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetScatterContractAddress(&_Trainingtoken.TransactOpts, contractAddress)
}

// SetScatterContractAddress is a paid mutator transaction binding the contract method 0x126d5b6a.
//
// Solidity: function setScatterContractAddress(address contractAddress) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetScatterContractAddress(contractAddress common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetScatterContractAddress(&_Trainingtoken.TransactOpts, contractAddress)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferOwnership(&_Trainingtoken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferOwnership(&_Trainingtoken.TransactOpts, newOwner)
}

// TrainingtokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Trainingtoken contract.
type TrainingtokenApprovalIterator struct {
	Event *TrainingtokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenApproval represents a Approval event raised by the Trainingtoken contract.
type TrainingtokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TrainingtokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenApprovalIterator{contract: _Trainingtoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TrainingtokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenApproval)
				if err := _Trainingtoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseApproval(log types.Log) (*TrainingtokenApproval, error) {
	event := new(TrainingtokenApproval)
	if err := _Trainingtoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Trainingtoken contract.
type TrainingtokenApprovalForAllIterator struct {
	Event *TrainingtokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenApprovalForAll represents a ApprovalForAll event raised by the Trainingtoken contract.
type TrainingtokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TrainingtokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenApprovalForAllIterator{contract: _Trainingtoken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TrainingtokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenApprovalForAll)
				if err := _Trainingtoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) ParseApprovalForAll(log types.Log) (*TrainingtokenApprovalForAll, error) {
	event := new(TrainingtokenApprovalForAll)
	if err := _Trainingtoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the Trainingtoken contract.
type TrainingtokenBatchMetadataUpdateIterator struct {
	Event *TrainingtokenBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the Trainingtoken contract.
type TrainingtokenBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*TrainingtokenBatchMetadataUpdateIterator, error) {

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TrainingtokenBatchMetadataUpdateIterator{contract: _Trainingtoken.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TrainingtokenBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenBatchMetadataUpdate)
				if err := _Trainingtoken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseBatchMetadataUpdate(log types.Log) (*TrainingtokenBatchMetadataUpdate, error) {
	event := new(TrainingtokenBatchMetadataUpdate)
	if err := _Trainingtoken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the Trainingtoken contract.
type TrainingtokenMetadataUpdateIterator struct {
	Event *TrainingtokenMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenMetadataUpdate represents a MetadataUpdate event raised by the Trainingtoken contract.
type TrainingtokenMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*TrainingtokenMetadataUpdateIterator, error) {

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TrainingtokenMetadataUpdateIterator{contract: _Trainingtoken.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TrainingtokenMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenMetadataUpdate)
				if err := _Trainingtoken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseMetadataUpdate(log types.Log) (*TrainingtokenMetadataUpdate, error) {
	event := new(TrainingtokenMetadataUpdate)
	if err := _Trainingtoken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Trainingtoken contract.
type TrainingtokenOwnershipTransferredIterator struct {
	Event *TrainingtokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenOwnershipTransferred represents a OwnershipTransferred event raised by the Trainingtoken contract.
type TrainingtokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TrainingtokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenOwnershipTransferredIterator{contract: _Trainingtoken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TrainingtokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenOwnershipTransferred)
				if err := _Trainingtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) ParseOwnershipTransferred(log types.Log) (*TrainingtokenOwnershipTransferred, error) {
	event := new(TrainingtokenOwnershipTransferred)
	if err := _Trainingtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Trainingtoken contract.
type TrainingtokenTransferIterator struct {
	Event *TrainingtokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenTransfer represents a Transfer event raised by the Trainingtoken contract.
type TrainingtokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TrainingtokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenTransferIterator{contract: _Trainingtoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TrainingtokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenTransfer)
				if err := _Trainingtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseTransfer(log types.Log) (*TrainingtokenTransfer, error) {
	event := new(TrainingtokenTransfer)
	if err := _Trainingtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
