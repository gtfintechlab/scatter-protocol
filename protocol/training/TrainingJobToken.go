// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package trainingtoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TrainingtokenMetaData contains all meta data concerning the Trainingtoken contract.
var TrainingtokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolDeployer\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"publishTrainingJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scatterContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setScatterContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280601e81526020017f536361747465722050726f746f636f6c20547261696e696e67204a6f627300008152506040518060400160405280600481526020017f5350544a0000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000453565b508060019081620000a1919062000453565b505050620000c4620000b86200010b60201b60201c565b6200011360201b60201c565b33600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200053a565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025b57607f821691505b60208210810362000271576200027062000213565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200029c565b620002e786836200029c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003346200032e6200032884620002ff565b62000309565b620002ff565b9050919050565b6000819050919050565b620003508362000313565b620003686200035f826200033b565b848454620002a9565b825550505050565b600090565b6200037f62000370565b6200038c81848462000345565b505050565b5b81811015620003b457620003a860008262000375565b60018101905062000392565b5050565b601f8211156200040357620003cd8162000277565b620003d8846200028c565b81016020851015620003e8578190505b62000400620003f7856200028c565b83018262000391565b50505b505050565b600082821c905092915050565b6000620004286000198460080262000408565b1980831691505092915050565b600062000443838362000415565b9150826002028217905092915050565b6200045e82620001d9565b67ffffffffffffffff8111156200047a5762000479620001e4565b5b62000486825462000242565b62000493828285620003b8565b600060209050601f831160018114620004cb5760008415620004b6578287015190505b620004c2858262000435565b86555062000532565b601f198416620004db8662000277565b60005b828110156200050557848901518255600182019150602085019450602081019050620004de565b8683101562000525578489015162000521601f89168262000415565b8355505b6001600288020188555050505b505050505050565b613291806200054a6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80636838a4f6116100b857806395d89b411161007c57806395d89b4114610375578063a22cb46514610393578063b88d4fde146103af578063c87b56dd146103cb578063e985e9c5146103fb578063f2fde38b1461042b57610142565b80636838a4f6146102cf57806370a08231146102ff578063715018a61461032f5780638672c212146103395780638da5cb5b1461035757610142565b806323b872dd1161010a57806323b872dd146101fd578063330c093c146102195780633bb3a24d1461023757806342842e0e1461026757806355f804b3146102835780636352211e1461029f57610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c5578063126d5b6a146101e1575b600080fd5b610161600480360381019061015c9190611f6b565b610447565b60405161016e9190611fb3565b60405180910390f35b61017f6104a8565b60405161018c919061205e565b60405180910390f35b6101af60048036038101906101aa91906120b6565b61053a565b6040516101bc9190612124565b60405180910390f35b6101df60048036038101906101da919061216b565b610580565b005b6101fb60048036038101906101f691906121ab565b610697565b005b610217600480360381019061021291906121d8565b6106e3565b005b610221610743565b60405161022e919061224c565b60405180910390f35b610251600480360381019061024c91906120b6565b610769565b60405161025e919061205e565b60405180910390f35b610281600480360381019061027c91906121d8565b61077b565b005b61029d6004803603810190610298919061239c565b61079b565b005b6102b960048036038101906102b491906120b6565b6107b6565b6040516102c69190612124565b60405180910390f35b6102e960048036038101906102e491906123e5565b61083c565b6040516102f69190612450565b60405180910390f35b610319600480360381019061031491906121ab565b610904565b6040516103269190612450565b60405180910390f35b6103376109bb565b005b6103416109cf565b60405161034e9190612124565b60405180910390f35b61035f6109f5565b60405161036c9190612124565b60405180910390f35b61037d610a1f565b60405161038a919061205e565b60405180910390f35b6103ad60048036038101906103a89190612497565b610ab1565b005b6103c960048036038101906103c49190612578565b610ac7565b005b6103e560048036038101906103e091906120b6565b610b29565b6040516103f2919061205e565b60405180910390f35b610415600480360381019061041091906125fb565b610c3b565b6040516104229190611fb3565b60405180910390f35b610445600480360381019061044091906121ab565b610ccf565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a157506104a082610d52565b5b9050919050565b6060600080546104b79061266a565b80601f01602080910402602001604051908101604052809291908181526020018280546104e39061266a565b80156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b5050505050905090565b600061054582610e34565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061058b826107b6565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f29061270d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661061a610e7f565b73ffffffffffffffffffffffffffffffffffffffff161480610649575061064881610643610e7f565b610c3b565b5b610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f9061279f565b60405180910390fd5b6106928383610e87565b505050565b61069f610f40565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6106f46106ee610e7f565b82610fbe565b610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072a90612831565b60405180910390fd5b61073e838383611053565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061077482610b29565b9050919050565b61079683838360405180602001604052806000815250610ac7565b505050565b6107a3610f40565b80600990816107b291906129fd565b5050565b6000806107c28361134c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a90612b1b565b60405180910390fd5b80915050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590612bad565b60405180910390fd5b6108d8600c611389565b60006108e4600c61139f565b90506108f083826113ad565b6108fa81856113cb565b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b90612c3f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109c3610f40565b6109cd60006113d9565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610a2e9061266a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a9061266a565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b5050505050905090565b610ac3610abc610e7f565b838361149f565b5050565b610ad8610ad2610e7f565b83610fbe565b610b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0e90612831565b60405180910390fd5b610b238484848461160b565b50505050565b6060610b3482610e34565b6000600660008481526020019081526020016000208054610b549061266a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b809061266a565b8015610bcd5780601f10610ba257610100808354040283529160200191610bcd565b820191906000526020600020905b815481529060010190602001808311610bb057829003601f168201915b505050505090506000610bde611667565b90506000815103610bf3578192505050610c36565b600082511115610c28578082604051602001610c10929190612c9b565b60405160208183030381529060405292505050610c36565b610c31846116f9565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610cd7610f40565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90612d31565b60405180910390fd5b610d4f816113d9565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610e1d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610e2d5750610e2c82611761565b5b9050919050565b610e3d816117cb565b610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7390612b1b565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610efa836107b6565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610f48610e7f565b73ffffffffffffffffffffffffffffffffffffffff16610f666109f5565b73ffffffffffffffffffffffffffffffffffffffff1614610fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb390612d9d565b60405180910390fd5b565b600080610fca836107b6565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061100c575061100b8185610c3b565b5b8061104a57508373ffffffffffffffffffffffffffffffffffffffff166110328461053a565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611073826107b6565b73ffffffffffffffffffffffffffffffffffffffff16146110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c090612e2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112f90612ec1565b60405180910390fd5b611145838383600161180c565b8273ffffffffffffffffffffffffffffffffffffffff16611165826107b6565b73ffffffffffffffffffffffffffffffffffffffff16146111bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b290612e2f565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46113478383836001611812565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6113c7828260405180602001604052806000815250611818565b5050565b6113d58282611873565b5050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361150d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150490612f2d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115fe9190611fb3565b60405180910390a3505050565b611616848484611053565b61162284848484611917565b611661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165890612fbf565b60405180910390fd5b50505050565b6060600980546116769061266a565b80601f01602080910402602001604051908101604052809291908181526020018280546116a29061266a565b80156116ef5780601f106116c4576101008083540402835291602001916116ef565b820191906000526020600020905b8154815290600101906020018083116116d257829003601f168201915b5050505050905090565b606061170482610e34565b600061170e611667565b9050600081511161172e5760405180602001604052806000815250611759565b8061173884611a9e565b604051602001611749929190612c9b565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166117ed8361134c565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6118228383611b6c565b61182f6000848484611917565b61186e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186590612fbf565b60405180910390fd5b505050565b61187c826117cb565b6118bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b290613051565b60405180910390fd5b806006600084815260200190815260200160002090816118db91906129fd565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161190b9190612450565b60405180910390a15050565b60006119388473ffffffffffffffffffffffffffffffffffffffff16611d89565b15611a91578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611961610e7f565b8786866040518563ffffffff1660e01b815260040161198394939291906130c6565b6020604051808303816000875af19250505080156119bf57506040513d601f19601f820116820180604052508101906119bc9190613127565b60015b611a41573d80600081146119ef576040519150601f19603f3d011682016040523d82523d6000602084013e6119f4565b606091505b506000815103611a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3090612fbf565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611a96565b600190505b949350505050565b606060006001611aad84611dac565b01905060008167ffffffffffffffff811115611acc57611acb612271565b5b6040519080825280601f01601f191660200182016040528015611afe5781602001600182028036833780820191505090505b509050600082602001820190505b600115611b61578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611b5557611b54613154565b5b04945060008503611b0c575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd2906131cf565b60405180910390fd5b611be4816117cb565b15611c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1b9061323b565b60405180910390fd5b611c3260008383600161180c565b611c3b816117cb565b15611c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c729061323b565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d85600083836001611812565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e0a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e0057611dff613154565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611e47576d04ee2d6d415b85acef81000000008381611e3d57611e3c613154565b5b0492506020810190505b662386f26fc100008310611e7657662386f26fc100008381611e6c57611e6b613154565b5b0492506010810190505b6305f5e1008310611e9f576305f5e1008381611e9557611e94613154565b5b0492506008810190505b6127108310611ec4576127108381611eba57611eb9613154565b5b0492506004810190505b60648310611ee75760648381611edd57611edc613154565b5b0492506002810190505b600a8310611ef6576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f4881611f13565b8114611f5357600080fd5b50565b600081359050611f6581611f3f565b92915050565b600060208284031215611f8157611f80611f09565b5b6000611f8f84828501611f56565b91505092915050565b60008115159050919050565b611fad81611f98565b82525050565b6000602082019050611fc86000830184611fa4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612008578082015181840152602081019050611fed565b60008484015250505050565b6000601f19601f8301169050919050565b600061203082611fce565b61203a8185611fd9565b935061204a818560208601611fea565b61205381612014565b840191505092915050565b600060208201905081810360008301526120788184612025565b905092915050565b6000819050919050565b61209381612080565b811461209e57600080fd5b50565b6000813590506120b08161208a565b92915050565b6000602082840312156120cc576120cb611f09565b5b60006120da848285016120a1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061210e826120e3565b9050919050565b61211e81612103565b82525050565b60006020820190506121396000830184612115565b92915050565b61214881612103565b811461215357600080fd5b50565b6000813590506121658161213f565b92915050565b6000806040838503121561218257612181611f09565b5b600061219085828601612156565b92505060206121a1858286016120a1565b9150509250929050565b6000602082840312156121c1576121c0611f09565b5b60006121cf84828501612156565b91505092915050565b6000806000606084860312156121f1576121f0611f09565b5b60006121ff86828701612156565b935050602061221086828701612156565b9250506040612221868287016120a1565b9150509250925092565b6000612236826120e3565b9050919050565b6122468161222b565b82525050565b6000602082019050612261600083018461223d565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122a982612014565b810181811067ffffffffffffffff821117156122c8576122c7612271565b5b80604052505050565b60006122db611eff565b90506122e782826122a0565b919050565b600067ffffffffffffffff82111561230757612306612271565b5b61231082612014565b9050602081019050919050565b82818337600083830152505050565b600061233f61233a846122ec565b6122d1565b90508281526020810184848401111561235b5761235a61226c565b5b61236684828561231d565b509392505050565b600082601f83011261238357612382612267565b5b813561239384826020860161232c565b91505092915050565b6000602082840312156123b2576123b1611f09565b5b600082013567ffffffffffffffff8111156123d0576123cf611f0e565b5b6123dc8482850161236e565b91505092915050565b600080604083850312156123fc576123fb611f09565b5b600083013567ffffffffffffffff81111561241a57612419611f0e565b5b6124268582860161236e565b925050602061243785828601612156565b9150509250929050565b61244a81612080565b82525050565b60006020820190506124656000830184612441565b92915050565b61247481611f98565b811461247f57600080fd5b50565b6000813590506124918161246b565b92915050565b600080604083850312156124ae576124ad611f09565b5b60006124bc85828601612156565b92505060206124cd85828601612482565b9150509250929050565b600067ffffffffffffffff8211156124f2576124f1612271565b5b6124fb82612014565b9050602081019050919050565b600061251b612516846124d7565b6122d1565b9050828152602081018484840111156125375761253661226c565b5b61254284828561231d565b509392505050565b600082601f83011261255f5761255e612267565b5b813561256f848260208601612508565b91505092915050565b6000806000806080858703121561259257612591611f09565b5b60006125a087828801612156565b94505060206125b187828801612156565b93505060406125c2878288016120a1565b925050606085013567ffffffffffffffff8111156125e3576125e2611f0e565b5b6125ef8782880161254a565b91505092959194509250565b6000806040838503121561261257612611611f09565b5b600061262085828601612156565b925050602061263185828601612156565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061268257607f821691505b6020821081036126955761269461263b565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006126f7602183611fd9565b91506127028261269b565b604082019050919050565b60006020820190508181036000830152612726816126ea565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612789603d83611fd9565b91506127948261272d565b604082019050919050565b600060208201905081810360008301526127b88161277c565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061281b602d83611fd9565b9150612826826127bf565b604082019050919050565b6000602082019050818103600083015261284a8161280e565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128b37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612876565b6128bd8683612876565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128fa6128f56128f084612080565b6128d5565b612080565b9050919050565b6000819050919050565b612914836128df565b61292861292082612901565b848454612883565b825550505050565b600090565b61293d612930565b61294881848461290b565b505050565b5b8181101561296c57612961600082612935565b60018101905061294e565b5050565b601f8211156129b15761298281612851565b61298b84612866565b8101602085101561299a578190505b6129ae6129a685612866565b83018261294d565b50505b505050565b600082821c905092915050565b60006129d4600019846008026129b6565b1980831691505092915050565b60006129ed83836129c3565b9150826002028217905092915050565b612a0682611fce565b67ffffffffffffffff811115612a1f57612a1e612271565b5b612a29825461266a565b612a34828285612970565b600060209050601f831160018114612a675760008415612a55578287015190505b612a5f85826129e1565b865550612ac7565b601f198416612a7586612851565b60005b82811015612a9d57848901518255600182019150602085019450602081019050612a78565b86831015612aba5784890151612ab6601f8916826129c3565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b05601883611fd9565b9150612b1082612acf565b602082019050919050565b60006020820190508181036000830152612b3481612af8565b9050919050565b7f54686973206d6574686f642063616e206f6e6c792062652063616c6c6564206260008201527f792074686520736361747465722070726f746f636f6c20636f6e747261637400602082015250565b6000612b97603f83611fd9565b9150612ba282612b3b565b604082019050919050565b60006020820190508181036000830152612bc681612b8a565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c29602983611fd9565b9150612c3482612bcd565b604082019050919050565b60006020820190508181036000830152612c5881612c1c565b9050919050565b600081905092915050565b6000612c7582611fce565b612c7f8185612c5f565b9350612c8f818560208601611fea565b80840191505092915050565b6000612ca78285612c6a565b9150612cb38284612c6a565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d1b602683611fd9565b9150612d2682612cbf565b604082019050919050565b60006020820190508181036000830152612d4a81612d0e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612d87602083611fd9565b9150612d9282612d51565b602082019050919050565b60006020820190508181036000830152612db681612d7a565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612e19602583611fd9565b9150612e2482612dbd565b604082019050919050565b60006020820190508181036000830152612e4881612e0c565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612eab602483611fd9565b9150612eb682612e4f565b604082019050919050565b60006020820190508181036000830152612eda81612e9e565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612f17601983611fd9565b9150612f2282612ee1565b602082019050919050565b60006020820190508181036000830152612f4681612f0a565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612fa9603283611fd9565b9150612fb482612f4d565b604082019050919050565b60006020820190508181036000830152612fd881612f9c565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061303b602e83611fd9565b915061304682612fdf565b604082019050919050565b6000602082019050818103600083015261306a8161302e565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061309882613071565b6130a2818561307c565b93506130b2818560208601611fea565b6130bb81612014565b840191505092915050565b60006080820190506130db6000830187612115565b6130e86020830186612115565b6130f56040830185612441565b8181036060830152613107818461308d565b905095945050505050565b60008151905061312181611f3f565b92915050565b60006020828403121561313d5761313c611f09565b5b600061314b84828501613112565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006131b9602083611fd9565b91506131c482613183565b602082019050919050565b600060208201905081810360008301526131e8816131ac565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613225601c83611fd9565b9150613230826131ef565b602082019050919050565b6000602082019050818103600083015261325481613218565b905091905056fea26469706673582212202d4d94611abf31c5ecee3afce24f598c6960e0bfa5b97173f3fbfd6ee733847d64736f6c63430008110033",
}

// TrainingtokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TrainingtokenMetaData.ABI instead.
var TrainingtokenABI = TrainingtokenMetaData.ABI

// TrainingtokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TrainingtokenMetaData.Bin instead.
var TrainingtokenBin = TrainingtokenMetaData.Bin

// DeployTrainingtoken deploys a new Ethereum contract, binding an instance of Trainingtoken to it.
func DeployTrainingtoken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Trainingtoken, error) {
	parsed, err := TrainingtokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TrainingtokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Trainingtoken{TrainingtokenCaller: TrainingtokenCaller{contract: contract}, TrainingtokenTransactor: TrainingtokenTransactor{contract: contract}, TrainingtokenFilterer: TrainingtokenFilterer{contract: contract}}, nil
}

// Trainingtoken is an auto generated Go binding around an Ethereum contract.
type Trainingtoken struct {
	TrainingtokenCaller     // Read-only binding to the contract
	TrainingtokenTransactor // Write-only binding to the contract
	TrainingtokenFilterer   // Log filterer for contract events
}

// TrainingtokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TrainingtokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TrainingtokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TrainingtokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TrainingtokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TrainingtokenSession struct {
	Contract     *Trainingtoken    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TrainingtokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TrainingtokenCallerSession struct {
	Contract *TrainingtokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TrainingtokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TrainingtokenTransactorSession struct {
	Contract     *TrainingtokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TrainingtokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TrainingtokenRaw struct {
	Contract *Trainingtoken // Generic contract binding to access the raw methods on
}

// TrainingtokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TrainingtokenCallerRaw struct {
	Contract *TrainingtokenCaller // Generic read-only contract binding to access the raw methods on
}

// TrainingtokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TrainingtokenTransactorRaw struct {
	Contract *TrainingtokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTrainingtoken creates a new instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtoken(address common.Address, backend bind.ContractBackend) (*Trainingtoken, error) {
	contract, err := bindTrainingtoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Trainingtoken{TrainingtokenCaller: TrainingtokenCaller{contract: contract}, TrainingtokenTransactor: TrainingtokenTransactor{contract: contract}, TrainingtokenFilterer: TrainingtokenFilterer{contract: contract}}, nil
}

// NewTrainingtokenCaller creates a new read-only instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenCaller(address common.Address, caller bind.ContractCaller) (*TrainingtokenCaller, error) {
	contract, err := bindTrainingtoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenCaller{contract: contract}, nil
}

// NewTrainingtokenTransactor creates a new write-only instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TrainingtokenTransactor, error) {
	contract, err := bindTrainingtoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenTransactor{contract: contract}, nil
}

// NewTrainingtokenFilterer creates a new log filterer instance of Trainingtoken, bound to a specific deployed contract.
func NewTrainingtokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TrainingtokenFilterer, error) {
	contract, err := bindTrainingtoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenFilterer{contract: contract}, nil
}

// bindTrainingtoken binds a generic wrapper to an already deployed contract.
func bindTrainingtoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TrainingtokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainingtoken *TrainingtokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainingtoken.Contract.TrainingtokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainingtoken *TrainingtokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TrainingtokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainingtoken *TrainingtokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TrainingtokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Trainingtoken *TrainingtokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Trainingtoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Trainingtoken *TrainingtokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Trainingtoken *TrainingtokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Trainingtoken.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainingtoken.Contract.BalanceOf(&_Trainingtoken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Trainingtoken *TrainingtokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Trainingtoken.Contract.BalanceOf(&_Trainingtoken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.GetApproved(&_Trainingtoken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.GetApproved(&_Trainingtoken.CallOpts, tokenId)
}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCaller) GetTokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "getTokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenSession) GetTokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.GetTokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// GetTokenURI is a free data retrieval call binding the contract method 0x3bb3a24d.
//
// Solidity: function getTokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) GetTokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.GetTokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainingtoken.Contract.IsApprovedForAll(&_Trainingtoken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Trainingtoken *TrainingtokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Trainingtoken.Contract.IsApprovedForAll(&_Trainingtoken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenSession) Name() (string, error) {
	return _Trainingtoken.Contract.Name(&_Trainingtoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) Name() (string, error) {
	return _Trainingtoken.Contract.Name(&_Trainingtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenSession) Owner() (common.Address, error) {
	return _Trainingtoken.Contract.Owner(&_Trainingtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) Owner() (common.Address, error) {
	return _Trainingtoken.Contract.Owner(&_Trainingtoken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.OwnerOf(&_Trainingtoken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Trainingtoken.Contract.OwnerOf(&_Trainingtoken.CallOpts, tokenId)
}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) ProtocolDeployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "protocolDeployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenSession) ProtocolDeployer() (common.Address, error) {
	return _Trainingtoken.Contract.ProtocolDeployer(&_Trainingtoken.CallOpts)
}

// ProtocolDeployer is a free data retrieval call binding the contract method 0x330c093c.
//
// Solidity: function protocolDeployer() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) ProtocolDeployer() (common.Address, error) {
	return _Trainingtoken.Contract.ProtocolDeployer(&_Trainingtoken.CallOpts)
}

// ScatterContractAddress is a free data retrieval call binding the contract method 0x8672c212.
//
// Solidity: function scatterContractAddress() view returns(address)
func (_Trainingtoken *TrainingtokenCaller) ScatterContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "scatterContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScatterContractAddress is a free data retrieval call binding the contract method 0x8672c212.
//
// Solidity: function scatterContractAddress() view returns(address)
func (_Trainingtoken *TrainingtokenSession) ScatterContractAddress() (common.Address, error) {
	return _Trainingtoken.Contract.ScatterContractAddress(&_Trainingtoken.CallOpts)
}

// ScatterContractAddress is a free data retrieval call binding the contract method 0x8672c212.
//
// Solidity: function scatterContractAddress() view returns(address)
func (_Trainingtoken *TrainingtokenCallerSession) ScatterContractAddress() (common.Address, error) {
	return _Trainingtoken.Contract.ScatterContractAddress(&_Trainingtoken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainingtoken.Contract.SupportsInterface(&_Trainingtoken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Trainingtoken *TrainingtokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Trainingtoken.Contract.SupportsInterface(&_Trainingtoken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenSession) Symbol() (string, error) {
	return _Trainingtoken.Contract.Symbol(&_Trainingtoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) Symbol() (string, error) {
	return _Trainingtoken.Contract.Symbol(&_Trainingtoken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Trainingtoken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.TokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Trainingtoken *TrainingtokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Trainingtoken.Contract.TokenURI(&_Trainingtoken.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.Approve(&_Trainingtoken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.Approve(&_Trainingtoken.TransactOpts, to, tokenId)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0x6838a4f6.
//
// Solidity: function publishTrainingJob(string tokenURI, address recipient) returns(uint256)
func (_Trainingtoken *TrainingtokenTransactor) PublishTrainingJob(opts *bind.TransactOpts, tokenURI string, recipient common.Address) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "publishTrainingJob", tokenURI, recipient)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0x6838a4f6.
//
// Solidity: function publishTrainingJob(string tokenURI, address recipient) returns(uint256)
func (_Trainingtoken *TrainingtokenSession) PublishTrainingJob(tokenURI string, recipient common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.PublishTrainingJob(&_Trainingtoken.TransactOpts, tokenURI, recipient)
}

// PublishTrainingJob is a paid mutator transaction binding the contract method 0x6838a4f6.
//
// Solidity: function publishTrainingJob(string tokenURI, address recipient) returns(uint256)
func (_Trainingtoken *TrainingtokenTransactorSession) PublishTrainingJob(tokenURI string, recipient common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.PublishTrainingJob(&_Trainingtoken.TransactOpts, tokenURI, recipient)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _Trainingtoken.Contract.RenounceOwnership(&_Trainingtoken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Trainingtoken *TrainingtokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Trainingtoken.Contract.RenounceOwnership(&_Trainingtoken.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom0(&_Trainingtoken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SafeTransferFrom0(&_Trainingtoken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetApprovalForAll(&_Trainingtoken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetApprovalForAll(&_Trainingtoken.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setBaseURI", baseURI_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenSession) SetBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetBaseURI(&_Trainingtoken.TransactOpts, baseURI_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string baseURI_) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetBaseURI(&_Trainingtoken.TransactOpts, baseURI_)
}

// SetScatterContractAddress is a paid mutator transaction binding the contract method 0x126d5b6a.
//
// Solidity: function setScatterContractAddress(address contractAddress) returns()
func (_Trainingtoken *TrainingtokenTransactor) SetScatterContractAddress(opts *bind.TransactOpts, contractAddress common.Address) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "setScatterContractAddress", contractAddress)
}

// SetScatterContractAddress is a paid mutator transaction binding the contract method 0x126d5b6a.
//
// Solidity: function setScatterContractAddress(address contractAddress) returns()
func (_Trainingtoken *TrainingtokenSession) SetScatterContractAddress(contractAddress common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetScatterContractAddress(&_Trainingtoken.TransactOpts, contractAddress)
}

// SetScatterContractAddress is a paid mutator transaction binding the contract method 0x126d5b6a.
//
// Solidity: function setScatterContractAddress(address contractAddress) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) SetScatterContractAddress(contractAddress common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.SetScatterContractAddress(&_Trainingtoken.TransactOpts, contractAddress)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferFrom(&_Trainingtoken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferOwnership(&_Trainingtoken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Trainingtoken *TrainingtokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Trainingtoken.Contract.TransferOwnership(&_Trainingtoken.TransactOpts, newOwner)
}

// TrainingtokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Trainingtoken contract.
type TrainingtokenApprovalIterator struct {
	Event *TrainingtokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenApproval represents a Approval event raised by the Trainingtoken contract.
type TrainingtokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TrainingtokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenApprovalIterator{contract: _Trainingtoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TrainingtokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenApproval)
				if err := _Trainingtoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseApproval(log types.Log) (*TrainingtokenApproval, error) {
	event := new(TrainingtokenApproval)
	if err := _Trainingtoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Trainingtoken contract.
type TrainingtokenApprovalForAllIterator struct {
	Event *TrainingtokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenApprovalForAll represents a ApprovalForAll event raised by the Trainingtoken contract.
type TrainingtokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TrainingtokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenApprovalForAllIterator{contract: _Trainingtoken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TrainingtokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenApprovalForAll)
				if err := _Trainingtoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Trainingtoken *TrainingtokenFilterer) ParseApprovalForAll(log types.Log) (*TrainingtokenApprovalForAll, error) {
	event := new(TrainingtokenApprovalForAll)
	if err := _Trainingtoken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenBatchMetadataUpdateIterator is returned from FilterBatchMetadataUpdate and is used to iterate over the raw logs and unpacked data for BatchMetadataUpdate events raised by the Trainingtoken contract.
type TrainingtokenBatchMetadataUpdateIterator struct {
	Event *TrainingtokenBatchMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenBatchMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenBatchMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenBatchMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenBatchMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenBatchMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenBatchMetadataUpdate represents a BatchMetadataUpdate event raised by the Trainingtoken contract.
type TrainingtokenBatchMetadataUpdate struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterBatchMetadataUpdate is a free log retrieval operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterBatchMetadataUpdate(opts *bind.FilterOpts) (*TrainingtokenBatchMetadataUpdateIterator, error) {

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TrainingtokenBatchMetadataUpdateIterator{contract: _Trainingtoken.contract, event: "BatchMetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchBatchMetadataUpdate is a free log subscription operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchBatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TrainingtokenBatchMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "BatchMetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenBatchMetadataUpdate)
				if err := _Trainingtoken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMetadataUpdate is a log parse operation binding the contract event 0x6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c.
//
// Solidity: event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseBatchMetadataUpdate(log types.Log) (*TrainingtokenBatchMetadataUpdate, error) {
	event := new(TrainingtokenBatchMetadataUpdate)
	if err := _Trainingtoken.contract.UnpackLog(event, "BatchMetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenMetadataUpdateIterator is returned from FilterMetadataUpdate and is used to iterate over the raw logs and unpacked data for MetadataUpdate events raised by the Trainingtoken contract.
type TrainingtokenMetadataUpdateIterator struct {
	Event *TrainingtokenMetadataUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenMetadataUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenMetadataUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenMetadataUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenMetadataUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenMetadataUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenMetadataUpdate represents a MetadataUpdate event raised by the Trainingtoken contract.
type TrainingtokenMetadataUpdate struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMetadataUpdate is a free log retrieval operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterMetadataUpdate(opts *bind.FilterOpts) (*TrainingtokenMetadataUpdateIterator, error) {

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return &TrainingtokenMetadataUpdateIterator{contract: _Trainingtoken.contract, event: "MetadataUpdate", logs: logs, sub: sub}, nil
}

// WatchMetadataUpdate is a free log subscription operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchMetadataUpdate(opts *bind.WatchOpts, sink chan<- *TrainingtokenMetadataUpdate) (event.Subscription, error) {

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "MetadataUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenMetadataUpdate)
				if err := _Trainingtoken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataUpdate is a log parse operation binding the contract event 0xf8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7.
//
// Solidity: event MetadataUpdate(uint256 _tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseMetadataUpdate(log types.Log) (*TrainingtokenMetadataUpdate, error) {
	event := new(TrainingtokenMetadataUpdate)
	if err := _Trainingtoken.contract.UnpackLog(event, "MetadataUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Trainingtoken contract.
type TrainingtokenOwnershipTransferredIterator struct {
	Event *TrainingtokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenOwnershipTransferred represents a OwnershipTransferred event raised by the Trainingtoken contract.
type TrainingtokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TrainingtokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenOwnershipTransferredIterator{contract: _Trainingtoken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TrainingtokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenOwnershipTransferred)
				if err := _Trainingtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Trainingtoken *TrainingtokenFilterer) ParseOwnershipTransferred(log types.Log) (*TrainingtokenOwnershipTransferred, error) {
	event := new(TrainingtokenOwnershipTransferred)
	if err := _Trainingtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TrainingtokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Trainingtoken contract.
type TrainingtokenTransferIterator struct {
	Event *TrainingtokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TrainingtokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TrainingtokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TrainingtokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TrainingtokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TrainingtokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TrainingtokenTransfer represents a Transfer event raised by the Trainingtoken contract.
type TrainingtokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TrainingtokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TrainingtokenTransferIterator{contract: _Trainingtoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TrainingtokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Trainingtoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TrainingtokenTransfer)
				if err := _Trainingtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Trainingtoken *TrainingtokenFilterer) ParseTransfer(log types.Log) (*TrainingtokenTransfer, error) {
	event := new(TrainingtokenTransfer)
	if err := _Trainingtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
