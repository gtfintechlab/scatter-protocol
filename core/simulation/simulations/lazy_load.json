{
    "environment": {
        "deployProtocol": true,
        "protocolOwnerAddress": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "protocolOwnerPrivateKey": "ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80",
        "ethereumNode": "ws://127.0.0.1:8545",
        "dummyLoad": true
    },
    "nodes": [
        {
            "id": "bootstrap_node",
            "type": "bootstrap",
            "ipv4Address": "127.0.0.1",
            "tcpPort": 7001 
        },
        {
            "id": "requestor_node",
            "type": "requestor",
            "apiPort": 5002,
            "datastorePort": 8701,
            "datastoreUsername": "postgres",
            "datastorePassword": "postgres",
            "useMdns": true,
            "blockchainAddress": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
            "privateKey": "59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d",
            "initialScatterTokenSupply": 1000000
        },
        {
            "id": "trainer_node",
            "type": "trainer",
            "apiPort": 6001,
            "datastorePort": 8702,
            "datastoreUsername": "postgres",
            "datastorePassword": "postgres",
            "useMdns": true,
            "blockchainAddress": "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
            "privateKey": "5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a",
            "initialScatterTokenSupply": 1000000
        },
        {
            "id": "validator_node",
            "type": "validator",
            "apiPort": 7002,
            "datastorePort": 8703,
            "datastoreUsername": "postgres",
            "datastorePassword": "postgres",
            "useMdns": true,
            "blockchainAddress": "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
            "privateKey": "7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",
            "initialScatterTokenSupply": 1000000
        }
    ],

    "steps": [
        {
            "description": "Requestor is requesting the network to train a model",
            "nodeId": "requestor_node",
            "action": "POST /node/topic/add",
            "body": {
                "topic": "requestor topic 1",
                "trainingJobPath": "training/requestor/train",
                "reward": 1000,
                "validationThreshold": 40, 
                "evaluationJobPath": "training/requestor/validate",
                "evaluationJobDataPath": "training/data/requestor/validate"
            }
        },
        {
            "description": "Trainer is searching for all topics that have been published",
            "nodeId": "trainer_node",
            "action": "GET /node/topics/published",

            "_comment": "stateKey will make the result of this action accessible across other actions this node takes part in",
            "stateKey": "PUBLISHED_TOPICS" 
        },
        {
            "description": "Trainer is adding the topic that has been found",
            "nodeId": "trainer_node",
            "action": "POST /node/topic/add",
            "body": {
                "requestorAddress": "{PUBLISHED_TOPICS.topics[0].NodeAddress}",
                "topic": "{PUBLISHED_TOPICS.topics[0].TopicName}",
                "path": "/home/samrat/Documents/scatterchain/core/training/data/trainer/example",
                "stake": 500
            }
        },
        {
            "description": "Requestor is starting the training procedure",
            "nodeId": "requestor_node",
            "action": "POST /node/training/start",
            "body": {
                "topic": "requestor topic 1"
            }
        }
    ]
}